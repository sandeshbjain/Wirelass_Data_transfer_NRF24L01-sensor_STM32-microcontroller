
SD_CARD_PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cb8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08007e40  08007e40  00017e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fd0  08007fd0  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007fd0  08007fd0  00017fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007fd8  08007fd8  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fd8  08007fd8  00017fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fdc  08007fdc  00017fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007fe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00000180  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00006004  20000194  20000194  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012f40  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b50  00000000  00000000  00032f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff0  00000000  00000000  00035ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ec8  00000000  00000000  00036ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022e03  00000000  00000000  00037990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000146f8  00000000  00000000  0005a793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000caaf3  00000000  00000000  0006ee8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013997e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000413c  00000000  00000000  001399d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007e28 	.word	0x08007e28

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08007e28 	.word	0x08007e28

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <CS_Select>:
#define NRF24_CSN_PORT   GPIOB
#define NRF24_CSN_PIN    GPIO_PIN_7


void CS_Select (void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2180      	movs	r1, #128	; 0x80
 80004d4:	4802      	ldr	r0, [pc, #8]	; (80004e0 <CS_Select+0x14>)
 80004d6:	f001 f9bd 	bl	8001854 <HAL_GPIO_WritePin>
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40020400 	.word	0x40020400

080004e4 <CS_UnSelect>:

void CS_UnSelect (void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2180      	movs	r1, #128	; 0x80
 80004ec:	4802      	ldr	r0, [pc, #8]	; (80004f8 <CS_UnSelect+0x14>)
 80004ee:	f001 f9b1 	bl	8001854 <HAL_GPIO_WritePin>
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40020400 	.word	0x40020400

080004fc <CE_Enable>:


void CE_Enable (void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000500:	2201      	movs	r2, #1
 8000502:	2140      	movs	r1, #64	; 0x40
 8000504:	4802      	ldr	r0, [pc, #8]	; (8000510 <CE_Enable+0x14>)
 8000506:	f001 f9a5 	bl	8001854 <HAL_GPIO_WritePin>
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40020400 	.word	0x40020400

08000514 <CE_Disable>:

void CE_Disable (void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	2140      	movs	r1, #64	; 0x40
 800051c:	4802      	ldr	r0, [pc, #8]	; (8000528 <CE_Disable+0x14>)
 800051e:	f001 f999 	bl	8001854 <HAL_GPIO_WritePin>
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40020400 	.word	0x40020400

0800052c <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	460a      	mov	r2, r1
 8000536:	71fb      	strb	r3, [r7, #7]
 8000538:	4613      	mov	r3, r2
 800053a:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	f043 0320 	orr.w	r3, r3, #32
 8000542:	b2db      	uxtb	r3, r3
 8000544:	733b      	strb	r3, [r7, #12]
	buf[1] = Data;
 8000546:	79bb      	ldrb	r3, [r7, #6]
 8000548:	737b      	strb	r3, [r7, #13]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800054a:	f7ff ffbf 	bl	80004cc <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 800054e:	f107 010c 	add.w	r1, r7, #12
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	2202      	movs	r2, #2
 8000558:	4804      	ldr	r0, [pc, #16]	; (800056c <nrf24_WriteReg+0x40>)
 800055a:	f002 fdfe 	bl	800315a <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 800055e:	f7ff ffc1 	bl	80004e4 <CS_UnSelect>
}
 8000562:	bf00      	nop
 8000564:	3710      	adds	r7, #16
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	200000b4 	.word	0x200000b4

08000570 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
 800057c:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	f043 0320 	orr.w	r3, r3, #32
 8000584:	b2db      	uxtb	r3, r3
 8000586:	753b      	strb	r3, [r7, #20]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000588:	f7ff ffa0 	bl	80004cc <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 800058c:	f107 0114 	add.w	r1, r7, #20
 8000590:	2364      	movs	r3, #100	; 0x64
 8000592:	2201      	movs	r2, #1
 8000594:	4808      	ldr	r0, [pc, #32]	; (80005b8 <nrf24_WriteRegMulti+0x48>)
 8000596:	f002 fde0 	bl	800315a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	b29a      	uxth	r2, r3
 800059e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a2:	68b9      	ldr	r1, [r7, #8]
 80005a4:	4804      	ldr	r0, [pc, #16]	; (80005b8 <nrf24_WriteRegMulti+0x48>)
 80005a6:	f002 fdd8 	bl	800315a <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80005aa:	f7ff ff9b 	bl	80004e4 <CS_UnSelect>
}
 80005ae:	bf00      	nop
 80005b0:	3718      	adds	r7, #24
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	200000b4 	.word	0x200000b4

080005bc <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	73fb      	strb	r3, [r7, #15]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80005ca:	f7ff ff7f 	bl	80004cc <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 80005ce:	1df9      	adds	r1, r7, #7
 80005d0:	2364      	movs	r3, #100	; 0x64
 80005d2:	2201      	movs	r2, #1
 80005d4:	4808      	ldr	r0, [pc, #32]	; (80005f8 <nrf24_ReadReg+0x3c>)
 80005d6:	f002 fdc0 	bl	800315a <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 80005da:	f107 010f 	add.w	r1, r7, #15
 80005de:	2364      	movs	r3, #100	; 0x64
 80005e0:	2201      	movs	r2, #1
 80005e2:	4805      	ldr	r0, [pc, #20]	; (80005f8 <nrf24_ReadReg+0x3c>)
 80005e4:	f002 fef5 	bl	80033d2 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80005e8:	f7ff ff7c 	bl	80004e4 <CS_UnSelect>

	return data;
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	200000b4 	.word	0x200000b4

080005fc <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000606:	f7ff ff61 	bl	80004cc <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 800060a:	1df9      	adds	r1, r7, #7
 800060c:	2364      	movs	r3, #100	; 0x64
 800060e:	2201      	movs	r2, #1
 8000610:	4804      	ldr	r0, [pc, #16]	; (8000624 <nrfsendCmd+0x28>)
 8000612:	f002 fda2 	bl	800315a <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000616:	f7ff ff65 	bl	80004e4 <CS_UnSelect>
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200000b4 	.word	0x200000b4

08000628 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b07      	cmp	r3, #7
 8000636:	d104      	bne.n	8000642 <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000638:	2100      	movs	r1, #0
 800063a:	2007      	movs	r0, #7
 800063c:	f7ff ff76 	bl	800052c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000640:	e090      	b.n	8000764 <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b17      	cmp	r3, #23
 8000646:	d104      	bne.n	8000652 <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000648:	2111      	movs	r1, #17
 800064a:	2017      	movs	r0, #23
 800064c:	f7ff ff6e 	bl	800052c <nrf24_WriteReg>
}
 8000650:	e088      	b.n	8000764 <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 8000652:	2108      	movs	r1, #8
 8000654:	2000      	movs	r0, #0
 8000656:	f7ff ff69 	bl	800052c <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 800065a:	213f      	movs	r1, #63	; 0x3f
 800065c:	2001      	movs	r0, #1
 800065e:	f7ff ff65 	bl	800052c <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 8000662:	2103      	movs	r1, #3
 8000664:	2002      	movs	r0, #2
 8000666:	f7ff ff61 	bl	800052c <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 800066a:	2103      	movs	r1, #3
 800066c:	2003      	movs	r0, #3
 800066e:	f7ff ff5d 	bl	800052c <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 8000672:	2103      	movs	r1, #3
 8000674:	2004      	movs	r0, #4
 8000676:	f7ff ff59 	bl	800052c <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 800067a:	2102      	movs	r1, #2
 800067c:	2005      	movs	r0, #5
 800067e:	f7ff ff55 	bl	800052c <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 8000682:	210e      	movs	r1, #14
 8000684:	2006      	movs	r0, #6
 8000686:	f7ff ff51 	bl	800052c <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 800068a:	2100      	movs	r1, #0
 800068c:	2007      	movs	r0, #7
 800068e:	f7ff ff4d 	bl	800052c <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000692:	2100      	movs	r1, #0
 8000694:	2008      	movs	r0, #8
 8000696:	f7ff ff49 	bl	800052c <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 800069a:	2100      	movs	r1, #0
 800069c:	2009      	movs	r0, #9
 800069e:	f7ff ff45 	bl	800052c <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80006a2:	4a32      	ldr	r2, [pc, #200]	; (800076c <nrf24_reset+0x144>)
 80006a4:	f107 0318 	add.w	r3, r7, #24
 80006a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ac:	6018      	str	r0, [r3, #0]
 80006ae:	3304      	adds	r3, #4
 80006b0:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 80006b2:	f107 0318 	add.w	r3, r7, #24
 80006b6:	2205      	movs	r2, #5
 80006b8:	4619      	mov	r1, r3
 80006ba:	200a      	movs	r0, #10
 80006bc:	f7ff ff58 	bl	8000570 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 80006c0:	4a2b      	ldr	r2, [pc, #172]	; (8000770 <nrf24_reset+0x148>)
 80006c2:	f107 0310 	add.w	r3, r7, #16
 80006c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ca:	6018      	str	r0, [r3, #0]
 80006cc:	3304      	adds	r3, #4
 80006ce:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	2205      	movs	r2, #5
 80006d6:	4619      	mov	r1, r3
 80006d8:	200b      	movs	r0, #11
 80006da:	f7ff ff49 	bl	8000570 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 80006de:	21c3      	movs	r1, #195	; 0xc3
 80006e0:	200c      	movs	r0, #12
 80006e2:	f7ff ff23 	bl	800052c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80006e6:	21c4      	movs	r1, #196	; 0xc4
 80006e8:	200d      	movs	r0, #13
 80006ea:	f7ff ff1f 	bl	800052c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80006ee:	21c5      	movs	r1, #197	; 0xc5
 80006f0:	200e      	movs	r0, #14
 80006f2:	f7ff ff1b 	bl	800052c <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80006f6:	21c6      	movs	r1, #198	; 0xc6
 80006f8:	200f      	movs	r0, #15
 80006fa:	f7ff ff17 	bl	800052c <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80006fe:	4a1b      	ldr	r2, [pc, #108]	; (800076c <nrf24_reset+0x144>)
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000708:	6018      	str	r0, [r3, #0]
 800070a:	3304      	adds	r3, #4
 800070c:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	2205      	movs	r2, #5
 8000714:	4619      	mov	r1, r3
 8000716:	2010      	movs	r0, #16
 8000718:	f7ff ff2a 	bl	8000570 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 800071c:	2100      	movs	r1, #0
 800071e:	2011      	movs	r0, #17
 8000720:	f7ff ff04 	bl	800052c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 8000724:	2100      	movs	r1, #0
 8000726:	2012      	movs	r0, #18
 8000728:	f7ff ff00 	bl	800052c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 800072c:	2100      	movs	r1, #0
 800072e:	2013      	movs	r0, #19
 8000730:	f7ff fefc 	bl	800052c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 8000734:	2100      	movs	r1, #0
 8000736:	2014      	movs	r0, #20
 8000738:	f7ff fef8 	bl	800052c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 800073c:	2100      	movs	r1, #0
 800073e:	2015      	movs	r0, #21
 8000740:	f7ff fef4 	bl	800052c <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 8000744:	2100      	movs	r1, #0
 8000746:	2016      	movs	r0, #22
 8000748:	f7ff fef0 	bl	800052c <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 800074c:	2111      	movs	r1, #17
 800074e:	2017      	movs	r0, #23
 8000750:	f7ff feec 	bl	800052c <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 8000754:	2100      	movs	r1, #0
 8000756:	201c      	movs	r0, #28
 8000758:	f7ff fee8 	bl	800052c <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 800075c:	2100      	movs	r1, #0
 800075e:	201d      	movs	r0, #29
 8000760:	f7ff fee4 	bl	800052c <nrf24_WriteReg>
}
 8000764:	bf00      	nop
 8000766:	3720      	adds	r7, #32
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	08007e40 	.word	0x08007e40
 8000770:	08007e48 	.word	0x08007e48

08000774 <NRF24_Init>:




void NRF24_Init (void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 8000778:	f7ff fecc 	bl	8000514 <CE_Disable>


	// reset everything
	nrf24_reset (0);
 800077c:	2000      	movs	r0, #0
 800077e:	f7ff ff53 	bl	8000628 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 8000782:	2100      	movs	r1, #0
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff fed1 	bl	800052c <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 800078a:	2100      	movs	r1, #0
 800078c:	2001      	movs	r0, #1
 800078e:	f7ff fecd 	bl	800052c <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 8000792:	2100      	movs	r1, #0
 8000794:	2002      	movs	r0, #2
 8000796:	f7ff fec9 	bl	800052c <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 800079a:	2103      	movs	r1, #3
 800079c:	2003      	movs	r0, #3
 800079e:	f7ff fec5 	bl	800052c <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 80007a2:	2100      	movs	r1, #0
 80007a4:	2004      	movs	r0, #4
 80007a6:	f7ff fec1 	bl	800052c <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 80007aa:	2100      	movs	r1, #0
 80007ac:	2005      	movs	r0, #5
 80007ae:	f7ff febd 	bl	800052c <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 80007b2:	210e      	movs	r1, #14
 80007b4:	2006      	movs	r0, #6
 80007b6:	f7ff feb9 	bl	800052c <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 80007ba:	f7ff fe9f 	bl	80004fc <CE_Enable>

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <NRF24_TxMode>:


// set up the Tx mode

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b084      	sub	sp, #16
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
 80007ca:	460b      	mov	r3, r1
 80007cc:	70fb      	strb	r3, [r7, #3]
	// disable the chip before configuring the device
	CE_Disable();
 80007ce:	f7ff fea1 	bl	8000514 <CE_Disable>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 80007d2:	78fb      	ldrb	r3, [r7, #3]
 80007d4:	4619      	mov	r1, r3
 80007d6:	2005      	movs	r0, #5
 80007d8:	f7ff fea8 	bl	800052c <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);  // Write the TX address
 80007dc:	2205      	movs	r2, #5
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	2010      	movs	r0, #16
 80007e2:	f7ff fec5 	bl	8000570 <nrf24_WriteRegMulti>


	// power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 80007e6:	2000      	movs	r0, #0
 80007e8:	f7ff fee8 	bl	80005bc <nrf24_ReadReg>
 80007ec:	4603      	mov	r3, r0
 80007ee:	73fb      	strb	r3, [r7, #15]
	config = config | (1<<1);   // write 1 in the PWR_UP bit
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	f043 0302 	orr.w	r3, r3, #2
 80007f6:	73fb      	strb	r3, [r7, #15]
	//config = config & (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
	nrf24_WriteReg (CONFIG, config);
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	4619      	mov	r1, r3
 80007fc:	2000      	movs	r0, #0
 80007fe:	f7ff fe95 	bl	800052c <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000802:	f7ff fe7b 	bl	80004fc <CE_Enable>
}
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
	...

08000810 <NRF24_Transmit>:


// transmit the data

uint8_t NRF24_Transmit (uint8_t *data)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	73bb      	strb	r3, [r7, #14]

	// select the device
	CS_Select();
 800081c:	f7ff fe56 	bl	80004cc <CS_Select>

	// payload command
	cmdtosend = W_TX_PAYLOAD;
 8000820:	23a0      	movs	r3, #160	; 0xa0
 8000822:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 8000824:	f107 010e 	add.w	r1, r7, #14
 8000828:	2364      	movs	r3, #100	; 0x64
 800082a:	2201      	movs	r2, #1
 800082c:	4816      	ldr	r0, [pc, #88]	; (8000888 <NRF24_Transmit+0x78>)
 800082e:	f002 fc94 	bl	800315a <HAL_SPI_Transmit>

	// send the payload
	HAL_SPI_Transmit(NRF24_SPI, data, 32, 1000);
 8000832:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000836:	2220      	movs	r2, #32
 8000838:	6879      	ldr	r1, [r7, #4]
 800083a:	4813      	ldr	r0, [pc, #76]	; (8000888 <NRF24_Transmit+0x78>)
 800083c:	f002 fc8d 	bl	800315a <HAL_SPI_Transmit>

	// Unselect the device
	CS_UnSelect();
 8000840:	f7ff fe50 	bl	80004e4 <CS_UnSelect>

	HAL_Delay(1);
 8000844:	2001      	movs	r0, #1
 8000846:	f000 fc89 	bl	800115c <HAL_Delay>

	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 800084a:	2017      	movs	r0, #23
 800084c:	f7ff feb6 	bl	80005bc <nrf24_ReadReg>
 8000850:	4603      	mov	r3, r0
 8000852:	73fb      	strb	r3, [r7, #15]

	// check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	f003 0310 	and.w	r3, r3, #16
 800085a:	2b00      	cmp	r3, #0
 800085c:	d00f      	beq.n	800087e <NRF24_Transmit+0x6e>
 800085e:	7bfb      	ldrb	r3, [r7, #15]
 8000860:	f003 0308 	and.w	r3, r3, #8
 8000864:	2b00      	cmp	r3, #0
 8000866:	d10a      	bne.n	800087e <NRF24_Transmit+0x6e>
	{
		cmdtosend = FLUSH_TX;
 8000868:	23e1      	movs	r3, #225	; 0xe1
 800086a:	73bb      	strb	r3, [r7, #14]
		nrfsendCmd(cmdtosend);
 800086c:	7bbb      	ldrb	r3, [r7, #14]
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff fec4 	bl	80005fc <nrfsendCmd>

		// reset FIFO_STATUS
		nrf24_reset (FIFO_STATUS);
 8000874:	2017      	movs	r0, #23
 8000876:	f7ff fed7 	bl	8000628 <nrf24_reset>

		return 1;
 800087a:	2301      	movs	r3, #1
 800087c:	e000      	b.n	8000880 <NRF24_Transmit+0x70>
	}

	return 0;
 800087e:	2300      	movs	r3, #0
}
 8000880:	4618      	mov	r0, r3
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200000b4 	.word	0x200000b4

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b5b0      	push	{r4, r5, r7, lr}
 800088e:	f5ad 6da3 	sub.w	sp, sp, #1304	; 0x518
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000894:	f000 fbf0 	bl	8001078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000898:	f000 f8ea 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089c:	f000 f9d2 	bl	8000c44 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 80008a0:	f000 f950 	bl	8000b44 <MX_SDIO_SD_Init>
  MX_USART1_UART_Init();
 80008a4:	f000 f9a4 	bl	8000bf0 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80008a8:	f004 fe00 	bl	80054ac <MX_FATFS_Init>
  MX_SPI1_Init();
 80008ac:	f000 f96a 	bl	8000b84 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  NRF24_Init();
 80008b0:	f7ff ff60 	bl	8000774 <NRF24_Init>
  NRF24_TxMode(TxAddress, 10);
 80008b4:	210a      	movs	r1, #10
 80008b6:	4863      	ldr	r0, [pc, #396]	; (8000a44 <main+0x1b8>)
 80008b8:	f7ff ff83 	bl	80007c2 <NRF24_TxMode>

  FATFS myFATFS;
  FRESULT sd_status;
  FIL myfile;
  UINT fileLength;
  sd_status = f_mount(&myFATFS, SDPath, 1);
 80008bc:	f507 7339 	add.w	r3, r7, #740	; 0x2e4
 80008c0:	2201      	movs	r2, #1
 80008c2:	4961      	ldr	r1, [pc, #388]	; (8000a48 <main+0x1bc>)
 80008c4:	4618      	mov	r0, r3
 80008c6:	f006 fcc7 	bl	8007258 <f_mount>
 80008ca:	4603      	mov	r3, r0
 80008cc:	f887 3517 	strb.w	r3, [r7, #1303]	; 0x517

  uint8_t readFile[32];


  if( sd_status == FR_OK)
 80008d0:	f897 3517 	ldrb.w	r3, [r7, #1303]	; 0x517
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d167      	bne.n	80009a8 <main+0x11c>
  {
	  uint8_t message[]= "SD CARD MOUNTED\n";
 80008d8:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 80008dc:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 80008e0:	4a5a      	ldr	r2, [pc, #360]	; (8000a4c <main+0x1c0>)
 80008e2:	461c      	mov	r4, r3
 80008e4:	4615      	mov	r5, r2
 80008e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ea:	682b      	ldr	r3, [r5, #0]
 80008ec:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit_IT(&huart1, message, sizeof(message));
 80008ee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008f2:	2211      	movs	r2, #17
 80008f4:	4619      	mov	r1, r3
 80008f6:	4856      	ldr	r0, [pc, #344]	; (8000a50 <main+0x1c4>)
 80008f8:	f003 f99b 	bl	8003c32 <HAL_UART_Transmit_IT>
	  char myFilePath[] = "NEWFILE.TXT\0";
 80008fc:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8000900:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8000904:	4a53      	ldr	r2, [pc, #332]	; (8000a54 <main+0x1c8>)
 8000906:	461c      	mov	r4, r3
 8000908:	4613      	mov	r3, r2
 800090a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800090c:	c407      	stmia	r4!, {r0, r1, r2}
 800090e:	7023      	strb	r3, [r4, #0]
	  f_open(&myfile, myFilePath, FA_WRITE|FA_CREATE_ALWAYS);
 8000910:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8000914:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000918:	220a      	movs	r2, #10
 800091a:	4618      	mov	r0, r3
 800091c:	f006 fce2 	bl	80072e4 <f_open>
	  char fileData[] = "***Hello Sandesh***\n";
 8000920:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8000924:	f2a3 43c4 	subw	r3, r3, #1220	; 0x4c4
 8000928:	4a4b      	ldr	r2, [pc, #300]	; (8000a58 <main+0x1cc>)
 800092a:	461c      	mov	r4, r3
 800092c:	4615      	mov	r5, r2
 800092e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000932:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000936:	6020      	str	r0, [r4, #0]
 8000938:	3404      	adds	r4, #4
 800093a:	7021      	strb	r1, [r4, #0]
	  f_write(&myfile, fileData, sizeof(fileData), &fileLength);
 800093c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000940:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8000944:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 8000948:	2215      	movs	r2, #21
 800094a:	f006 ffc8 	bl	80078de <f_write>
	  f_close(&myfile);
 800094e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000952:	4618      	mov	r0, r3
 8000954:	f007 f9b6 	bl	8007cc4 <f_close>

	  //Read file
	  char myReadFilePath[] = "READFILE.TXT\0";
 8000958:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 800095c:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8000960:	4a3e      	ldr	r2, [pc, #248]	; (8000a5c <main+0x1d0>)
 8000962:	461c      	mov	r4, r3
 8000964:	4613      	mov	r3, r2
 8000966:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000968:	c407      	stmia	r4!, {r0, r1, r2}
 800096a:	8023      	strh	r3, [r4, #0]
	  f_open(&myfile, myReadFilePath, FA_READ|FA_OPEN_ALWAYS);
 800096c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000970:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000974:	2211      	movs	r2, #17
 8000976:	4618      	mov	r0, r3
 8000978:	f006 fcb4 	bl	80072e4 <f_open>
	  f_read(&myfile,readFile,32,&fileLength );
 800097c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000980:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8000984:	f107 00b4 	add.w	r0, r7, #180	; 0xb4
 8000988:	2220      	movs	r2, #32
 800098a:	f006 fe69 	bl	8007660 <f_read>
	  f_close(&myfile);
 800098e:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000992:	4618      	mov	r0, r3
 8000994:	f007 f996 	bl	8007cc4 <f_close>

	  //Transmit read file on UART
	  HAL_UART_Transmit_IT(&huart1, (uint8_t *)readFile, sizeof(readFile));
 8000998:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800099c:	2220      	movs	r2, #32
 800099e:	4619      	mov	r1, r3
 80009a0:	482b      	ldr	r0, [pc, #172]	; (8000a50 <main+0x1c4>)
 80009a2:	f003 f946 	bl	8003c32 <HAL_UART_Transmit_IT>
 80009a6:	e010      	b.n	80009ca <main+0x13e>
  }

  else
  {
	  //uint8_t value = (uint8_t) sd_status;
	  uint8_t message[]= "Mounting Error\n";
 80009a8:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 80009ac:	f2a3 43e4 	subw	r3, r3, #1252	; 0x4e4
 80009b0:	4a2b      	ldr	r2, [pc, #172]	; (8000a60 <main+0x1d4>)
 80009b2:	461c      	mov	r4, r3
 80009b4:	4613      	mov	r3, r2
 80009b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  HAL_UART_Transmit_IT(&huart1, message, sizeof(message));
 80009bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80009c0:	2210      	movs	r2, #16
 80009c2:	4619      	mov	r1, r3
 80009c4:	4822      	ldr	r0, [pc, #136]	; (8000a50 <main+0x1c4>)
 80009c6:	f003 f934 	bl	8003c32 <HAL_UART_Transmit_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //if (NRF24_Transmit(TxData) == 1)
	  if (NRF24_Transmit(readFile) == 1)
 80009ca:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff ff1e 	bl	8000810 <NRF24_Transmit>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d117      	bne.n	8000a0a <main+0x17e>
	  {
		  uint8_t message[]= "Wifi Transmit Successful\n";
 80009da:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 80009de:	f5a3 63a0 	sub.w	r3, r3, #1280	; 0x500
 80009e2:	4a20      	ldr	r2, [pc, #128]	; (8000a64 <main+0x1d8>)
 80009e4:	461c      	mov	r4, r3
 80009e6:	4615      	mov	r5, r2
 80009e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009f0:	c403      	stmia	r4!, {r0, r1}
 80009f2:	8022      	strh	r2, [r4, #0]
		  transmit_status=1;
 80009f4:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <main+0x1dc>)
 80009f6:	2201      	movs	r2, #1
 80009f8:	701a      	strb	r2, [r3, #0]
		  HAL_UART_Transmit_IT(&huart1, message, sizeof(message));
 80009fa:	f107 0318 	add.w	r3, r7, #24
 80009fe:	221a      	movs	r2, #26
 8000a00:	4619      	mov	r1, r3
 8000a02:	4813      	ldr	r0, [pc, #76]	; (8000a50 <main+0x1c4>)
 8000a04:	f003 f915 	bl	8003c32 <HAL_UART_Transmit_IT>
 8000a08:	e016      	b.n	8000a38 <main+0x1ac>
	  }
	  else
	  {
		  uint8_t message[]= "Wifi Transmit Error\n";
 8000a0a:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8000a0e:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8000a12:	4a16      	ldr	r2, [pc, #88]	; (8000a6c <main+0x1e0>)
 8000a14:	461c      	mov	r4, r3
 8000a16:	4615      	mov	r5, r2
 8000a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a1c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a20:	6020      	str	r0, [r4, #0]
 8000a22:	3404      	adds	r4, #4
 8000a24:	7021      	strb	r1, [r4, #0]
		  HAL_UART_Transmit_IT(&huart1, message, sizeof(message));
 8000a26:	463b      	mov	r3, r7
 8000a28:	2215      	movs	r2, #21
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4808      	ldr	r0, [pc, #32]	; (8000a50 <main+0x1c4>)
 8000a2e:	f003 f900 	bl	8003c32 <HAL_UART_Transmit_IT>
		  transmit_status=0;
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <main+0x1dc>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	701a      	strb	r2, [r3, #0]
	  }

	  HAL_Delay(1000);
 8000a38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a3c:	f000 fb8e 	bl	800115c <HAL_Delay>
	  if (NRF24_Transmit(readFile) == 1)
 8000a40:	e7c3      	b.n	80009ca <main+0x13e>
 8000a42:	bf00      	nop
 8000a44:	20000000 	.word	0x20000000
 8000a48:	2000015c 	.word	0x2000015c
 8000a4c:	08007e50 	.word	0x08007e50
 8000a50:	2000010c 	.word	0x2000010c
 8000a54:	08007e64 	.word	0x08007e64
 8000a58:	08007e74 	.word	0x08007e74
 8000a5c:	08007e8c 	.word	0x08007e8c
 8000a60:	08007e9c 	.word	0x08007e9c
 8000a64:	08007eac 	.word	0x08007eac
 8000a68:	20000150 	.word	0x20000150
 8000a6c:	08007ec8 	.word	0x08007ec8

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b094      	sub	sp, #80	; 0x50
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0320 	add.w	r3, r7, #32
 8000a7a:	2230      	movs	r2, #48	; 0x30
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f007 f9ca 	bl	8007e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	4b28      	ldr	r3, [pc, #160]	; (8000b3c <SystemClock_Config+0xcc>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	4a27      	ldr	r2, [pc, #156]	; (8000b3c <SystemClock_Config+0xcc>)
 8000a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa4:	4b25      	ldr	r3, [pc, #148]	; (8000b3c <SystemClock_Config+0xcc>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <SystemClock_Config+0xd0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a21      	ldr	r2, [pc, #132]	; (8000b40 <SystemClock_Config+0xd0>)
 8000aba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <SystemClock_Config+0xd0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000acc:	2302      	movs	r3, #2
 8000ace:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ad4:	2310      	movs	r3, #16
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000adc:	2300      	movs	r3, #0
 8000ade:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ae0:	2308      	movs	r3, #8
 8000ae2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ae4:	23a8      	movs	r3, #168	; 0xa8
 8000ae6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000aec:	2307      	movs	r3, #7
 8000aee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af0:	f107 0320 	add.w	r3, r7, #32
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 fec7 	bl	8001888 <HAL_RCC_OscConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b00:	f000 f91c 	bl	8000d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b04:	230f      	movs	r3, #15
 8000b06:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	2105      	movs	r1, #5
 8000b22:	4618      	mov	r0, r3
 8000b24:	f001 f928 	bl	8001d78 <HAL_RCC_ClockConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b2e:	f000 f905 	bl	8000d3c <Error_Handler>
  }
}
 8000b32:	bf00      	nop
 8000b34:	3750      	adds	r7, #80	; 0x50
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40007000 	.word	0x40007000

08000b44 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MX_SDIO_SD_Init+0x38>)
 8000b4a:	4a0d      	ldr	r2, [pc, #52]	; (8000b80 <MX_SDIO_SD_Init+0x3c>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <MX_SDIO_SD_Init+0x38>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_SDIO_SD_Init+0x38>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <MX_SDIO_SD_Init+0x38>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_SDIO_SD_Init+0x38>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b66:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <MX_SDIO_SD_Init+0x38>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <MX_SDIO_SD_Init+0x38>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	20000030 	.word	0x20000030
 8000b80:	40012c00 	.word	0x40012c00

08000b84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000b8a:	4a18      	ldr	r2, [pc, #96]	; (8000bec <MX_SPI1_Init+0x68>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000b90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bb8:	2218      	movs	r2, #24
 8000bba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bd0:	220a      	movs	r2, #10
 8000bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bd6:	f002 fa37 	bl	8003048 <HAL_SPI_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000be0:	f000 f8ac 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	200000b4 	.word	0x200000b4
 8000bec:	40013000 	.word	0x40013000

08000bf0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_USART1_UART_Init+0x4c>)
 8000bf6:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <MX_USART1_UART_Init+0x50>)
 8000bf8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <MX_USART1_UART_Init+0x4c>)
 8000bfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_USART1_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_USART1_UART_Init+0x4c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <MX_USART1_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_USART1_UART_Init+0x4c>)
 8000c16:	220c      	movs	r2, #12
 8000c18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <MX_USART1_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_USART1_UART_Init+0x4c>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_USART1_UART_Init+0x4c>)
 8000c28:	f002 ffb6 	bl	8003b98 <HAL_UART_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c32:	f000 f883 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000010c 	.word	0x2000010c
 8000c40:	40011000 	.word	0x40011000

08000c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
 8000c56:	60da      	str	r2, [r3, #12]
 8000c58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	4b34      	ldr	r3, [pc, #208]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a33      	ldr	r2, [pc, #204]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c64:	f043 0308 	orr.w	r3, r3, #8
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b31      	ldr	r3, [pc, #196]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0308 	and.w	r3, r3, #8
 8000c72:	613b      	str	r3, [r7, #16]
 8000c74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
 8000c7a:	4b2d      	ldr	r3, [pc, #180]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a2c      	ldr	r2, [pc, #176]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c80:	f043 0304 	orr.w	r3, r3, #4
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b2a      	ldr	r3, [pc, #168]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0304 	and.w	r3, r3, #4
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a25      	ldr	r2, [pc, #148]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4b1f      	ldr	r3, [pc, #124]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a1e      	ldr	r2, [pc, #120]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <MX_GPIO_Init+0xec>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0302 	and.w	r3, r3, #2
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	21c0      	movs	r1, #192	; 0xc0
 8000cce:	4819      	ldr	r0, [pc, #100]	; (8000d34 <MX_GPIO_Init+0xf0>)
 8000cd0:	f000 fdc0 	bl	8001854 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4813      	ldr	r0, [pc, #76]	; (8000d38 <MX_GPIO_Init+0xf4>)
 8000cea:	f000 fbff 	bl	80014ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cee:	23c0      	movs	r3, #192	; 0xc0
 8000cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	480b      	ldr	r0, [pc, #44]	; (8000d34 <MX_GPIO_Init+0xf0>)
 8000d06:	f000 fbf1 	bl	80014ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d10:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4804      	ldr	r0, [pc, #16]	; (8000d34 <MX_GPIO_Init+0xf0>)
 8000d22:	f000 fbe3 	bl	80014ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d26:	bf00      	nop
 8000d28:	3728      	adds	r7, #40	; 0x28
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020400 	.word	0x40020400
 8000d38:	40020c00 	.word	0x40020c00

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <Error_Handler+0x8>
	...

08000d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	4a0f      	ldr	r2, [pc, #60]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	603b      	str	r3, [r7, #0]
 8000d6e:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d78:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_MspInit+0x4c>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d82:	603b      	str	r3, [r7, #0]
 8000d84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	40023800 	.word	0x40023800

08000d98 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a28      	ldr	r2, [pc, #160]	; (8000e58 <HAL_SD_MspInit+0xc0>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d14a      	bne.n	8000e50 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	4b27      	ldr	r3, [pc, #156]	; (8000e5c <HAL_SD_MspInit+0xc4>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	4a26      	ldr	r2, [pc, #152]	; (8000e5c <HAL_SD_MspInit+0xc4>)
 8000dc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dca:	4b24      	ldr	r3, [pc, #144]	; (8000e5c <HAL_SD_MspInit+0xc4>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b20      	ldr	r3, [pc, #128]	; (8000e5c <HAL_SD_MspInit+0xc4>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a1f      	ldr	r2, [pc, #124]	; (8000e5c <HAL_SD_MspInit+0xc4>)
 8000de0:	f043 0304 	orr.w	r3, r3, #4
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <HAL_SD_MspInit+0xc4>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <HAL_SD_MspInit+0xc4>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a18      	ldr	r2, [pc, #96]	; (8000e5c <HAL_SD_MspInit+0xc4>)
 8000dfc:	f043 0308 	orr.w	r3, r3, #8
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <HAL_SD_MspInit+0xc4>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0308 	and.w	r3, r3, #8
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8000e0e:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e14:	2302      	movs	r3, #2
 8000e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e20:	230c      	movs	r3, #12
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480d      	ldr	r0, [pc, #52]	; (8000e60 <HAL_SD_MspInit+0xc8>)
 8000e2c:	f000 fb5e 	bl	80014ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e30:	2304      	movs	r3, #4
 8000e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e40:	230c      	movs	r3, #12
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4806      	ldr	r0, [pc, #24]	; (8000e64 <HAL_SD_MspInit+0xcc>)
 8000e4c:	f000 fb4e 	bl	80014ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000e50:	bf00      	nop
 8000e52:	3728      	adds	r7, #40	; 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40012c00 	.word	0x40012c00
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40020800 	.word	0x40020800
 8000e64:	40020c00 	.word	0x40020c00

08000e68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a19      	ldr	r2, [pc, #100]	; (8000eec <HAL_SPI_MspInit+0x84>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d12b      	bne.n	8000ee2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <HAL_SPI_MspInit+0x88>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	4a17      	ldr	r2, [pc, #92]	; (8000ef0 <HAL_SPI_MspInit+0x88>)
 8000e94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e98:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <HAL_SPI_MspInit+0x88>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <HAL_SPI_MspInit+0x88>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a10      	ldr	r2, [pc, #64]	; (8000ef0 <HAL_SPI_MspInit+0x88>)
 8000eb0:	f043 0302 	orr.w	r3, r3, #2
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <HAL_SPI_MspInit+0x88>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0302 	and.w	r3, r3, #2
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000ec2:	2338      	movs	r3, #56	; 0x38
 8000ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <HAL_SPI_MspInit+0x8c>)
 8000ede:	f000 fb05 	bl	80014ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ee2:	bf00      	nop
 8000ee4:	3728      	adds	r7, #40	; 0x28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40013000 	.word	0x40013000
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020400 	.word	0x40020400

08000ef8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08a      	sub	sp, #40	; 0x28
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a1d      	ldr	r2, [pc, #116]	; (8000f8c <HAL_UART_MspInit+0x94>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d134      	bne.n	8000f84 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <HAL_UART_MspInit+0x98>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	4a1b      	ldr	r2, [pc, #108]	; (8000f90 <HAL_UART_MspInit+0x98>)
 8000f24:	f043 0310 	orr.w	r3, r3, #16
 8000f28:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2a:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <HAL_UART_MspInit+0x98>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	f003 0310 	and.w	r3, r3, #16
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <HAL_UART_MspInit+0x98>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a14      	ldr	r2, [pc, #80]	; (8000f90 <HAL_UART_MspInit+0x98>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_UART_MspInit+0x98>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f52:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f60:	2303      	movs	r3, #3
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f64:	2307      	movs	r3, #7
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4809      	ldr	r0, [pc, #36]	; (8000f94 <HAL_UART_MspInit+0x9c>)
 8000f70:	f000 fabc 	bl	80014ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2100      	movs	r1, #0
 8000f78:	2025      	movs	r0, #37	; 0x25
 8000f7a:	f000 f9ee 	bl	800135a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f7e:	2025      	movs	r0, #37	; 0x25
 8000f80:	f000 fa07 	bl	8001392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f84:	bf00      	nop
 8000f86:	3728      	adds	r7, #40	; 0x28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40011000 	.word	0x40011000
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020000 	.word	0x40020000

08000f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <NMI_Handler+0x4>

08000f9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fa2:	e7fe      	b.n	8000fa2 <HardFault_Handler+0x4>

08000fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <MemManage_Handler+0x4>

08000faa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fae:	e7fe      	b.n	8000fae <BusFault_Handler+0x4>

08000fb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fb4:	e7fe      	b.n	8000fb4 <UsageFault_Handler+0x4>

08000fb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe4:	f000 f89a 	bl	800111c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}

08000fec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <USART1_IRQHandler+0x10>)
 8000ff2:	f002 fe63 	bl	8003cbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	2000010c 	.word	0x2000010c

08001000 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <SystemInit+0x20>)
 8001006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <SystemInit+0x20>)
 800100c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800105c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001028:	480d      	ldr	r0, [pc, #52]	; (8001060 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800102a:	490e      	ldr	r1, [pc, #56]	; (8001064 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800102c:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800102e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001040:	4c0b      	ldr	r4, [pc, #44]	; (8001070 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800104e:	f7ff ffd7 	bl	8001000 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001052:	f006 febd 	bl	8007dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001056:	f7ff fc19 	bl	800088c <main>
  bx  lr    
 800105a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800105c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001064:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001068:	08007fe0 	.word	0x08007fe0
  ldr r2, =_sbss
 800106c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001070:	20000194 	.word	0x20000194

08001074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC_IRQHandler>
	...

08001078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <HAL_Init+0x40>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0d      	ldr	r2, [pc, #52]	; (80010b8 <HAL_Init+0x40>)
 8001082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001086:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <HAL_Init+0x40>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <HAL_Init+0x40>)
 800108e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001092:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <HAL_Init+0x40>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a07      	ldr	r2, [pc, #28]	; (80010b8 <HAL_Init+0x40>)
 800109a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a0:	2003      	movs	r0, #3
 80010a2:	f000 f94f 	bl	8001344 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a6:	200f      	movs	r0, #15
 80010a8:	f000 f808 	bl	80010bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ac:	f7ff fe4c 	bl	8000d48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023c00 	.word	0x40023c00

080010bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <HAL_InitTick+0x54>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_InitTick+0x58>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4619      	mov	r1, r3
 80010ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f967 	bl	80013ae <HAL_SYSTICK_Config>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00e      	b.n	8001108 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d80a      	bhi.n	8001106 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f0:	2200      	movs	r2, #0
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f000 f92f 	bl	800135a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010fc:	4a06      	ldr	r2, [pc, #24]	; (8001118 <HAL_InitTick+0x5c>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001102:	2300      	movs	r3, #0
 8001104:	e000      	b.n	8001108 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000008 	.word	0x20000008
 8001114:	20000010 	.word	0x20000010
 8001118:	2000000c 	.word	0x2000000c

0800111c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_IncTick+0x20>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_IncTick+0x24>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4413      	add	r3, r2
 800112c:	4a04      	ldr	r2, [pc, #16]	; (8001140 <HAL_IncTick+0x24>)
 800112e:	6013      	str	r3, [r2, #0]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000010 	.word	0x20000010
 8001140:	20000154 	.word	0x20000154

08001144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return uwTick;
 8001148:	4b03      	ldr	r3, [pc, #12]	; (8001158 <HAL_GetTick+0x14>)
 800114a:	681b      	ldr	r3, [r3, #0]
}
 800114c:	4618      	mov	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	20000154 	.word	0x20000154

0800115c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001164:	f7ff ffee 	bl	8001144 <HAL_GetTick>
 8001168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001174:	d005      	beq.n	8001182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001176:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <HAL_Delay+0x44>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4413      	add	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001182:	bf00      	nop
 8001184:	f7ff ffde 	bl	8001144 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	429a      	cmp	r2, r3
 8001192:	d8f7      	bhi.n	8001184 <HAL_Delay+0x28>
  {
  }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000010 	.word	0x20000010

080011a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <__NVIC_SetPriorityGrouping+0x44>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011c0:	4013      	ands	r3, r2
 80011c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011d6:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <__NVIC_SetPriorityGrouping+0x44>)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	60d3      	str	r3, [r2, #12]
}
 80011dc:	bf00      	nop
 80011de:	3714      	adds	r7, #20
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <__NVIC_GetPriorityGrouping+0x18>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	0a1b      	lsrs	r3, r3, #8
 80011f6:	f003 0307 	and.w	r3, r3, #7
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	2b00      	cmp	r3, #0
 8001218:	db0b      	blt.n	8001232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	f003 021f 	and.w	r2, r3, #31
 8001220:	4907      	ldr	r1, [pc, #28]	; (8001240 <__NVIC_EnableIRQ+0x38>)
 8001222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001226:	095b      	lsrs	r3, r3, #5
 8001228:	2001      	movs	r0, #1
 800122a:	fa00 f202 	lsl.w	r2, r0, r2
 800122e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000e100 	.word	0xe000e100

08001244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001254:	2b00      	cmp	r3, #0
 8001256:	db0a      	blt.n	800126e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	b2da      	uxtb	r2, r3
 800125c:	490c      	ldr	r1, [pc, #48]	; (8001290 <__NVIC_SetPriority+0x4c>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	0112      	lsls	r2, r2, #4
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	440b      	add	r3, r1
 8001268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800126c:	e00a      	b.n	8001284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4908      	ldr	r1, [pc, #32]	; (8001294 <__NVIC_SetPriority+0x50>)
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	f003 030f 	and.w	r3, r3, #15
 800127a:	3b04      	subs	r3, #4
 800127c:	0112      	lsls	r2, r2, #4
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	440b      	add	r3, r1
 8001282:	761a      	strb	r2, [r3, #24]
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000e100 	.word	0xe000e100
 8001294:	e000ed00 	.word	0xe000ed00

08001298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001298:	b480      	push	{r7}
 800129a:	b089      	sub	sp, #36	; 0x24
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	f1c3 0307 	rsb	r3, r3, #7
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	bf28      	it	cs
 80012b6:	2304      	movcs	r3, #4
 80012b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3304      	adds	r3, #4
 80012be:	2b06      	cmp	r3, #6
 80012c0:	d902      	bls.n	80012c8 <NVIC_EncodePriority+0x30>
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3b03      	subs	r3, #3
 80012c6:	e000      	b.n	80012ca <NVIC_EncodePriority+0x32>
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012cc:	f04f 32ff 	mov.w	r2, #4294967295
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43da      	mvns	r2, r3
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	401a      	ands	r2, r3
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e0:	f04f 31ff 	mov.w	r1, #4294967295
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ea:	43d9      	mvns	r1, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f0:	4313      	orrs	r3, r2
         );
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3724      	adds	r7, #36	; 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
	...

08001300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3b01      	subs	r3, #1
 800130c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001310:	d301      	bcc.n	8001316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001312:	2301      	movs	r3, #1
 8001314:	e00f      	b.n	8001336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <SysTick_Config+0x40>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3b01      	subs	r3, #1
 800131c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131e:	210f      	movs	r1, #15
 8001320:	f04f 30ff 	mov.w	r0, #4294967295
 8001324:	f7ff ff8e 	bl	8001244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <SysTick_Config+0x40>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132e:	4b04      	ldr	r3, [pc, #16]	; (8001340 <SysTick_Config+0x40>)
 8001330:	2207      	movs	r2, #7
 8001332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	e000e010 	.word	0xe000e010

08001344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff29 	bl	80011a4 <__NVIC_SetPriorityGrouping>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135a:	b580      	push	{r7, lr}
 800135c:	b086      	sub	sp, #24
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	60b9      	str	r1, [r7, #8]
 8001364:	607a      	str	r2, [r7, #4]
 8001366:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800136c:	f7ff ff3e 	bl	80011ec <__NVIC_GetPriorityGrouping>
 8001370:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f7ff ff8e 	bl	8001298 <NVIC_EncodePriority>
 800137c:	4602      	mov	r2, r0
 800137e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff5d 	bl	8001244 <__NVIC_SetPriority>
}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	4603      	mov	r3, r0
 800139a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800139c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff ff31 	bl	8001208 <__NVIC_EnableIRQ>
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	b082      	sub	sp, #8
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff ffa2 	bl	8001300 <SysTick_Config>
 80013bc:	4603      	mov	r3, r0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b084      	sub	sp, #16
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013d4:	f7ff feb6 	bl	8001144 <HAL_GetTick>
 80013d8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d008      	beq.n	80013f8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2280      	movs	r2, #128	; 0x80
 80013ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e052      	b.n	800149e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0216 	bic.w	r2, r2, #22
 8001406:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	695a      	ldr	r2, [r3, #20]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001416:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	2b00      	cmp	r3, #0
 800141e:	d103      	bne.n	8001428 <HAL_DMA_Abort+0x62>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001424:	2b00      	cmp	r3, #0
 8001426:	d007      	beq.n	8001438 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f022 0208 	bic.w	r2, r2, #8
 8001436:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f022 0201 	bic.w	r2, r2, #1
 8001446:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001448:	e013      	b.n	8001472 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800144a:	f7ff fe7b 	bl	8001144 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b05      	cmp	r3, #5
 8001456:	d90c      	bls.n	8001472 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2220      	movs	r2, #32
 800145c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2203      	movs	r2, #3
 8001462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e015      	b.n	800149e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1e4      	bne.n	800144a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001484:	223f      	movs	r2, #63	; 0x3f
 8001486:	409a      	lsls	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d004      	beq.n	80014c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2280      	movs	r2, #128	; 0x80
 80014be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e00c      	b.n	80014de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2205      	movs	r2, #5
 80014c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 0201 	bic.w	r2, r2, #1
 80014da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
	...

080014ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014f6:	2300      	movs	r3, #0
 80014f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014fa:	2300      	movs	r3, #0
 80014fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001502:	2300      	movs	r3, #0
 8001504:	61fb      	str	r3, [r7, #28]
 8001506:	e16b      	b.n	80017e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001508:	2201      	movs	r2, #1
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	429a      	cmp	r2, r3
 8001522:	f040 815a 	bne.w	80017da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 0303 	and.w	r3, r3, #3
 800152e:	2b01      	cmp	r3, #1
 8001530:	d005      	beq.n	800153e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800153a:	2b02      	cmp	r3, #2
 800153c:	d130      	bne.n	80015a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	2203      	movs	r2, #3
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	68da      	ldr	r2, [r3, #12]
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001574:	2201      	movs	r2, #1
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	091b      	lsrs	r3, r3, #4
 800158a:	f003 0201 	and.w	r2, r3, #1
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	d017      	beq.n	80015dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	2203      	movs	r2, #3
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d123      	bne.n	8001630 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	08da      	lsrs	r2, r3, #3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3208      	adds	r2, #8
 80015f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	220f      	movs	r2, #15
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	691a      	ldr	r2, [r3, #16]
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	08da      	lsrs	r2, r3, #3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	3208      	adds	r2, #8
 800162a:	69b9      	ldr	r1, [r7, #24]
 800162c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	2203      	movs	r2, #3
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 0203 	and.w	r2, r3, #3
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 80b4 	beq.w	80017da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b60      	ldr	r3, [pc, #384]	; (80017f8 <HAL_GPIO_Init+0x30c>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	4a5f      	ldr	r2, [pc, #380]	; (80017f8 <HAL_GPIO_Init+0x30c>)
 800167c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001680:	6453      	str	r3, [r2, #68]	; 0x44
 8001682:	4b5d      	ldr	r3, [pc, #372]	; (80017f8 <HAL_GPIO_Init+0x30c>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800168e:	4a5b      	ldr	r2, [pc, #364]	; (80017fc <HAL_GPIO_Init+0x310>)
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	089b      	lsrs	r3, r3, #2
 8001694:	3302      	adds	r3, #2
 8001696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800169a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	f003 0303 	and.w	r3, r3, #3
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	220f      	movs	r2, #15
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4013      	ands	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4a52      	ldr	r2, [pc, #328]	; (8001800 <HAL_GPIO_Init+0x314>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d02b      	beq.n	8001712 <HAL_GPIO_Init+0x226>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a51      	ldr	r2, [pc, #324]	; (8001804 <HAL_GPIO_Init+0x318>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d025      	beq.n	800170e <HAL_GPIO_Init+0x222>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a50      	ldr	r2, [pc, #320]	; (8001808 <HAL_GPIO_Init+0x31c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d01f      	beq.n	800170a <HAL_GPIO_Init+0x21e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a4f      	ldr	r2, [pc, #316]	; (800180c <HAL_GPIO_Init+0x320>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d019      	beq.n	8001706 <HAL_GPIO_Init+0x21a>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a4e      	ldr	r2, [pc, #312]	; (8001810 <HAL_GPIO_Init+0x324>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d013      	beq.n	8001702 <HAL_GPIO_Init+0x216>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a4d      	ldr	r2, [pc, #308]	; (8001814 <HAL_GPIO_Init+0x328>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d00d      	beq.n	80016fe <HAL_GPIO_Init+0x212>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4c      	ldr	r2, [pc, #304]	; (8001818 <HAL_GPIO_Init+0x32c>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d007      	beq.n	80016fa <HAL_GPIO_Init+0x20e>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a4b      	ldr	r2, [pc, #300]	; (800181c <HAL_GPIO_Init+0x330>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d101      	bne.n	80016f6 <HAL_GPIO_Init+0x20a>
 80016f2:	2307      	movs	r3, #7
 80016f4:	e00e      	b.n	8001714 <HAL_GPIO_Init+0x228>
 80016f6:	2308      	movs	r3, #8
 80016f8:	e00c      	b.n	8001714 <HAL_GPIO_Init+0x228>
 80016fa:	2306      	movs	r3, #6
 80016fc:	e00a      	b.n	8001714 <HAL_GPIO_Init+0x228>
 80016fe:	2305      	movs	r3, #5
 8001700:	e008      	b.n	8001714 <HAL_GPIO_Init+0x228>
 8001702:	2304      	movs	r3, #4
 8001704:	e006      	b.n	8001714 <HAL_GPIO_Init+0x228>
 8001706:	2303      	movs	r3, #3
 8001708:	e004      	b.n	8001714 <HAL_GPIO_Init+0x228>
 800170a:	2302      	movs	r3, #2
 800170c:	e002      	b.n	8001714 <HAL_GPIO_Init+0x228>
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <HAL_GPIO_Init+0x228>
 8001712:	2300      	movs	r3, #0
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	f002 0203 	and.w	r2, r2, #3
 800171a:	0092      	lsls	r2, r2, #2
 800171c:	4093      	lsls	r3, r2
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001724:	4935      	ldr	r1, [pc, #212]	; (80017fc <HAL_GPIO_Init+0x310>)
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	089b      	lsrs	r3, r3, #2
 800172a:	3302      	adds	r3, #2
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001732:	4b3b      	ldr	r3, [pc, #236]	; (8001820 <HAL_GPIO_Init+0x334>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	43db      	mvns	r3, r3
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	4013      	ands	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	4313      	orrs	r3, r2
 8001754:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001756:	4a32      	ldr	r2, [pc, #200]	; (8001820 <HAL_GPIO_Init+0x334>)
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800175c:	4b30      	ldr	r3, [pc, #192]	; (8001820 <HAL_GPIO_Init+0x334>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	4313      	orrs	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001780:	4a27      	ldr	r2, [pc, #156]	; (8001820 <HAL_GPIO_Init+0x334>)
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <HAL_GPIO_Init+0x334>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017aa:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <HAL_GPIO_Init+0x334>)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017b0:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <HAL_GPIO_Init+0x334>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	43db      	mvns	r3, r3
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	4013      	ands	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d003      	beq.n	80017d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017d4:	4a12      	ldr	r2, [pc, #72]	; (8001820 <HAL_GPIO_Init+0x334>)
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3301      	adds	r3, #1
 80017de:	61fb      	str	r3, [r7, #28]
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	2b0f      	cmp	r3, #15
 80017e4:	f67f ae90 	bls.w	8001508 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017e8:	bf00      	nop
 80017ea:	bf00      	nop
 80017ec:	3724      	adds	r7, #36	; 0x24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40013800 	.word	0x40013800
 8001800:	40020000 	.word	0x40020000
 8001804:	40020400 	.word	0x40020400
 8001808:	40020800 	.word	0x40020800
 800180c:	40020c00 	.word	0x40020c00
 8001810:	40021000 	.word	0x40021000
 8001814:	40021400 	.word	0x40021400
 8001818:	40021800 	.word	0x40021800
 800181c:	40021c00 	.word	0x40021c00
 8001820:	40013c00 	.word	0x40013c00

08001824 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	691a      	ldr	r2, [r3, #16]
 8001834:	887b      	ldrh	r3, [r7, #2]
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d002      	beq.n	8001842 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800183c:	2301      	movs	r3, #1
 800183e:	73fb      	strb	r3, [r7, #15]
 8001840:	e001      	b.n	8001846 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001842:	2300      	movs	r3, #0
 8001844:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001846:	7bfb      	ldrb	r3, [r7, #15]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]
 8001860:	4613      	mov	r3, r2
 8001862:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001864:	787b      	ldrb	r3, [r7, #1]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800186a:	887a      	ldrh	r2, [r7, #2]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001870:	e003      	b.n	800187a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001872:	887b      	ldrh	r3, [r7, #2]
 8001874:	041a      	lsls	r2, r3, #16
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	619a      	str	r2, [r3, #24]
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
	...

08001888 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e267      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d075      	beq.n	8001992 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018a6:	4b88      	ldr	r3, [pc, #544]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d00c      	beq.n	80018cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018b2:	4b85      	ldr	r3, [pc, #532]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ba:	2b08      	cmp	r3, #8
 80018bc:	d112      	bne.n	80018e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018be:	4b82      	ldr	r3, [pc, #520]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018ca:	d10b      	bne.n	80018e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018cc:	4b7e      	ldr	r3, [pc, #504]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d05b      	beq.n	8001990 <HAL_RCC_OscConfig+0x108>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d157      	bne.n	8001990 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e242      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ec:	d106      	bne.n	80018fc <HAL_RCC_OscConfig+0x74>
 80018ee:	4b76      	ldr	r3, [pc, #472]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a75      	ldr	r2, [pc, #468]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80018f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e01d      	b.n	8001938 <HAL_RCC_OscConfig+0xb0>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001904:	d10c      	bne.n	8001920 <HAL_RCC_OscConfig+0x98>
 8001906:	4b70      	ldr	r3, [pc, #448]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a6f      	ldr	r2, [pc, #444]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 800190c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	4b6d      	ldr	r3, [pc, #436]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a6c      	ldr	r2, [pc, #432]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	e00b      	b.n	8001938 <HAL_RCC_OscConfig+0xb0>
 8001920:	4b69      	ldr	r3, [pc, #420]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a68      	ldr	r2, [pc, #416]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	4b66      	ldr	r3, [pc, #408]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a65      	ldr	r2, [pc, #404]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001932:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001936:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d013      	beq.n	8001968 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001940:	f7ff fc00 	bl	8001144 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001948:	f7ff fbfc 	bl	8001144 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b64      	cmp	r3, #100	; 0x64
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e207      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195a:	4b5b      	ldr	r3, [pc, #364]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0xc0>
 8001966:	e014      	b.n	8001992 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fbec 	bl	8001144 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001970:	f7ff fbe8 	bl	8001144 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b64      	cmp	r3, #100	; 0x64
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e1f3      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001982:	4b51      	ldr	r3, [pc, #324]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0xe8>
 800198e:	e000      	b.n	8001992 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d063      	beq.n	8001a66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800199e:	4b4a      	ldr	r3, [pc, #296]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00b      	beq.n	80019c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019aa:	4b47      	ldr	r3, [pc, #284]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d11c      	bne.n	80019f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019b6:	4b44      	ldr	r3, [pc, #272]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d116      	bne.n	80019f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019c2:	4b41      	ldr	r3, [pc, #260]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d005      	beq.n	80019da <HAL_RCC_OscConfig+0x152>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68db      	ldr	r3, [r3, #12]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d001      	beq.n	80019da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e1c7      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019da:	4b3b      	ldr	r3, [pc, #236]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	4937      	ldr	r1, [pc, #220]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ee:	e03a      	b.n	8001a66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d020      	beq.n	8001a3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019f8:	4b34      	ldr	r3, [pc, #208]	; (8001acc <HAL_RCC_OscConfig+0x244>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fe:	f7ff fba1 	bl	8001144 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a06:	f7ff fb9d 	bl	8001144 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e1a8      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a18:	4b2b      	ldr	r3, [pc, #172]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0f0      	beq.n	8001a06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a24:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	4925      	ldr	r1, [pc, #148]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]
 8001a38:	e015      	b.n	8001a66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a3a:	4b24      	ldr	r3, [pc, #144]	; (8001acc <HAL_RCC_OscConfig+0x244>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a40:	f7ff fb80 	bl	8001144 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a48:	f7ff fb7c 	bl	8001144 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e187      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d036      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d016      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a7a:	4b15      	ldr	r3, [pc, #84]	; (8001ad0 <HAL_RCC_OscConfig+0x248>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a80:	f7ff fb60 	bl	8001144 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a88:	f7ff fb5c 	bl	8001144 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e167      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <HAL_RCC_OscConfig+0x240>)
 8001a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0x200>
 8001aa6:	e01b      	b.n	8001ae0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa8:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <HAL_RCC_OscConfig+0x248>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aae:	f7ff fb49 	bl	8001144 <HAL_GetTick>
 8001ab2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab4:	e00e      	b.n	8001ad4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ab6:	f7ff fb45 	bl	8001144 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d907      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	e150      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	42470000 	.word	0x42470000
 8001ad0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad4:	4b88      	ldr	r3, [pc, #544]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1ea      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 8097 	beq.w	8001c1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aee:	2300      	movs	r3, #0
 8001af0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001af2:	4b81      	ldr	r3, [pc, #516]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d10f      	bne.n	8001b1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	4b7d      	ldr	r3, [pc, #500]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	4a7c      	ldr	r2, [pc, #496]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0e:	4b7a      	ldr	r3, [pc, #488]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1e:	4b77      	ldr	r3, [pc, #476]	; (8001cfc <HAL_RCC_OscConfig+0x474>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d118      	bne.n	8001b5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b2a:	4b74      	ldr	r3, [pc, #464]	; (8001cfc <HAL_RCC_OscConfig+0x474>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a73      	ldr	r2, [pc, #460]	; (8001cfc <HAL_RCC_OscConfig+0x474>)
 8001b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b36:	f7ff fb05 	bl	8001144 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b3e:	f7ff fb01 	bl	8001144 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e10c      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b50:	4b6a      	ldr	r3, [pc, #424]	; (8001cfc <HAL_RCC_OscConfig+0x474>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d106      	bne.n	8001b72 <HAL_RCC_OscConfig+0x2ea>
 8001b64:	4b64      	ldr	r3, [pc, #400]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b68:	4a63      	ldr	r2, [pc, #396]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b70:	e01c      	b.n	8001bac <HAL_RCC_OscConfig+0x324>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b05      	cmp	r3, #5
 8001b78:	d10c      	bne.n	8001b94 <HAL_RCC_OscConfig+0x30c>
 8001b7a:	4b5f      	ldr	r3, [pc, #380]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7e:	4a5e      	ldr	r2, [pc, #376]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	6713      	str	r3, [r2, #112]	; 0x70
 8001b86:	4b5c      	ldr	r3, [pc, #368]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8a:	4a5b      	ldr	r2, [pc, #364]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6713      	str	r3, [r2, #112]	; 0x70
 8001b92:	e00b      	b.n	8001bac <HAL_RCC_OscConfig+0x324>
 8001b94:	4b58      	ldr	r3, [pc, #352]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b98:	4a57      	ldr	r2, [pc, #348]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001b9a:	f023 0301 	bic.w	r3, r3, #1
 8001b9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba0:	4b55      	ldr	r3, [pc, #340]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba4:	4a54      	ldr	r2, [pc, #336]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001ba6:	f023 0304 	bic.w	r3, r3, #4
 8001baa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d015      	beq.n	8001be0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb4:	f7ff fac6 	bl	8001144 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bba:	e00a      	b.n	8001bd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bbc:	f7ff fac2 	bl	8001144 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e0cb      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd2:	4b49      	ldr	r3, [pc, #292]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0ee      	beq.n	8001bbc <HAL_RCC_OscConfig+0x334>
 8001bde:	e014      	b.n	8001c0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be0:	f7ff fab0 	bl	8001144 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be6:	e00a      	b.n	8001bfe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001be8:	f7ff faac 	bl	8001144 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e0b5      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bfe:	4b3e      	ldr	r3, [pc, #248]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1ee      	bne.n	8001be8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c0a:	7dfb      	ldrb	r3, [r7, #23]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d105      	bne.n	8001c1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c10:	4b39      	ldr	r3, [pc, #228]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	4a38      	ldr	r2, [pc, #224]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 80a1 	beq.w	8001d68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c26:	4b34      	ldr	r3, [pc, #208]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d05c      	beq.n	8001cec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d141      	bne.n	8001cbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3a:	4b31      	ldr	r3, [pc, #196]	; (8001d00 <HAL_RCC_OscConfig+0x478>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c40:	f7ff fa80 	bl	8001144 <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c48:	f7ff fa7c 	bl	8001144 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e087      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c5a:	4b27      	ldr	r3, [pc, #156]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d1f0      	bne.n	8001c48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69da      	ldr	r2, [r3, #28]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	019b      	lsls	r3, r3, #6
 8001c76:	431a      	orrs	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7c:	085b      	lsrs	r3, r3, #1
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	041b      	lsls	r3, r3, #16
 8001c82:	431a      	orrs	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c88:	061b      	lsls	r3, r3, #24
 8001c8a:	491b      	ldr	r1, [pc, #108]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c90:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <HAL_RCC_OscConfig+0x478>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c96:	f7ff fa55 	bl	8001144 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c9e:	f7ff fa51 	bl	8001144 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e05c      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x416>
 8001cbc:	e054      	b.n	8001d68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cbe:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <HAL_RCC_OscConfig+0x478>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fa3e 	bl	8001144 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ccc:	f7ff fa3a 	bl	8001144 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e045      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cde:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_RCC_OscConfig+0x470>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x444>
 8001cea:	e03d      	b.n	8001d68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d107      	bne.n	8001d04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e038      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40007000 	.word	0x40007000
 8001d00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d04:	4b1b      	ldr	r3, [pc, #108]	; (8001d74 <HAL_RCC_OscConfig+0x4ec>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d028      	beq.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d121      	bne.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d11a      	bne.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d34:	4013      	ands	r3, r2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d111      	bne.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4a:	085b      	lsrs	r3, r3, #1
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d107      	bne.n	8001d64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e000      	b.n	8001d6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3718      	adds	r7, #24
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40023800 	.word	0x40023800

08001d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d101      	bne.n	8001d8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e0cc      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d8c:	4b68      	ldr	r3, [pc, #416]	; (8001f30 <HAL_RCC_ClockConfig+0x1b8>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0307 	and.w	r3, r3, #7
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d90c      	bls.n	8001db4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d9a:	4b65      	ldr	r3, [pc, #404]	; (8001f30 <HAL_RCC_ClockConfig+0x1b8>)
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da2:	4b63      	ldr	r3, [pc, #396]	; (8001f30 <HAL_RCC_ClockConfig+0x1b8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d001      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0b8      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d020      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d005      	beq.n	8001dd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dcc:	4b59      	ldr	r3, [pc, #356]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	4a58      	ldr	r2, [pc, #352]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001dd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0308 	and.w	r3, r3, #8
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d005      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001de4:	4b53      	ldr	r3, [pc, #332]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	4a52      	ldr	r2, [pc, #328]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001dee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001df0:	4b50      	ldr	r3, [pc, #320]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	494d      	ldr	r1, [pc, #308]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d044      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d107      	bne.n	8001e26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e16:	4b47      	ldr	r3, [pc, #284]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d119      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e07f      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d003      	beq.n	8001e36 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d107      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e36:	4b3f      	ldr	r3, [pc, #252]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d109      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e06f      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e46:	4b3b      	ldr	r3, [pc, #236]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d101      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e067      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e56:	4b37      	ldr	r3, [pc, #220]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	f023 0203 	bic.w	r2, r3, #3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	4934      	ldr	r1, [pc, #208]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e68:	f7ff f96c 	bl	8001144 <HAL_GetTick>
 8001e6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6e:	e00a      	b.n	8001e86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e70:	f7ff f968 	bl	8001144 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e04f      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e86:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 020c 	and.w	r2, r3, #12
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d1eb      	bne.n	8001e70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e98:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <HAL_RCC_ClockConfig+0x1b8>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d20c      	bcs.n	8001ec0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eae:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	683a      	ldr	r2, [r7, #0]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d001      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e032      	b.n	8001f26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d008      	beq.n	8001ede <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ecc:	4b19      	ldr	r3, [pc, #100]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	4916      	ldr	r1, [pc, #88]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d009      	beq.n	8001efe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001eea:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	490e      	ldr	r1, [pc, #56]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001efe:	f000 f821 	bl	8001f44 <HAL_RCC_GetSysClockFreq>
 8001f02:	4602      	mov	r2, r0
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	490a      	ldr	r1, [pc, #40]	; (8001f38 <HAL_RCC_ClockConfig+0x1c0>)
 8001f10:	5ccb      	ldrb	r3, [r1, r3]
 8001f12:	fa22 f303 	lsr.w	r3, r2, r3
 8001f16:	4a09      	ldr	r2, [pc, #36]	; (8001f3c <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f1a:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <HAL_RCC_ClockConfig+0x1c8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff f8cc 	bl	80010bc <HAL_InitTick>

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40023c00 	.word	0x40023c00
 8001f34:	40023800 	.word	0x40023800
 8001f38:	08007f24 	.word	0x08007f24
 8001f3c:	20000008 	.word	0x20000008
 8001f40:	2000000c 	.word	0x2000000c

08001f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f48:	b090      	sub	sp, #64	; 0x40
 8001f4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	637b      	str	r3, [r7, #52]	; 0x34
 8001f50:	2300      	movs	r3, #0
 8001f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f54:	2300      	movs	r3, #0
 8001f56:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f5c:	4b59      	ldr	r3, [pc, #356]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	2b08      	cmp	r3, #8
 8001f66:	d00d      	beq.n	8001f84 <HAL_RCC_GetSysClockFreq+0x40>
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	f200 80a1 	bhi.w	80020b0 <HAL_RCC_GetSysClockFreq+0x16c>
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d002      	beq.n	8001f78 <HAL_RCC_GetSysClockFreq+0x34>
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d003      	beq.n	8001f7e <HAL_RCC_GetSysClockFreq+0x3a>
 8001f76:	e09b      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f78:	4b53      	ldr	r3, [pc, #332]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f7a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001f7c:	e09b      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f7e:	4b53      	ldr	r3, [pc, #332]	; (80020cc <HAL_RCC_GetSysClockFreq+0x188>)
 8001f80:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f82:	e098      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f84:	4b4f      	ldr	r3, [pc, #316]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f8c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f8e:	4b4d      	ldr	r3, [pc, #308]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d028      	beq.n	8001fec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f9a:	4b4a      	ldr	r3, [pc, #296]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	099b      	lsrs	r3, r3, #6
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	623b      	str	r3, [r7, #32]
 8001fa4:	627a      	str	r2, [r7, #36]	; 0x24
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001fac:	2100      	movs	r1, #0
 8001fae:	4b47      	ldr	r3, [pc, #284]	; (80020cc <HAL_RCC_GetSysClockFreq+0x188>)
 8001fb0:	fb03 f201 	mul.w	r2, r3, r1
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	fb00 f303 	mul.w	r3, r0, r3
 8001fba:	4413      	add	r3, r2
 8001fbc:	4a43      	ldr	r2, [pc, #268]	; (80020cc <HAL_RCC_GetSysClockFreq+0x188>)
 8001fbe:	fba0 1202 	umull	r1, r2, r0, r2
 8001fc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001fc4:	460a      	mov	r2, r1
 8001fc6:	62ba      	str	r2, [r7, #40]	; 0x28
 8001fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fca:	4413      	add	r3, r2
 8001fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	61bb      	str	r3, [r7, #24]
 8001fd4:	61fa      	str	r2, [r7, #28]
 8001fd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001fde:	f7fe f8f3 	bl	80001c8 <__aeabi_uldivmod>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fea:	e053      	b.n	8002094 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fec:	4b35      	ldr	r3, [pc, #212]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	099b      	lsrs	r3, r3, #6
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	617a      	str	r2, [r7, #20]
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ffe:	f04f 0b00 	mov.w	fp, #0
 8002002:	4652      	mov	r2, sl
 8002004:	465b      	mov	r3, fp
 8002006:	f04f 0000 	mov.w	r0, #0
 800200a:	f04f 0100 	mov.w	r1, #0
 800200e:	0159      	lsls	r1, r3, #5
 8002010:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002014:	0150      	lsls	r0, r2, #5
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	ebb2 080a 	subs.w	r8, r2, sl
 800201e:	eb63 090b 	sbc.w	r9, r3, fp
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	f04f 0300 	mov.w	r3, #0
 800202a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800202e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002032:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002036:	ebb2 0408 	subs.w	r4, r2, r8
 800203a:	eb63 0509 	sbc.w	r5, r3, r9
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	00eb      	lsls	r3, r5, #3
 8002048:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800204c:	00e2      	lsls	r2, r4, #3
 800204e:	4614      	mov	r4, r2
 8002050:	461d      	mov	r5, r3
 8002052:	eb14 030a 	adds.w	r3, r4, sl
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	eb45 030b 	adc.w	r3, r5, fp
 800205c:	607b      	str	r3, [r7, #4]
 800205e:	f04f 0200 	mov.w	r2, #0
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	e9d7 4500 	ldrd	r4, r5, [r7]
 800206a:	4629      	mov	r1, r5
 800206c:	028b      	lsls	r3, r1, #10
 800206e:	4621      	mov	r1, r4
 8002070:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002074:	4621      	mov	r1, r4
 8002076:	028a      	lsls	r2, r1, #10
 8002078:	4610      	mov	r0, r2
 800207a:	4619      	mov	r1, r3
 800207c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800207e:	2200      	movs	r2, #0
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	60fa      	str	r2, [r7, #12]
 8002084:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002088:	f7fe f89e 	bl	80001c8 <__aeabi_uldivmod>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4613      	mov	r3, r2
 8002092:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	0c1b      	lsrs	r3, r3, #16
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	3301      	adds	r3, #1
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80020a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020ae:	e002      	b.n	80020b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80020b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80020b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3740      	adds	r7, #64	; 0x40
 80020bc:	46bd      	mov	sp, r7
 80020be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020c2:	bf00      	nop
 80020c4:	40023800 	.word	0x40023800
 80020c8:	00f42400 	.word	0x00f42400
 80020cc:	017d7840 	.word	0x017d7840

080020d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020d4:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020d6:	681b      	ldr	r3, [r3, #0]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000008 	.word	0x20000008

080020e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020ec:	f7ff fff0 	bl	80020d0 <HAL_RCC_GetHCLKFreq>
 80020f0:	4602      	mov	r2, r0
 80020f2:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	0a9b      	lsrs	r3, r3, #10
 80020f8:	f003 0307 	and.w	r3, r3, #7
 80020fc:	4903      	ldr	r1, [pc, #12]	; (800210c <HAL_RCC_GetPCLK1Freq+0x24>)
 80020fe:	5ccb      	ldrb	r3, [r1, r3]
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002104:	4618      	mov	r0, r3
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40023800 	.word	0x40023800
 800210c:	08007f34 	.word	0x08007f34

08002110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002114:	f7ff ffdc 	bl	80020d0 <HAL_RCC_GetHCLKFreq>
 8002118:	4602      	mov	r2, r0
 800211a:	4b05      	ldr	r3, [pc, #20]	; (8002130 <HAL_RCC_GetPCLK2Freq+0x20>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	0b5b      	lsrs	r3, r3, #13
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	4903      	ldr	r1, [pc, #12]	; (8002134 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002126:	5ccb      	ldrb	r3, [r1, r3]
 8002128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800212c:	4618      	mov	r0, r3
 800212e:	bd80      	pop	{r7, pc}
 8002130:	40023800 	.word	0x40023800
 8002134:	08007f34 	.word	0x08007f34

08002138 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e022      	b.n	8002190 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d105      	bne.n	8002162 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f7fe fe1b 	bl	8000d98 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2203      	movs	r2, #3
 8002166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f814 	bl	8002198 <HAL_SD_InitCard>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e00a      	b.n	8002190 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002198:	b5b0      	push	{r4, r5, r7, lr}
 800219a:	b08e      	sub	sp, #56	; 0x38
 800219c:	af04      	add	r7, sp, #16
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80021a4:	2300      	movs	r3, #0
 80021a6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80021a8:	2300      	movs	r3, #0
 80021aa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80021b4:	2376      	movs	r3, #118	; 0x76
 80021b6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681d      	ldr	r5, [r3, #0]
 80021bc:	466c      	mov	r4, sp
 80021be:	f107 0314 	add.w	r3, r7, #20
 80021c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80021c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80021ca:	f107 0308 	add.w	r3, r7, #8
 80021ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021d0:	4628      	mov	r0, r5
 80021d2:	f002 fc39 	bl	8004a48 <SDIO_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80021dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e04f      	b.n	8002288 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80021e8:	4b29      	ldr	r3, [pc, #164]	; (8002290 <HAL_SD_InitCard+0xf8>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f002 fc71 	bl	8004ada <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80021f8:	4b25      	ldr	r3, [pc, #148]	; (8002290 <HAL_SD_InitCard+0xf8>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80021fe:	2002      	movs	r0, #2
 8002200:	f7fe ffac 	bl	800115c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 fe69 	bl	8002edc <SD_PowerON>
 800220a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00b      	beq.n	800222a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e02e      	b.n	8002288 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 fd88 	bl	8002d40 <SD_InitCard>
 8002230:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00b      	beq.n	8002250 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002244:	6a3b      	ldr	r3, [r7, #32]
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e01b      	b.n	8002288 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002258:	4618      	mov	r0, r3
 800225a:	f002 fcd0 	bl	8004bfe <SDMMC_CmdBlockLength>
 800225e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00f      	beq.n	8002286 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <HAL_SD_InitCard+0xfc>)
 800226c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	431a      	orrs	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3728      	adds	r7, #40	; 0x28
 800228c:	46bd      	mov	sp, r7
 800228e:	bdb0      	pop	{r4, r5, r7, pc}
 8002290:	422580a0 	.word	0x422580a0
 8002294:	004005ff 	.word	0x004005ff

08002298 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b092      	sub	sp, #72	; 0x48
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
 80022a4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80022a6:	f7fe ff4d 	bl	8001144 <HAL_GetTick>
 80022aa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d107      	bne.n	80022ca <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e1bd      	b.n	8002646 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	f040 81b0 	bne.w	8002638 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80022de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	441a      	add	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d907      	bls.n	80022fc <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e1a4      	b.n	8002646 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2203      	movs	r2, #3
 8002300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2200      	movs	r2, #0
 800230a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002310:	2b01      	cmp	r3, #1
 8002312:	d002      	beq.n	800231a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002316:	025b      	lsls	r3, r3, #9
 8002318:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800231a:	f04f 33ff 	mov.w	r3, #4294967295
 800231e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	025b      	lsls	r3, r3, #9
 8002324:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002326:	2390      	movs	r3, #144	; 0x90
 8002328:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800232a:	2302      	movs	r3, #2
 800232c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800232e:	2300      	movs	r3, #0
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002332:	2301      	movs	r3, #1
 8002334:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f107 0214 	add.w	r2, r7, #20
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f002 fc30 	bl	8004ba6 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d90a      	bls.n	8002362 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2202      	movs	r2, #2
 8002350:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002358:	4618      	mov	r0, r3
 800235a:	f002 fc94 	bl	8004c86 <SDMMC_CmdReadMultiBlock>
 800235e:	6478      	str	r0, [r7, #68]	; 0x44
 8002360:	e009      	b.n	8002376 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2201      	movs	r2, #1
 8002366:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800236e:	4618      	mov	r0, r3
 8002370:	f002 fc67 	bl	8004c42 <SDMMC_CmdReadSingleBlock>
 8002374:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002376:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002378:	2b00      	cmp	r3, #0
 800237a:	d012      	beq.n	80023a2 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a7a      	ldr	r2, [pc, #488]	; (800256c <HAL_SD_ReadBlocks+0x2d4>)
 8002382:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800238a:	431a      	orrs	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e151      	b.n	8002646 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 80023a6:	e061      	b.n	800246c <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d03c      	beq.n	8002430 <HAL_SD_ReadBlocks+0x198>
 80023b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d039      	beq.n	8002430 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80023bc:	2300      	movs	r3, #0
 80023be:	643b      	str	r3, [r7, #64]	; 0x40
 80023c0:	e033      	b.n	800242a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f002 fb69 	bl	8004a9e <SDIO_ReadFIFO>
 80023cc:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80023ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80023d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d8:	3301      	adds	r3, #1
 80023da:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80023dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023de:	3b01      	subs	r3, #1
 80023e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80023e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e4:	0a1b      	lsrs	r3, r3, #8
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ea:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80023ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023ee:	3301      	adds	r3, #1
 80023f0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80023f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f4:	3b01      	subs	r3, #1
 80023f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80023f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fa:	0c1b      	lsrs	r3, r3, #16
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002400:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002404:	3301      	adds	r3, #1
 8002406:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800240a:	3b01      	subs	r3, #1
 800240c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800240e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002410:	0e1b      	lsrs	r3, r3, #24
 8002412:	b2da      	uxtb	r2, r3
 8002414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002416:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800241a:	3301      	adds	r3, #1
 800241c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800241e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002420:	3b01      	subs	r3, #1
 8002422:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002426:	3301      	adds	r3, #1
 8002428:	643b      	str	r3, [r7, #64]	; 0x40
 800242a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800242c:	2b07      	cmp	r3, #7
 800242e:	d9c8      	bls.n	80023c2 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002430:	f7fe fe88 	bl	8001144 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800243c:	429a      	cmp	r2, r3
 800243e:	d902      	bls.n	8002446 <HAL_SD_ReadBlocks+0x1ae>
 8002440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002442:	2b00      	cmp	r3, #0
 8002444:	d112      	bne.n	800246c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a48      	ldr	r2, [pc, #288]	; (800256c <HAL_SD_ReadBlocks+0x2d4>)
 800244c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002452:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2200      	movs	r2, #0
 8002466:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e0ec      	b.n	8002646 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002472:	f240 332a 	movw	r3, #810	; 0x32a
 8002476:	4013      	ands	r3, r2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d095      	beq.n	80023a8 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d022      	beq.n	80024d0 <HAL_SD_ReadBlocks+0x238>
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d91f      	bls.n	80024d0 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002494:	2b03      	cmp	r3, #3
 8002496:	d01b      	beq.n	80024d0 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f002 fc59 	bl	8004d54 <SDMMC_CmdStopTransfer>
 80024a2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80024a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d012      	beq.n	80024d0 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a2f      	ldr	r2, [pc, #188]	; (800256c <HAL_SD_ReadBlocks+0x2d4>)
 80024b0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024b8:	431a      	orrs	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0ba      	b.n	8002646 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d012      	beq.n	8002504 <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a22      	ldr	r2, [pc, #136]	; (800256c <HAL_SD_ReadBlocks+0x2d4>)
 80024e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ea:	f043 0208 	orr.w	r2, r3, #8
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2201      	movs	r2, #1
 80024f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e0a0      	b.n	8002646 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d012      	beq.n	8002538 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a15      	ldr	r2, [pc, #84]	; (800256c <HAL_SD_ReadBlocks+0x2d4>)
 8002518:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251e:	f043 0202 	orr.w	r2, r3, #2
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e086      	b.n	8002646 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b00      	cmp	r3, #0
 8002544:	d063      	beq.n	800260e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a08      	ldr	r2, [pc, #32]	; (800256c <HAL_SD_ReadBlocks+0x2d4>)
 800254c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002552:	f043 0220 	orr.w	r2, r3, #32
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e06c      	b.n	8002646 <HAL_SD_ReadBlocks+0x3ae>
 800256c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f002 fa92 	bl	8004a9e <SDIO_ReadFIFO>
 800257a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800257c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257e:	b2da      	uxtb	r2, r3
 8002580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002582:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002586:	3301      	adds	r3, #1
 8002588:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800258a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800258c:	3b01      	subs	r3, #1
 800258e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002592:	0a1b      	lsrs	r3, r3, #8
 8002594:	b2da      	uxtb	r2, r3
 8002596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002598:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800259a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259c:	3301      	adds	r3, #1
 800259e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80025a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025a2:	3b01      	subs	r3, #1
 80025a4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80025a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a8:	0c1b      	lsrs	r3, r3, #16
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ae:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80025b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b2:	3301      	adds	r3, #1
 80025b4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80025b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025b8:	3b01      	subs	r3, #1
 80025ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80025bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025be:	0e1b      	lsrs	r3, r3, #24
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80025c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c8:	3301      	adds	r3, #1
 80025ca:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80025cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ce:	3b01      	subs	r3, #1
 80025d0:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80025d2:	f7fe fdb7 	bl	8001144 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80025de:	429a      	cmp	r2, r3
 80025e0:	d902      	bls.n	80025e8 <HAL_SD_ReadBlocks+0x350>
 80025e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d112      	bne.n	800260e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a18      	ldr	r2, [pc, #96]	; (8002650 <HAL_SD_ReadBlocks+0x3b8>)
 80025ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e01b      	b.n	8002646 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002614:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <HAL_SD_ReadBlocks+0x38a>
 800261c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1a6      	bne.n	8002570 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f240 523a 	movw	r2, #1338	; 0x53a
 800262a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	e006      	b.n	8002646 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
  }
}
 8002646:	4618      	mov	r0, r3
 8002648:	3748      	adds	r7, #72	; 0x48
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	004005ff 	.word	0x004005ff

08002654 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b092      	sub	sp, #72	; 0x48
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
 8002660:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002662:	f7fe fd6f 	bl	8001144 <HAL_GetTick>
 8002666:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d107      	bne.n	8002686 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e166      	b.n	8002954 <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b01      	cmp	r3, #1
 8002690:	f040 8159 	bne.w	8002946 <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800269a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	441a      	add	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d907      	bls.n	80026b8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ac:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e14d      	b.n	8002954 <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2203      	movs	r2, #3
 80026bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2200      	movs	r2, #0
 80026c6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d002      	beq.n	80026d6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80026d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d2:	025b      	lsls	r3, r3, #9
 80026d4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80026d6:	f04f 33ff 	mov.w	r3, #4294967295
 80026da:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	025b      	lsls	r3, r3, #9
 80026e0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80026e2:	2390      	movs	r3, #144	; 0x90
 80026e4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80026e6:	2300      	movs	r3, #0
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80026ea:	2300      	movs	r3, #0
 80026ec:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80026ee:	2301      	movs	r3, #1
 80026f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f107 0218 	add.w	r2, r7, #24
 80026fa:	4611      	mov	r1, r2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f002 fa52 	bl	8004ba6 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d90a      	bls.n	800271e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2220      	movs	r2, #32
 800270c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002714:	4618      	mov	r0, r3
 8002716:	f002 fafa 	bl	8004d0e <SDMMC_CmdWriteMultiBlock>
 800271a:	6478      	str	r0, [r7, #68]	; 0x44
 800271c:	e009      	b.n	8002732 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2210      	movs	r2, #16
 8002722:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800272a:	4618      	mov	r0, r3
 800272c:	f002 facd 	bl	8004cca <SDMMC_CmdWriteSingleBlock>
 8002730:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002732:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002734:	2b00      	cmp	r3, #0
 8002736:	d012      	beq.n	800275e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a87      	ldr	r2, [pc, #540]	; (800295c <HAL_SD_WriteBlocks+0x308>)
 800273e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002744:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002746:	431a      	orrs	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e0fa      	b.n	8002954 <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002762:	e065      	b.n	8002830 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800276a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d040      	beq.n	80027f4 <HAL_SD_WriteBlocks+0x1a0>
 8002772:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002774:	2b00      	cmp	r3, #0
 8002776:	d03d      	beq.n	80027f4 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002778:	2300      	movs	r3, #0
 800277a:	643b      	str	r3, [r7, #64]	; 0x40
 800277c:	e037      	b.n	80027ee <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800277e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002786:	3301      	adds	r3, #1
 8002788:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800278a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800278c:	3b01      	subs	r3, #1
 800278e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	021a      	lsls	r2, r3, #8
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	4313      	orrs	r3, r2
 800279a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800279c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279e:	3301      	adds	r3, #1
 80027a0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80027a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027a4:	3b01      	subs	r3, #1
 80027a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80027a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	041a      	lsls	r2, r3, #16
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80027b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b6:	3301      	adds	r3, #1
 80027b8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80027ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027bc:	3b01      	subs	r3, #1
 80027be:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80027c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	061a      	lsls	r2, r3, #24
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80027cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ce:	3301      	adds	r3, #1
 80027d0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80027d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027d4:	3b01      	subs	r3, #1
 80027d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f107 0214 	add.w	r2, r7, #20
 80027e0:	4611      	mov	r1, r2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f002 f968 	bl	8004ab8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80027e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ea:	3301      	adds	r3, #1
 80027ec:	643b      	str	r3, [r7, #64]	; 0x40
 80027ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027f0:	2b07      	cmp	r3, #7
 80027f2:	d9c4      	bls.n	800277e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80027f4:	f7fe fca6 	bl	8001144 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002800:	429a      	cmp	r2, r3
 8002802:	d902      	bls.n	800280a <HAL_SD_WriteBlocks+0x1b6>
 8002804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002806:	2b00      	cmp	r3, #0
 8002808:	d112      	bne.n	8002830 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a53      	ldr	r2, [pc, #332]	; (800295c <HAL_SD_WriteBlocks+0x308>)
 8002810:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002816:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002818:	431a      	orrs	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e091      	b.n	8002954 <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002836:	f240 331a 	movw	r3, #794	; 0x31a
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d091      	beq.n	8002764 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284a:	2b00      	cmp	r3, #0
 800284c:	d022      	beq.n	8002894 <HAL_SD_WriteBlocks+0x240>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d91f      	bls.n	8002894 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002858:	2b03      	cmp	r3, #3
 800285a:	d01b      	beq.n	8002894 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f002 fa77 	bl	8004d54 <SDMMC_CmdStopTransfer>
 8002866:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800286a:	2b00      	cmp	r3, #0
 800286c:	d012      	beq.n	8002894 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a3a      	ldr	r2, [pc, #232]	; (800295c <HAL_SD_WriteBlocks+0x308>)
 8002874:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800287a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800287c:	431a      	orrs	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e05f      	b.n	8002954 <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d012      	beq.n	80028c8 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a2d      	ldr	r2, [pc, #180]	; (800295c <HAL_SD_WriteBlocks+0x308>)
 80028a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ae:	f043 0208 	orr.w	r2, r3, #8
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e045      	b.n	8002954 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d012      	beq.n	80028fc <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a20      	ldr	r2, [pc, #128]	; (800295c <HAL_SD_WriteBlocks+0x308>)
 80028dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e2:	f043 0202 	orr.w	r2, r3, #2
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e02b      	b.n	8002954 <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	2b00      	cmp	r3, #0
 8002908:	d012      	beq.n	8002930 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a13      	ldr	r2, [pc, #76]	; (800295c <HAL_SD_WriteBlocks+0x308>)
 8002910:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002916:	f043 0210 	orr.w	r2, r3, #16
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	e011      	b.n	8002954 <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f240 523a 	movw	r2, #1338	; 0x53a
 8002938:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	e006      	b.n	8002954 <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
  }
}
 8002954:	4618      	mov	r0, r3
 8002956:	3748      	adds	r7, #72	; 0x48
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	004005ff 	.word	0x004005ff

08002960 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800296e:	0f9b      	lsrs	r3, r3, #30
 8002970:	b2da      	uxtb	r2, r3
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800297a:	0e9b      	lsrs	r3, r3, #26
 800297c:	b2db      	uxtb	r3, r3
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	b2da      	uxtb	r2, r3
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800298c:	0e1b      	lsrs	r3, r3, #24
 800298e:	b2db      	uxtb	r3, r3
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	b2da      	uxtb	r2, r3
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800299e:	0c1b      	lsrs	r3, r3, #16
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029aa:	0a1b      	lsrs	r3, r3, #8
 80029ac:	b2da      	uxtb	r2, r3
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029c0:	0d1b      	lsrs	r3, r3, #20
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029cc:	0c1b      	lsrs	r3, r3, #16
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029de:	0bdb      	lsrs	r3, r3, #15
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	f003 0301 	and.w	r3, r3, #1
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029f0:	0b9b      	lsrs	r3, r3, #14
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	b2da      	uxtb	r2, r3
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a02:	0b5b      	lsrs	r3, r3, #13
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a14:	0b1b      	lsrs	r3, r3, #12
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2200      	movs	r2, #0
 8002a26:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d163      	bne.n	8002af8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a34:	009a      	lsls	r2, r3, #2
 8002a36:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002a40:	0f92      	lsrs	r2, r2, #30
 8002a42:	431a      	orrs	r2, r3
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a4c:	0edb      	lsrs	r3, r3, #27
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	f003 0307 	and.w	r3, r3, #7
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a5e:	0e1b      	lsrs	r3, r3, #24
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a70:	0d5b      	lsrs	r3, r3, #21
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a82:	0c9b      	lsrs	r3, r3, #18
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a94:	0bdb      	lsrs	r3, r3, #15
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	7e1b      	ldrb	r3, [r3, #24]
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	3302      	adds	r3, #2
 8002ab8:	2201      	movs	r2, #1
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002ac2:	fb03 f202 	mul.w	r2, r3, r2
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	7a1b      	ldrb	r3, [r3, #8]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	f003 030f 	and.w	r3, r3, #15
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002ae4:	0a52      	lsrs	r2, r2, #9
 8002ae6:	fb03 f202 	mul.w	r2, r3, r2
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002af4:	661a      	str	r2, [r3, #96]	; 0x60
 8002af6:	e031      	b.n	8002b5c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d11d      	bne.n	8002b3c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002b04:	041b      	lsls	r3, r3, #16
 8002b06:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b0e:	0c1b      	lsrs	r3, r3, #16
 8002b10:	431a      	orrs	r2, r3
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	029a      	lsls	r2, r3, #10
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b30:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	661a      	str	r2, [r3, #96]	; 0x60
 8002b3a:	e00f      	b.n	8002b5c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a58      	ldr	r2, [pc, #352]	; (8002ca4 <HAL_SD_GetCardCSD+0x344>)
 8002b42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b48:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e09d      	b.n	8002c98 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b60:	0b9b      	lsrs	r3, r3, #14
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b72:	09db      	lsrs	r3, r3, #7
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b94:	0fdb      	lsrs	r3, r3, #31
 8002b96:	b2da      	uxtb	r2, r3
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba0:	0f5b      	lsrs	r3, r3, #29
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb2:	0e9b      	lsrs	r3, r3, #26
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	f003 0307 	and.w	r3, r3, #7
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc4:	0d9b      	lsrs	r3, r3, #22
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f003 030f 	and.w	r3, r3, #15
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	0d5b      	lsrs	r3, r3, #21
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf2:	0c1b      	lsrs	r3, r3, #16
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c06:	0bdb      	lsrs	r3, r3, #15
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c1a:	0b9b      	lsrs	r3, r3, #14
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	f003 0301 	and.w	r3, r3, #1
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2e:	0b5b      	lsrs	r3, r3, #13
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	0b1b      	lsrs	r3, r3, #12
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c56:	0a9b      	lsrs	r3, r3, #10
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6a:	0a1b      	lsrs	r3, r3, #8
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7e:	085b      	lsrs	r3, r3, #1
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c86:	b2da      	uxtb	r2, r3
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr
 8002ca4:	004005ff 	.word	0x004005ff

08002ca8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002d0c:	f107 030c 	add.w	r3, r7, #12
 8002d10:	4619      	mov	r1, r3
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 f970 	bl	8002ff8 <SD_SendStatus>
 8002d18:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	0a5b      	lsrs	r3, r3, #9
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002d36:	693b      	ldr	r3, [r7, #16]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002d40:	b5b0      	push	{r4, r5, r7, lr}
 8002d42:	b094      	sub	sp, #80	; 0x50
 8002d44:	af04      	add	r7, sp, #16
 8002d46:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f001 fed0 	bl	8004af6 <SDIO_GetPowerState>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d102      	bne.n	8002d62 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002d5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002d60:	e0b8      	b.n	8002ed4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d02f      	beq.n	8002dca <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f002 f8b7 	bl	8004ee2 <SDMMC_CmdSendCID>
 8002d74:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <SD_InitCard+0x40>
    {
      return errorstate;
 8002d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d7e:	e0a9      	b.n	8002ed4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2100      	movs	r1, #0
 8002d86:	4618      	mov	r0, r3
 8002d88:	f001 fefa 	bl	8004b80 <SDIO_GetResponse>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2104      	movs	r1, #4
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f001 fef1 	bl	8004b80 <SDIO_GetResponse>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2108      	movs	r1, #8
 8002daa:	4618      	mov	r0, r3
 8002dac:	f001 fee8 	bl	8004b80 <SDIO_GetResponse>
 8002db0:	4602      	mov	r2, r0
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	210c      	movs	r1, #12
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f001 fedf 	bl	8004b80 <SDIO_GetResponse>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d00d      	beq.n	8002dee <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f107 020e 	add.w	r2, r7, #14
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f002 f8bd 	bl	8004f5c <SDMMC_CmdSetRelAdd>
 8002de2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <SD_InitCard+0xae>
    {
      return errorstate;
 8002dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dec:	e072      	b.n	8002ed4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d036      	beq.n	8002e64 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8002df6:	89fb      	ldrh	r3, [r7, #14]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e06:	041b      	lsls	r3, r3, #16
 8002e08:	4619      	mov	r1, r3
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	f002 f887 	bl	8004f1e <SDMMC_CmdSendCSD>
 8002e10:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <SD_InitCard+0xdc>
    {
      return errorstate;
 8002e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e1a:	e05b      	b.n	8002ed4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2100      	movs	r1, #0
 8002e22:	4618      	mov	r0, r3
 8002e24:	f001 feac 	bl	8004b80 <SDIO_GetResponse>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2104      	movs	r1, #4
 8002e34:	4618      	mov	r0, r3
 8002e36:	f001 fea3 	bl	8004b80 <SDIO_GetResponse>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2108      	movs	r1, #8
 8002e46:	4618      	mov	r0, r3
 8002e48:	f001 fe9a 	bl	8004b80 <SDIO_GetResponse>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	210c      	movs	r1, #12
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f001 fe91 	bl	8004b80 <SDIO_GetResponse>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2104      	movs	r1, #4
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f001 fe88 	bl	8004b80 <SDIO_GetResponse>
 8002e70:	4603      	mov	r3, r0
 8002e72:	0d1a      	lsrs	r2, r3, #20
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002e78:	f107 0310 	add.w	r3, r7, #16
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff fd6e 	bl	8002960 <HAL_SD_GetCardCSD>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002e8e:	e021      	b.n	8002ed4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6819      	ldr	r1, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e98:	041b      	lsls	r3, r3, #16
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	461c      	mov	r4, r3
 8002e9e:	4615      	mov	r5, r2
 8002ea0:	4622      	mov	r2, r4
 8002ea2:	462b      	mov	r3, r5
 8002ea4:	4608      	mov	r0, r1
 8002ea6:	f001 ff77 	bl	8004d98 <SDMMC_CmdSelDesel>
 8002eaa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <SD_InitCard+0x176>
  {
    return errorstate;
 8002eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eb4:	e00e      	b.n	8002ed4 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681d      	ldr	r5, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	466c      	mov	r4, sp
 8002ebe:	f103 0210 	add.w	r2, r3, #16
 8002ec2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ec4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002ec8:	3304      	adds	r3, #4
 8002eca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ecc:	4628      	mov	r0, r5
 8002ece:	f001 fdbb 	bl	8004a48 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3740      	adds	r7, #64	; 0x40
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bdb0      	pop	{r4, r5, r7, pc}

08002edc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	2300      	movs	r3, #0
 8002eee:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f001 ff72 	bl	8004dde <SDMMC_CmdGoIdleState>
 8002efa:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <SD_PowerON+0x2a>
  {
    return errorstate;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	e072      	b.n	8002fec <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f001 ff85 	bl	8004e1a <SDMMC_CmdOperCond>
 8002f10:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00d      	beq.n	8002f34 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f001 ff5b 	bl	8004dde <SDMMC_CmdGoIdleState>
 8002f28:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d004      	beq.n	8002f3a <SD_PowerON+0x5e>
    {
      return errorstate;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	e05b      	b.n	8002fec <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d137      	bne.n	8002fb2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2100      	movs	r1, #0
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f001 ff85 	bl	8004e58 <SDMMC_CmdAppCommand>
 8002f4e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d02d      	beq.n	8002fb2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f56:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002f5a:	e047      	b.n	8002fec <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2100      	movs	r1, #0
 8002f62:	4618      	mov	r0, r3
 8002f64:	f001 ff78 	bl	8004e58 <SDMMC_CmdAppCommand>
 8002f68:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <SD_PowerON+0x98>
    {
      return errorstate;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	e03b      	b.n	8002fec <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	491e      	ldr	r1, [pc, #120]	; (8002ff4 <SD_PowerON+0x118>)
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f001 ff8e 	bl	8004e9c <SDMMC_CmdAppOperCommand>
 8002f80:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d002      	beq.n	8002f8e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002f8c:	e02e      	b.n	8002fec <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2100      	movs	r1, #0
 8002f94:	4618      	mov	r0, r3
 8002f96:	f001 fdf3 	bl	8004b80 <SDIO_GetResponse>
 8002f9a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	0fdb      	lsrs	r3, r3, #31
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <SD_PowerON+0xcc>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <SD_PowerON+0xce>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	613b      	str	r3, [r7, #16]

    count++;
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d802      	bhi.n	8002fc2 <SD_PowerON+0xe6>
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0cc      	beq.n	8002f5c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d902      	bls.n	8002fd2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002fcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fd0:	e00c      	b.n	8002fec <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	645a      	str	r2, [r3, #68]	; 0x44
 8002fe2:	e002      	b.n	8002fea <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	c1100000 	.word	0xc1100000

08002ff8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d102      	bne.n	800300e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003008:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800300c:	e018      	b.n	8003040 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003016:	041b      	lsls	r3, r3, #16
 8003018:	4619      	mov	r1, r3
 800301a:	4610      	mov	r0, r2
 800301c:	f001 ffbf 	bl	8004f9e <SDMMC_CmdSendStatus>
 8003020:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <SD_SendStatus+0x34>
  {
    return errorstate;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	e009      	b.n	8003040 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2100      	movs	r1, #0
 8003032:	4618      	mov	r0, r3
 8003034:	f001 fda4 	bl	8004b80 <SDIO_GetResponse>
 8003038:	4602      	mov	r2, r0
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e07b      	b.n	8003152 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	2b00      	cmp	r3, #0
 8003060:	d108      	bne.n	8003074 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800306a:	d009      	beq.n	8003080 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	61da      	str	r2, [r3, #28]
 8003072:	e005      	b.n	8003080 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d106      	bne.n	80030a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7fd fee4 	bl	8000e68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030f0:	431a      	orrs	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003104:	ea42 0103 	orr.w	r1, r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	0c1b      	lsrs	r3, r3, #16
 800311e:	f003 0104 	and.w	r1, r3, #4
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	f003 0210 	and.w	r2, r3, #16
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	69da      	ldr	r2, [r3, #28]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003140:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b088      	sub	sp, #32
 800315e:	af00      	add	r7, sp, #0
 8003160:	60f8      	str	r0, [r7, #12]
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	603b      	str	r3, [r7, #0]
 8003166:	4613      	mov	r3, r2
 8003168:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_SPI_Transmit+0x22>
 8003178:	2302      	movs	r3, #2
 800317a:	e126      	b.n	80033ca <HAL_SPI_Transmit+0x270>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003184:	f7fd ffde 	bl	8001144 <HAL_GetTick>
 8003188:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800318a:	88fb      	ldrh	r3, [r7, #6]
 800318c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d002      	beq.n	80031a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800319a:	2302      	movs	r3, #2
 800319c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800319e:	e10b      	b.n	80033b8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <HAL_SPI_Transmit+0x52>
 80031a6:	88fb      	ldrh	r3, [r7, #6]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d102      	bne.n	80031b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80031b0:	e102      	b.n	80033b8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2203      	movs	r2, #3
 80031b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	88fa      	ldrh	r2, [r7, #6]
 80031ca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	88fa      	ldrh	r2, [r7, #6]
 80031d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031f8:	d10f      	bne.n	800321a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003208:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003218:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003224:	2b40      	cmp	r3, #64	; 0x40
 8003226:	d007      	beq.n	8003238 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003236:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003240:	d14b      	bne.n	80032da <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <HAL_SPI_Transmit+0xf6>
 800324a:	8afb      	ldrh	r3, [r7, #22]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d13e      	bne.n	80032ce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003254:	881a      	ldrh	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	1c9a      	adds	r2, r3, #2
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003274:	e02b      	b.n	80032ce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b02      	cmp	r3, #2
 8003282:	d112      	bne.n	80032aa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003288:	881a      	ldrh	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003294:	1c9a      	adds	r2, r3, #2
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800329e:	b29b      	uxth	r3, r3
 80032a0:	3b01      	subs	r3, #1
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80032a8:	e011      	b.n	80032ce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80032aa:	f7fd ff4b 	bl	8001144 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d803      	bhi.n	80032c2 <HAL_SPI_Transmit+0x168>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c0:	d102      	bne.n	80032c8 <HAL_SPI_Transmit+0x16e>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d102      	bne.n	80032ce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80032c8:	2303      	movs	r3, #3
 80032ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80032cc:	e074      	b.n	80033b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1ce      	bne.n	8003276 <HAL_SPI_Transmit+0x11c>
 80032d8:	e04c      	b.n	8003374 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <HAL_SPI_Transmit+0x18e>
 80032e2:	8afb      	ldrh	r3, [r7, #22]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d140      	bne.n	800336a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	330c      	adds	r3, #12
 80032f2:	7812      	ldrb	r2, [r2, #0]
 80032f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	1c5a      	adds	r2, r3, #1
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003304:	b29b      	uxth	r3, r3
 8003306:	3b01      	subs	r3, #1
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800330e:	e02c      	b.n	800336a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b02      	cmp	r3, #2
 800331c:	d113      	bne.n	8003346 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	330c      	adds	r3, #12
 8003328:	7812      	ldrb	r2, [r2, #0]
 800332a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800333a:	b29b      	uxth	r3, r3
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	86da      	strh	r2, [r3, #54]	; 0x36
 8003344:	e011      	b.n	800336a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003346:	f7fd fefd 	bl	8001144 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d803      	bhi.n	800335e <HAL_SPI_Transmit+0x204>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335c:	d102      	bne.n	8003364 <HAL_SPI_Transmit+0x20a>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d102      	bne.n	800336a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003368:	e026      	b.n	80033b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800336e:	b29b      	uxth	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1cd      	bne.n	8003310 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003374:	69ba      	ldr	r2, [r7, #24]
 8003376:	6839      	ldr	r1, [r7, #0]
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 fbcb 	bl	8003b14 <SPI_EndRxTxTransaction>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d002      	beq.n	800338a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2220      	movs	r2, #32
 8003388:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d10a      	bne.n	80033a8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003392:	2300      	movs	r3, #0
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	613b      	str	r3, [r7, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	613b      	str	r3, [r7, #16]
 80033a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d002      	beq.n	80033b6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	77fb      	strb	r3, [r7, #31]
 80033b4:	e000      	b.n	80033b8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80033b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80033c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3720      	adds	r7, #32
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b088      	sub	sp, #32
 80033d6:	af02      	add	r7, sp, #8
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	4613      	mov	r3, r2
 80033e0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80033e2:	2300      	movs	r3, #0
 80033e4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033ee:	d112      	bne.n	8003416 <HAL_SPI_Receive+0x44>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10e      	bne.n	8003416 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2204      	movs	r2, #4
 80033fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003400:	88fa      	ldrh	r2, [r7, #6]
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	4613      	mov	r3, r2
 8003408:	68ba      	ldr	r2, [r7, #8]
 800340a:	68b9      	ldr	r1, [r7, #8]
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 f8f1 	bl	80035f4 <HAL_SPI_TransmitReceive>
 8003412:	4603      	mov	r3, r0
 8003414:	e0ea      	b.n	80035ec <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800341c:	2b01      	cmp	r3, #1
 800341e:	d101      	bne.n	8003424 <HAL_SPI_Receive+0x52>
 8003420:	2302      	movs	r3, #2
 8003422:	e0e3      	b.n	80035ec <HAL_SPI_Receive+0x21a>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800342c:	f7fd fe8a 	bl	8001144 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b01      	cmp	r3, #1
 800343c:	d002      	beq.n	8003444 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800343e:	2302      	movs	r3, #2
 8003440:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003442:	e0ca      	b.n	80035da <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <HAL_SPI_Receive+0x7e>
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d102      	bne.n	8003456 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003454:	e0c1      	b.n	80035da <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2204      	movs	r2, #4
 800345a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	88fa      	ldrh	r2, [r7, #6]
 800346e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	88fa      	ldrh	r2, [r7, #6]
 8003474:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2200      	movs	r2, #0
 800348c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800349c:	d10f      	bne.n	80034be <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c8:	2b40      	cmp	r3, #64	; 0x40
 80034ca:	d007      	beq.n	80034dc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d162      	bne.n	80035aa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80034e4:	e02e      	b.n	8003544 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 0301 	and.w	r3, r3, #1
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d115      	bne.n	8003520 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f103 020c 	add.w	r2, r3, #12
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003500:	7812      	ldrb	r2, [r2, #0]
 8003502:	b2d2      	uxtb	r2, r2
 8003504:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800351e:	e011      	b.n	8003544 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003520:	f7fd fe10 	bl	8001144 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d803      	bhi.n	8003538 <HAL_SPI_Receive+0x166>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003536:	d102      	bne.n	800353e <HAL_SPI_Receive+0x16c>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d102      	bne.n	8003544 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003542:	e04a      	b.n	80035da <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1cb      	bne.n	80034e6 <HAL_SPI_Receive+0x114>
 800354e:	e031      	b.n	80035b4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b01      	cmp	r3, #1
 800355c:	d113      	bne.n	8003586 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003568:	b292      	uxth	r2, r2
 800356a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003570:	1c9a      	adds	r2, r3, #2
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003584:	e011      	b.n	80035aa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003586:	f7fd fddd 	bl	8001144 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d803      	bhi.n	800359e <HAL_SPI_Receive+0x1cc>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359c:	d102      	bne.n	80035a4 <HAL_SPI_Receive+0x1d2>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d102      	bne.n	80035aa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80035a8:	e017      	b.n	80035da <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1cd      	bne.n	8003550 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	6839      	ldr	r1, [r7, #0]
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 fa45 	bl	8003a48 <SPI_EndRxTransaction>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2220      	movs	r2, #32
 80035c8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d002      	beq.n	80035d8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	75fb      	strb	r3, [r7, #23]
 80035d6:	e000      	b.n	80035da <HAL_SPI_Receive+0x208>
  }

error :
 80035d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3718      	adds	r7, #24
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08c      	sub	sp, #48	; 0x30
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003602:	2301      	movs	r3, #1
 8003604:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003612:	2b01      	cmp	r3, #1
 8003614:	d101      	bne.n	800361a <HAL_SPI_TransmitReceive+0x26>
 8003616:	2302      	movs	r3, #2
 8003618:	e18a      	b.n	8003930 <HAL_SPI_TransmitReceive+0x33c>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003622:	f7fd fd8f 	bl	8001144 <HAL_GetTick>
 8003626:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800362e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003638:	887b      	ldrh	r3, [r7, #2]
 800363a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800363c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003640:	2b01      	cmp	r3, #1
 8003642:	d00f      	beq.n	8003664 <HAL_SPI_TransmitReceive+0x70>
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800364a:	d107      	bne.n	800365c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d103      	bne.n	800365c <HAL_SPI_TransmitReceive+0x68>
 8003654:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003658:	2b04      	cmp	r3, #4
 800365a:	d003      	beq.n	8003664 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800365c:	2302      	movs	r3, #2
 800365e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003662:	e15b      	b.n	800391c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d005      	beq.n	8003676 <HAL_SPI_TransmitReceive+0x82>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <HAL_SPI_TransmitReceive+0x82>
 8003670:	887b      	ldrh	r3, [r7, #2]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d103      	bne.n	800367e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800367c:	e14e      	b.n	800391c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b04      	cmp	r3, #4
 8003688:	d003      	beq.n	8003692 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2205      	movs	r2, #5
 800368e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	887a      	ldrh	r2, [r7, #2]
 80036a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	887a      	ldrh	r2, [r7, #2]
 80036a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	887a      	ldrh	r2, [r7, #2]
 80036b4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	887a      	ldrh	r2, [r7, #2]
 80036ba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d2:	2b40      	cmp	r3, #64	; 0x40
 80036d4:	d007      	beq.n	80036e6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ee:	d178      	bne.n	80037e2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d002      	beq.n	80036fe <HAL_SPI_TransmitReceive+0x10a>
 80036f8:	8b7b      	ldrh	r3, [r7, #26]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d166      	bne.n	80037cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	881a      	ldrh	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	1c9a      	adds	r2, r3, #2
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003718:	b29b      	uxth	r3, r3
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003722:	e053      	b.n	80037cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 0302 	and.w	r3, r3, #2
 800372e:	2b02      	cmp	r3, #2
 8003730:	d11b      	bne.n	800376a <HAL_SPI_TransmitReceive+0x176>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003736:	b29b      	uxth	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d016      	beq.n	800376a <HAL_SPI_TransmitReceive+0x176>
 800373c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373e:	2b01      	cmp	r3, #1
 8003740:	d113      	bne.n	800376a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	881a      	ldrh	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	1c9a      	adds	r2, r3, #2
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800375c:	b29b      	uxth	r3, r3
 800375e:	3b01      	subs	r3, #1
 8003760:	b29a      	uxth	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003766:	2300      	movs	r3, #0
 8003768:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b01      	cmp	r3, #1
 8003776:	d119      	bne.n	80037ac <HAL_SPI_TransmitReceive+0x1b8>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d014      	beq.n	80037ac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378c:	b292      	uxth	r2, r2
 800378e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003794:	1c9a      	adds	r2, r3, #2
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800379e:	b29b      	uxth	r3, r3
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037a8:	2301      	movs	r3, #1
 80037aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80037ac:	f7fd fcca 	bl	8001144 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d807      	bhi.n	80037cc <HAL_SPI_TransmitReceive+0x1d8>
 80037bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c2:	d003      	beq.n	80037cc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80037ca:	e0a7      	b.n	800391c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1a6      	bne.n	8003724 <HAL_SPI_TransmitReceive+0x130>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037da:	b29b      	uxth	r3, r3
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1a1      	bne.n	8003724 <HAL_SPI_TransmitReceive+0x130>
 80037e0:	e07c      	b.n	80038dc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <HAL_SPI_TransmitReceive+0x1fc>
 80037ea:	8b7b      	ldrh	r3, [r7, #26]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d16b      	bne.n	80038c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	330c      	adds	r3, #12
 80037fa:	7812      	ldrb	r2, [r2, #0]
 80037fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800380c:	b29b      	uxth	r3, r3
 800380e:	3b01      	subs	r3, #1
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003816:	e057      	b.n	80038c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b02      	cmp	r3, #2
 8003824:	d11c      	bne.n	8003860 <HAL_SPI_TransmitReceive+0x26c>
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800382a:	b29b      	uxth	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d017      	beq.n	8003860 <HAL_SPI_TransmitReceive+0x26c>
 8003830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003832:	2b01      	cmp	r3, #1
 8003834:	d114      	bne.n	8003860 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	330c      	adds	r3, #12
 8003840:	7812      	ldrb	r2, [r2, #0]
 8003842:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003852:	b29b      	uxth	r3, r3
 8003854:	3b01      	subs	r3, #1
 8003856:	b29a      	uxth	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800385c:	2300      	movs	r3, #0
 800385e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b01      	cmp	r3, #1
 800386c:	d119      	bne.n	80038a2 <HAL_SPI_TransmitReceive+0x2ae>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d014      	beq.n	80038a2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68da      	ldr	r2, [r3, #12]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388a:	1c5a      	adds	r2, r3, #1
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003894:	b29b      	uxth	r3, r3
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800389e:	2301      	movs	r3, #1
 80038a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80038a2:	f7fd fc4f 	bl	8001144 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d803      	bhi.n	80038ba <HAL_SPI_TransmitReceive+0x2c6>
 80038b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b8:	d102      	bne.n	80038c0 <HAL_SPI_TransmitReceive+0x2cc>
 80038ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d103      	bne.n	80038c8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80038c6:	e029      	b.n	800391c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1a2      	bne.n	8003818 <HAL_SPI_TransmitReceive+0x224>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d19d      	bne.n	8003818 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 f917 	bl	8003b14 <SPI_EndRxTxTransaction>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d006      	beq.n	80038fa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2220      	movs	r2, #32
 80038f6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80038f8:	e010      	b.n	800391c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10b      	bne.n	800391a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003902:	2300      	movs	r3, #0
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	e000      	b.n	800391c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800391a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800392c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003930:	4618      	mov	r0, r3
 8003932:	3730      	adds	r7, #48	; 0x30
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b088      	sub	sp, #32
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	4613      	mov	r3, r2
 8003946:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003948:	f7fd fbfc 	bl	8001144 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003950:	1a9b      	subs	r3, r3, r2
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	4413      	add	r3, r2
 8003956:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003958:	f7fd fbf4 	bl	8001144 <HAL_GetTick>
 800395c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800395e:	4b39      	ldr	r3, [pc, #228]	; (8003a44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	015b      	lsls	r3, r3, #5
 8003964:	0d1b      	lsrs	r3, r3, #20
 8003966:	69fa      	ldr	r2, [r7, #28]
 8003968:	fb02 f303 	mul.w	r3, r2, r3
 800396c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800396e:	e054      	b.n	8003a1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003976:	d050      	beq.n	8003a1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003978:	f7fd fbe4 	bl	8001144 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	69fa      	ldr	r2, [r7, #28]
 8003984:	429a      	cmp	r2, r3
 8003986:	d902      	bls.n	800398e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d13d      	bne.n	8003a0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800399c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039a6:	d111      	bne.n	80039cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039b0:	d004      	beq.n	80039bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ba:	d107      	bne.n	80039cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039d4:	d10f      	bne.n	80039f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e017      	b.n	8003a3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d101      	bne.n	8003a14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	3b01      	subs	r3, #1
 8003a18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	4013      	ands	r3, r2
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	bf0c      	ite	eq
 8003a2a:	2301      	moveq	r3, #1
 8003a2c:	2300      	movne	r3, #0
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	461a      	mov	r2, r3
 8003a32:	79fb      	ldrb	r3, [r7, #7]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d19b      	bne.n	8003970 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3720      	adds	r7, #32
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	20000008 	.word	0x20000008

08003a48 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a5c:	d111      	bne.n	8003a82 <SPI_EndRxTransaction+0x3a>
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a66:	d004      	beq.n	8003a72 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a70:	d107      	bne.n	8003a82 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a80:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a8a:	d12a      	bne.n	8003ae2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a94:	d012      	beq.n	8003abc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2180      	movs	r1, #128	; 0x80
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f7ff ff49 	bl	8003938 <SPI_WaitFlagStateUntilTimeout>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d02d      	beq.n	8003b08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ab0:	f043 0220 	orr.w	r2, r3, #32
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e026      	b.n	8003b0a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f7ff ff36 	bl	8003938 <SPI_WaitFlagStateUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d01a      	beq.n	8003b08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad6:	f043 0220 	orr.w	r2, r3, #32
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e013      	b.n	8003b0a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	2101      	movs	r1, #1
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f7ff ff23 	bl	8003938 <SPI_WaitFlagStateUntilTimeout>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d007      	beq.n	8003b08 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003afc:	f043 0220 	orr.w	r2, r3, #32
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e000      	b.n	8003b0a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b088      	sub	sp, #32
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b20:	4b1b      	ldr	r3, [pc, #108]	; (8003b90 <SPI_EndRxTxTransaction+0x7c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a1b      	ldr	r2, [pc, #108]	; (8003b94 <SPI_EndRxTxTransaction+0x80>)
 8003b26:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2a:	0d5b      	lsrs	r3, r3, #21
 8003b2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b30:	fb02 f303 	mul.w	r3, r2, r3
 8003b34:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b3e:	d112      	bne.n	8003b66 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2200      	movs	r2, #0
 8003b48:	2180      	movs	r1, #128	; 0x80
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f7ff fef4 	bl	8003938 <SPI_WaitFlagStateUntilTimeout>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d016      	beq.n	8003b84 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5a:	f043 0220 	orr.w	r2, r3, #32
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e00f      	b.n	8003b86 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7c:	2b80      	cmp	r3, #128	; 0x80
 8003b7e:	d0f2      	beq.n	8003b66 <SPI_EndRxTxTransaction+0x52>
 8003b80:	e000      	b.n	8003b84 <SPI_EndRxTxTransaction+0x70>
        break;
 8003b82:	bf00      	nop
  }

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	20000008 	.word	0x20000008
 8003b94:	165e9f81 	.word	0x165e9f81

08003b98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e03f      	b.n	8003c2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7fd f99a 	bl	8000ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2224      	movs	r2, #36	; 0x24
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 fcbf 	bl	8004560 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695a      	ldr	r2, [r3, #20]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b085      	sub	sp, #20
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d130      	bne.n	8003cae <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <HAL_UART_Transmit_IT+0x26>
 8003c52:	88fb      	ldrh	r3, [r7, #6]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d101      	bne.n	8003c5c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e029      	b.n	8003cb0 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <HAL_UART_Transmit_IT+0x38>
 8003c66:	2302      	movs	r3, #2
 8003c68:	e022      	b.n	8003cb0 <HAL_UART_Transmit_IT+0x7e>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	68ba      	ldr	r2, [r7, #8]
 8003c76:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	88fa      	ldrh	r2, [r7, #6]
 8003c7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	88fa      	ldrh	r2, [r7, #6]
 8003c82:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2221      	movs	r2, #33	; 0x21
 8003c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ca8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	e000      	b.n	8003cb0 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003cae:	2302      	movs	r3, #2
  }
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b0ba      	sub	sp, #232	; 0xe8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf2:	f003 030f 	and.w	r3, r3, #15
 8003cf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003cfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10f      	bne.n	8003d22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d06:	f003 0320 	and.w	r3, r3, #32
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d009      	beq.n	8003d22 <HAL_UART_IRQHandler+0x66>
 8003d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d12:	f003 0320 	and.w	r3, r3, #32
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 fb65 	bl	80043ea <UART_Receive_IT>
      return;
 8003d20:	e256      	b.n	80041d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 80de 	beq.w	8003ee8 <HAL_UART_IRQHandler+0x22c>
 8003d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d106      	bne.n	8003d46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 80d1 	beq.w	8003ee8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00b      	beq.n	8003d6a <HAL_UART_IRQHandler+0xae>
 8003d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d005      	beq.n	8003d6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	f043 0201 	orr.w	r2, r3, #1
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d6e:	f003 0304 	and.w	r3, r3, #4
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00b      	beq.n	8003d8e <HAL_UART_IRQHandler+0xd2>
 8003d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d005      	beq.n	8003d8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	f043 0202 	orr.w	r2, r3, #2
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00b      	beq.n	8003db2 <HAL_UART_IRQHandler+0xf6>
 8003d9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d005      	beq.n	8003db2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f043 0204 	orr.w	r2, r3, #4
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d011      	beq.n	8003de2 <HAL_UART_IRQHandler+0x126>
 8003dbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dc2:	f003 0320 	and.w	r3, r3, #32
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d105      	bne.n	8003dd6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003dca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d005      	beq.n	8003de2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f043 0208 	orr.w	r2, r3, #8
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 81ed 	beq.w	80041c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003df0:	f003 0320 	and.w	r3, r3, #32
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <HAL_UART_IRQHandler+0x14e>
 8003df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dfc:	f003 0320 	and.w	r3, r3, #32
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 faf0 	bl	80043ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e14:	2b40      	cmp	r3, #64	; 0x40
 8003e16:	bf0c      	ite	eq
 8003e18:	2301      	moveq	r3, #1
 8003e1a:	2300      	movne	r3, #0
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d103      	bne.n	8003e36 <HAL_UART_IRQHandler+0x17a>
 8003e2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d04f      	beq.n	8003ed6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f9f8 	bl	800422c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e46:	2b40      	cmp	r3, #64	; 0x40
 8003e48:	d141      	bne.n	8003ece <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	3314      	adds	r3, #20
 8003e50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e58:	e853 3f00 	ldrex	r3, [r3]
 8003e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3314      	adds	r3, #20
 8003e72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e86:	e841 2300 	strex	r3, r2, [r1]
 8003e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1d9      	bne.n	8003e4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d013      	beq.n	8003ec6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	4a7d      	ldr	r2, [pc, #500]	; (8004098 <HAL_UART_IRQHandler+0x3dc>)
 8003ea4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fd fafb 	bl	80014a6 <HAL_DMA_Abort_IT>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d016      	beq.n	8003ee4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec4:	e00e      	b.n	8003ee4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f99a 	bl	8004200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ecc:	e00a      	b.n	8003ee4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f996 	bl	8004200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed4:	e006      	b.n	8003ee4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f992 	bl	8004200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003ee2:	e170      	b.n	80041c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee4:	bf00      	nop
    return;
 8003ee6:	e16e      	b.n	80041c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	f040 814a 	bne.w	8004186 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ef6:	f003 0310 	and.w	r3, r3, #16
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f000 8143 	beq.w	8004186 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f04:	f003 0310 	and.w	r3, r3, #16
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 813c 	beq.w	8004186 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f0e:	2300      	movs	r3, #0
 8003f10:	60bb      	str	r3, [r7, #8]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	60bb      	str	r3, [r7, #8]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	60bb      	str	r3, [r7, #8]
 8003f22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2e:	2b40      	cmp	r3, #64	; 0x40
 8003f30:	f040 80b4 	bne.w	800409c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 8140 	beq.w	80041ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f52:	429a      	cmp	r2, r3
 8003f54:	f080 8139 	bcs.w	80041ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f6a:	f000 8088 	beq.w	800407e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	330c      	adds	r3, #12
 8003f74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f7c:	e853 3f00 	ldrex	r3, [r3]
 8003f80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	330c      	adds	r3, #12
 8003f96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003f9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003fa6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003faa:	e841 2300 	strex	r3, r2, [r1]
 8003fae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1d9      	bne.n	8003f6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3314      	adds	r3, #20
 8003fc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fc4:	e853 3f00 	ldrex	r3, [r3]
 8003fc8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003fca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fcc:	f023 0301 	bic.w	r3, r3, #1
 8003fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3314      	adds	r3, #20
 8003fda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fde:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003fe2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003fe6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003fea:	e841 2300 	strex	r3, r2, [r1]
 8003fee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ff0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1e1      	bne.n	8003fba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3314      	adds	r3, #20
 8003ffc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004000:	e853 3f00 	ldrex	r3, [r3]
 8004004:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800400c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	3314      	adds	r3, #20
 8004016:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800401a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800401c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004020:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004022:	e841 2300 	strex	r3, r2, [r1]
 8004026:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004028:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1e3      	bne.n	8003ff6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	330c      	adds	r3, #12
 8004042:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004046:	e853 3f00 	ldrex	r3, [r3]
 800404a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800404c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800404e:	f023 0310 	bic.w	r3, r3, #16
 8004052:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	330c      	adds	r3, #12
 800405c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004060:	65ba      	str	r2, [r7, #88]	; 0x58
 8004062:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004064:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004066:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004068:	e841 2300 	strex	r3, r2, [r1]
 800406c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800406e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1e3      	bne.n	800403c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004078:	4618      	mov	r0, r3
 800407a:	f7fd f9a4 	bl	80013c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004086:	b29b      	uxth	r3, r3
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	b29b      	uxth	r3, r3
 800408c:	4619      	mov	r1, r3
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f8c0 	bl	8004214 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004094:	e099      	b.n	80041ca <HAL_UART_IRQHandler+0x50e>
 8004096:	bf00      	nop
 8004098:	080042f3 	.word	0x080042f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f000 808b 	beq.w	80041ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80040b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 8086 	beq.w	80041ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	330c      	adds	r3, #12
 80040c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040cc:	e853 3f00 	ldrex	r3, [r3]
 80040d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	330c      	adds	r3, #12
 80040e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80040e6:	647a      	str	r2, [r7, #68]	; 0x44
 80040e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040ee:	e841 2300 	strex	r3, r2, [r1]
 80040f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1e3      	bne.n	80040c2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	3314      	adds	r3, #20
 8004100:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	e853 3f00 	ldrex	r3, [r3]
 8004108:	623b      	str	r3, [r7, #32]
   return(result);
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	f023 0301 	bic.w	r3, r3, #1
 8004110:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3314      	adds	r3, #20
 800411a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800411e:	633a      	str	r2, [r7, #48]	; 0x30
 8004120:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004122:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004126:	e841 2300 	strex	r3, r2, [r1]
 800412a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800412c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1e3      	bne.n	80040fa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2220      	movs	r2, #32
 8004136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	330c      	adds	r3, #12
 8004146:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	e853 3f00 	ldrex	r3, [r3]
 800414e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f023 0310 	bic.w	r3, r3, #16
 8004156:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	330c      	adds	r3, #12
 8004160:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004164:	61fa      	str	r2, [r7, #28]
 8004166:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004168:	69b9      	ldr	r1, [r7, #24]
 800416a:	69fa      	ldr	r2, [r7, #28]
 800416c:	e841 2300 	strex	r3, r2, [r1]
 8004170:	617b      	str	r3, [r7, #20]
   return(result);
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1e3      	bne.n	8004140 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004178:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800417c:	4619      	mov	r1, r3
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f848 	bl	8004214 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004184:	e023      	b.n	80041ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800418a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418e:	2b00      	cmp	r3, #0
 8004190:	d009      	beq.n	80041a6 <HAL_UART_IRQHandler+0x4ea>
 8004192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f8bb 	bl	800431a <UART_Transmit_IT>
    return;
 80041a4:	e014      	b.n	80041d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00e      	beq.n	80041d0 <HAL_UART_IRQHandler+0x514>
 80041b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d008      	beq.n	80041d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f8fb 	bl	80043ba <UART_EndTransmit_IT>
    return;
 80041c4:	e004      	b.n	80041d0 <HAL_UART_IRQHandler+0x514>
    return;
 80041c6:	bf00      	nop
 80041c8:	e002      	b.n	80041d0 <HAL_UART_IRQHandler+0x514>
      return;
 80041ca:	bf00      	nop
 80041cc:	e000      	b.n	80041d0 <HAL_UART_IRQHandler+0x514>
      return;
 80041ce:	bf00      	nop
  }
}
 80041d0:	37e8      	adds	r7, #232	; 0xe8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop

080041d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	460b      	mov	r3, r1
 800421e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800422c:	b480      	push	{r7}
 800422e:	b095      	sub	sp, #84	; 0x54
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	330c      	adds	r3, #12
 800423a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800423e:	e853 3f00 	ldrex	r3, [r3]
 8004242:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004246:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800424a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	330c      	adds	r3, #12
 8004252:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004254:	643a      	str	r2, [r7, #64]	; 0x40
 8004256:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004258:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800425a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800425c:	e841 2300 	strex	r3, r2, [r1]
 8004260:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1e5      	bne.n	8004234 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	3314      	adds	r3, #20
 800426e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	e853 3f00 	ldrex	r3, [r3]
 8004276:	61fb      	str	r3, [r7, #28]
   return(result);
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f023 0301 	bic.w	r3, r3, #1
 800427e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3314      	adds	r3, #20
 8004286:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004288:	62fa      	str	r2, [r7, #44]	; 0x2c
 800428a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800428e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004290:	e841 2300 	strex	r3, r2, [r1]
 8004294:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1e5      	bne.n	8004268 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d119      	bne.n	80042d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	330c      	adds	r3, #12
 80042aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	e853 3f00 	ldrex	r3, [r3]
 80042b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f023 0310 	bic.w	r3, r3, #16
 80042ba:	647b      	str	r3, [r7, #68]	; 0x44
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	330c      	adds	r3, #12
 80042c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042c4:	61ba      	str	r2, [r7, #24]
 80042c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c8:	6979      	ldr	r1, [r7, #20]
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	e841 2300 	strex	r3, r2, [r1]
 80042d0:	613b      	str	r3, [r7, #16]
   return(result);
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1e5      	bne.n	80042a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80042e6:	bf00      	nop
 80042e8:	3754      	adds	r7, #84	; 0x54
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f7ff ff77 	bl	8004200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004312:	bf00      	nop
 8004314:	3710      	adds	r7, #16
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800431a:	b480      	push	{r7}
 800431c:	b085      	sub	sp, #20
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b21      	cmp	r3, #33	; 0x21
 800432c:	d13e      	bne.n	80043ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004336:	d114      	bne.n	8004362 <UART_Transmit_IT+0x48>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d110      	bne.n	8004362 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	881b      	ldrh	r3, [r3, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004354:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	1c9a      	adds	r2, r3, #2
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	621a      	str	r2, [r3, #32]
 8004360:	e008      	b.n	8004374 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	1c59      	adds	r1, r3, #1
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6211      	str	r1, [r2, #32]
 800436c:	781a      	ldrb	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004378:	b29b      	uxth	r3, r3
 800437a:	3b01      	subs	r3, #1
 800437c:	b29b      	uxth	r3, r3
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	4619      	mov	r1, r3
 8004382:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10f      	bne.n	80043a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68da      	ldr	r2, [r3, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004396:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	e000      	b.n	80043ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043ac:	2302      	movs	r3, #2
  }
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3714      	adds	r7, #20
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b082      	sub	sp, #8
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7ff fefc 	bl	80041d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b08c      	sub	sp, #48	; 0x30
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b22      	cmp	r3, #34	; 0x22
 80043fc:	f040 80ab 	bne.w	8004556 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004408:	d117      	bne.n	800443a <UART_Receive_IT+0x50>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d113      	bne.n	800443a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004412:	2300      	movs	r3, #0
 8004414:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	b29b      	uxth	r3, r3
 8004424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004428:	b29a      	uxth	r2, r3
 800442a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004432:	1c9a      	adds	r2, r3, #2
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	629a      	str	r2, [r3, #40]	; 0x28
 8004438:	e026      	b.n	8004488 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004440:	2300      	movs	r3, #0
 8004442:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800444c:	d007      	beq.n	800445e <UART_Receive_IT+0x74>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10a      	bne.n	800446c <UART_Receive_IT+0x82>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d106      	bne.n	800446c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	b2da      	uxtb	r2, r3
 8004466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004468:	701a      	strb	r2, [r3, #0]
 800446a:	e008      	b.n	800447e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	b2db      	uxtb	r3, r3
 8004474:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004478:	b2da      	uxtb	r2, r3
 800447a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004482:	1c5a      	adds	r2, r3, #1
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800448c:	b29b      	uxth	r3, r3
 800448e:	3b01      	subs	r3, #1
 8004490:	b29b      	uxth	r3, r3
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	4619      	mov	r1, r3
 8004496:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004498:	2b00      	cmp	r3, #0
 800449a:	d15a      	bne.n	8004552 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0220 	bic.w	r2, r2, #32
 80044aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695a      	ldr	r2, [r3, #20]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0201 	bic.w	r2, r2, #1
 80044ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d135      	bne.n	8004548 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	330c      	adds	r3, #12
 80044e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	e853 3f00 	ldrex	r3, [r3]
 80044f0:	613b      	str	r3, [r7, #16]
   return(result);
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	f023 0310 	bic.w	r3, r3, #16
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	330c      	adds	r3, #12
 8004500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004502:	623a      	str	r2, [r7, #32]
 8004504:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004506:	69f9      	ldr	r1, [r7, #28]
 8004508:	6a3a      	ldr	r2, [r7, #32]
 800450a:	e841 2300 	strex	r3, r2, [r1]
 800450e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1e5      	bne.n	80044e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2b10      	cmp	r3, #16
 8004522:	d10a      	bne.n	800453a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004524:	2300      	movs	r3, #0
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	60fb      	str	r3, [r7, #12]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	60fb      	str	r3, [r7, #12]
 8004538:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800453e:	4619      	mov	r1, r3
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7ff fe67 	bl	8004214 <HAL_UARTEx_RxEventCallback>
 8004546:	e002      	b.n	800454e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7ff fe4f 	bl	80041ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800454e:	2300      	movs	r3, #0
 8004550:	e002      	b.n	8004558 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	e000      	b.n	8004558 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004556:	2302      	movs	r3, #2
  }
}
 8004558:	4618      	mov	r0, r3
 800455a:	3730      	adds	r7, #48	; 0x30
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004564:	b0c0      	sub	sp, #256	; 0x100
 8004566:	af00      	add	r7, sp, #0
 8004568:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800456c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457c:	68d9      	ldr	r1, [r3, #12]
 800457e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	ea40 0301 	orr.w	r3, r0, r1
 8004588:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800458a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	431a      	orrs	r2, r3
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	431a      	orrs	r2, r3
 80045a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045b8:	f021 010c 	bic.w	r1, r1, #12
 80045bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045c6:	430b      	orrs	r3, r1
 80045c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045da:	6999      	ldr	r1, [r3, #24]
 80045dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	ea40 0301 	orr.w	r3, r0, r1
 80045e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	4b8f      	ldr	r3, [pc, #572]	; (800482c <UART_SetConfig+0x2cc>)
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d005      	beq.n	8004600 <UART_SetConfig+0xa0>
 80045f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	4b8d      	ldr	r3, [pc, #564]	; (8004830 <UART_SetConfig+0x2d0>)
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d104      	bne.n	800460a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004600:	f7fd fd86 	bl	8002110 <HAL_RCC_GetPCLK2Freq>
 8004604:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004608:	e003      	b.n	8004612 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800460a:	f7fd fd6d 	bl	80020e8 <HAL_RCC_GetPCLK1Freq>
 800460e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004616:	69db      	ldr	r3, [r3, #28]
 8004618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800461c:	f040 810c 	bne.w	8004838 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004624:	2200      	movs	r2, #0
 8004626:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800462a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800462e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004632:	4622      	mov	r2, r4
 8004634:	462b      	mov	r3, r5
 8004636:	1891      	adds	r1, r2, r2
 8004638:	65b9      	str	r1, [r7, #88]	; 0x58
 800463a:	415b      	adcs	r3, r3
 800463c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800463e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004642:	4621      	mov	r1, r4
 8004644:	eb12 0801 	adds.w	r8, r2, r1
 8004648:	4629      	mov	r1, r5
 800464a:	eb43 0901 	adc.w	r9, r3, r1
 800464e:	f04f 0200 	mov.w	r2, #0
 8004652:	f04f 0300 	mov.w	r3, #0
 8004656:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800465a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800465e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004662:	4690      	mov	r8, r2
 8004664:	4699      	mov	r9, r3
 8004666:	4623      	mov	r3, r4
 8004668:	eb18 0303 	adds.w	r3, r8, r3
 800466c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004670:	462b      	mov	r3, r5
 8004672:	eb49 0303 	adc.w	r3, r9, r3
 8004676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800467a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004686:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800468a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800468e:	460b      	mov	r3, r1
 8004690:	18db      	adds	r3, r3, r3
 8004692:	653b      	str	r3, [r7, #80]	; 0x50
 8004694:	4613      	mov	r3, r2
 8004696:	eb42 0303 	adc.w	r3, r2, r3
 800469a:	657b      	str	r3, [r7, #84]	; 0x54
 800469c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80046a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80046a4:	f7fb fd90 	bl	80001c8 <__aeabi_uldivmod>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4b61      	ldr	r3, [pc, #388]	; (8004834 <UART_SetConfig+0x2d4>)
 80046ae:	fba3 2302 	umull	r2, r3, r3, r2
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	011c      	lsls	r4, r3, #4
 80046b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80046c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80046c8:	4642      	mov	r2, r8
 80046ca:	464b      	mov	r3, r9
 80046cc:	1891      	adds	r1, r2, r2
 80046ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80046d0:	415b      	adcs	r3, r3
 80046d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046d8:	4641      	mov	r1, r8
 80046da:	eb12 0a01 	adds.w	sl, r2, r1
 80046de:	4649      	mov	r1, r9
 80046e0:	eb43 0b01 	adc.w	fp, r3, r1
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	f04f 0300 	mov.w	r3, #0
 80046ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046f8:	4692      	mov	sl, r2
 80046fa:	469b      	mov	fp, r3
 80046fc:	4643      	mov	r3, r8
 80046fe:	eb1a 0303 	adds.w	r3, sl, r3
 8004702:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004706:	464b      	mov	r3, r9
 8004708:	eb4b 0303 	adc.w	r3, fp, r3
 800470c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800471c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004720:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004724:	460b      	mov	r3, r1
 8004726:	18db      	adds	r3, r3, r3
 8004728:	643b      	str	r3, [r7, #64]	; 0x40
 800472a:	4613      	mov	r3, r2
 800472c:	eb42 0303 	adc.w	r3, r2, r3
 8004730:	647b      	str	r3, [r7, #68]	; 0x44
 8004732:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004736:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800473a:	f7fb fd45 	bl	80001c8 <__aeabi_uldivmod>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4611      	mov	r1, r2
 8004744:	4b3b      	ldr	r3, [pc, #236]	; (8004834 <UART_SetConfig+0x2d4>)
 8004746:	fba3 2301 	umull	r2, r3, r3, r1
 800474a:	095b      	lsrs	r3, r3, #5
 800474c:	2264      	movs	r2, #100	; 0x64
 800474e:	fb02 f303 	mul.w	r3, r2, r3
 8004752:	1acb      	subs	r3, r1, r3
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800475a:	4b36      	ldr	r3, [pc, #216]	; (8004834 <UART_SetConfig+0x2d4>)
 800475c:	fba3 2302 	umull	r2, r3, r3, r2
 8004760:	095b      	lsrs	r3, r3, #5
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004768:	441c      	add	r4, r3
 800476a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800476e:	2200      	movs	r2, #0
 8004770:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004774:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004778:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800477c:	4642      	mov	r2, r8
 800477e:	464b      	mov	r3, r9
 8004780:	1891      	adds	r1, r2, r2
 8004782:	63b9      	str	r1, [r7, #56]	; 0x38
 8004784:	415b      	adcs	r3, r3
 8004786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004788:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800478c:	4641      	mov	r1, r8
 800478e:	1851      	adds	r1, r2, r1
 8004790:	6339      	str	r1, [r7, #48]	; 0x30
 8004792:	4649      	mov	r1, r9
 8004794:	414b      	adcs	r3, r1
 8004796:	637b      	str	r3, [r7, #52]	; 0x34
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80047a4:	4659      	mov	r1, fp
 80047a6:	00cb      	lsls	r3, r1, #3
 80047a8:	4651      	mov	r1, sl
 80047aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ae:	4651      	mov	r1, sl
 80047b0:	00ca      	lsls	r2, r1, #3
 80047b2:	4610      	mov	r0, r2
 80047b4:	4619      	mov	r1, r3
 80047b6:	4603      	mov	r3, r0
 80047b8:	4642      	mov	r2, r8
 80047ba:	189b      	adds	r3, r3, r2
 80047bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047c0:	464b      	mov	r3, r9
 80047c2:	460a      	mov	r2, r1
 80047c4:	eb42 0303 	adc.w	r3, r2, r3
 80047c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80047d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80047e0:	460b      	mov	r3, r1
 80047e2:	18db      	adds	r3, r3, r3
 80047e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80047e6:	4613      	mov	r3, r2
 80047e8:	eb42 0303 	adc.w	r3, r2, r3
 80047ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80047f6:	f7fb fce7 	bl	80001c8 <__aeabi_uldivmod>
 80047fa:	4602      	mov	r2, r0
 80047fc:	460b      	mov	r3, r1
 80047fe:	4b0d      	ldr	r3, [pc, #52]	; (8004834 <UART_SetConfig+0x2d4>)
 8004800:	fba3 1302 	umull	r1, r3, r3, r2
 8004804:	095b      	lsrs	r3, r3, #5
 8004806:	2164      	movs	r1, #100	; 0x64
 8004808:	fb01 f303 	mul.w	r3, r1, r3
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	3332      	adds	r3, #50	; 0x32
 8004812:	4a08      	ldr	r2, [pc, #32]	; (8004834 <UART_SetConfig+0x2d4>)
 8004814:	fba2 2303 	umull	r2, r3, r2, r3
 8004818:	095b      	lsrs	r3, r3, #5
 800481a:	f003 0207 	and.w	r2, r3, #7
 800481e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4422      	add	r2, r4
 8004826:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004828:	e105      	b.n	8004a36 <UART_SetConfig+0x4d6>
 800482a:	bf00      	nop
 800482c:	40011000 	.word	0x40011000
 8004830:	40011400 	.word	0x40011400
 8004834:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004838:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800483c:	2200      	movs	r2, #0
 800483e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004842:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004846:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800484a:	4642      	mov	r2, r8
 800484c:	464b      	mov	r3, r9
 800484e:	1891      	adds	r1, r2, r2
 8004850:	6239      	str	r1, [r7, #32]
 8004852:	415b      	adcs	r3, r3
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
 8004856:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800485a:	4641      	mov	r1, r8
 800485c:	1854      	adds	r4, r2, r1
 800485e:	4649      	mov	r1, r9
 8004860:	eb43 0501 	adc.w	r5, r3, r1
 8004864:	f04f 0200 	mov.w	r2, #0
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	00eb      	lsls	r3, r5, #3
 800486e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004872:	00e2      	lsls	r2, r4, #3
 8004874:	4614      	mov	r4, r2
 8004876:	461d      	mov	r5, r3
 8004878:	4643      	mov	r3, r8
 800487a:	18e3      	adds	r3, r4, r3
 800487c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004880:	464b      	mov	r3, r9
 8004882:	eb45 0303 	adc.w	r3, r5, r3
 8004886:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800488a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004896:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80048a6:	4629      	mov	r1, r5
 80048a8:	008b      	lsls	r3, r1, #2
 80048aa:	4621      	mov	r1, r4
 80048ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048b0:	4621      	mov	r1, r4
 80048b2:	008a      	lsls	r2, r1, #2
 80048b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80048b8:	f7fb fc86 	bl	80001c8 <__aeabi_uldivmod>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	4b60      	ldr	r3, [pc, #384]	; (8004a44 <UART_SetConfig+0x4e4>)
 80048c2:	fba3 2302 	umull	r2, r3, r3, r2
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	011c      	lsls	r4, r3, #4
 80048ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ce:	2200      	movs	r2, #0
 80048d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80048dc:	4642      	mov	r2, r8
 80048de:	464b      	mov	r3, r9
 80048e0:	1891      	adds	r1, r2, r2
 80048e2:	61b9      	str	r1, [r7, #24]
 80048e4:	415b      	adcs	r3, r3
 80048e6:	61fb      	str	r3, [r7, #28]
 80048e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048ec:	4641      	mov	r1, r8
 80048ee:	1851      	adds	r1, r2, r1
 80048f0:	6139      	str	r1, [r7, #16]
 80048f2:	4649      	mov	r1, r9
 80048f4:	414b      	adcs	r3, r1
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	f04f 0300 	mov.w	r3, #0
 8004900:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004904:	4659      	mov	r1, fp
 8004906:	00cb      	lsls	r3, r1, #3
 8004908:	4651      	mov	r1, sl
 800490a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800490e:	4651      	mov	r1, sl
 8004910:	00ca      	lsls	r2, r1, #3
 8004912:	4610      	mov	r0, r2
 8004914:	4619      	mov	r1, r3
 8004916:	4603      	mov	r3, r0
 8004918:	4642      	mov	r2, r8
 800491a:	189b      	adds	r3, r3, r2
 800491c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004920:	464b      	mov	r3, r9
 8004922:	460a      	mov	r2, r1
 8004924:	eb42 0303 	adc.w	r3, r2, r3
 8004928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800492c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	67bb      	str	r3, [r7, #120]	; 0x78
 8004936:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004938:	f04f 0200 	mov.w	r2, #0
 800493c:	f04f 0300 	mov.w	r3, #0
 8004940:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004944:	4649      	mov	r1, r9
 8004946:	008b      	lsls	r3, r1, #2
 8004948:	4641      	mov	r1, r8
 800494a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800494e:	4641      	mov	r1, r8
 8004950:	008a      	lsls	r2, r1, #2
 8004952:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004956:	f7fb fc37 	bl	80001c8 <__aeabi_uldivmod>
 800495a:	4602      	mov	r2, r0
 800495c:	460b      	mov	r3, r1
 800495e:	4b39      	ldr	r3, [pc, #228]	; (8004a44 <UART_SetConfig+0x4e4>)
 8004960:	fba3 1302 	umull	r1, r3, r3, r2
 8004964:	095b      	lsrs	r3, r3, #5
 8004966:	2164      	movs	r1, #100	; 0x64
 8004968:	fb01 f303 	mul.w	r3, r1, r3
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	011b      	lsls	r3, r3, #4
 8004970:	3332      	adds	r3, #50	; 0x32
 8004972:	4a34      	ldr	r2, [pc, #208]	; (8004a44 <UART_SetConfig+0x4e4>)
 8004974:	fba2 2303 	umull	r2, r3, r2, r3
 8004978:	095b      	lsrs	r3, r3, #5
 800497a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800497e:	441c      	add	r4, r3
 8004980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004984:	2200      	movs	r2, #0
 8004986:	673b      	str	r3, [r7, #112]	; 0x70
 8004988:	677a      	str	r2, [r7, #116]	; 0x74
 800498a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800498e:	4642      	mov	r2, r8
 8004990:	464b      	mov	r3, r9
 8004992:	1891      	adds	r1, r2, r2
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	415b      	adcs	r3, r3
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800499e:	4641      	mov	r1, r8
 80049a0:	1851      	adds	r1, r2, r1
 80049a2:	6039      	str	r1, [r7, #0]
 80049a4:	4649      	mov	r1, r9
 80049a6:	414b      	adcs	r3, r1
 80049a8:	607b      	str	r3, [r7, #4]
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	f04f 0300 	mov.w	r3, #0
 80049b2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049b6:	4659      	mov	r1, fp
 80049b8:	00cb      	lsls	r3, r1, #3
 80049ba:	4651      	mov	r1, sl
 80049bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049c0:	4651      	mov	r1, sl
 80049c2:	00ca      	lsls	r2, r1, #3
 80049c4:	4610      	mov	r0, r2
 80049c6:	4619      	mov	r1, r3
 80049c8:	4603      	mov	r3, r0
 80049ca:	4642      	mov	r2, r8
 80049cc:	189b      	adds	r3, r3, r2
 80049ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80049d0:	464b      	mov	r3, r9
 80049d2:	460a      	mov	r2, r1
 80049d4:	eb42 0303 	adc.w	r3, r2, r3
 80049d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	663b      	str	r3, [r7, #96]	; 0x60
 80049e4:	667a      	str	r2, [r7, #100]	; 0x64
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	f04f 0300 	mov.w	r3, #0
 80049ee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80049f2:	4649      	mov	r1, r9
 80049f4:	008b      	lsls	r3, r1, #2
 80049f6:	4641      	mov	r1, r8
 80049f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049fc:	4641      	mov	r1, r8
 80049fe:	008a      	lsls	r2, r1, #2
 8004a00:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004a04:	f7fb fbe0 	bl	80001c8 <__aeabi_uldivmod>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <UART_SetConfig+0x4e4>)
 8004a0e:	fba3 1302 	umull	r1, r3, r3, r2
 8004a12:	095b      	lsrs	r3, r3, #5
 8004a14:	2164      	movs	r1, #100	; 0x64
 8004a16:	fb01 f303 	mul.w	r3, r1, r3
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	011b      	lsls	r3, r3, #4
 8004a1e:	3332      	adds	r3, #50	; 0x32
 8004a20:	4a08      	ldr	r2, [pc, #32]	; (8004a44 <UART_SetConfig+0x4e4>)
 8004a22:	fba2 2303 	umull	r2, r3, r2, r3
 8004a26:	095b      	lsrs	r3, r3, #5
 8004a28:	f003 020f 	and.w	r2, r3, #15
 8004a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4422      	add	r2, r4
 8004a34:	609a      	str	r2, [r3, #8]
}
 8004a36:	bf00      	nop
 8004a38:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a42:	bf00      	nop
 8004a44:	51eb851f 	.word	0x51eb851f

08004a48 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004a48:	b084      	sub	sp, #16
 8004a4a:	b480      	push	{r7}
 8004a4c:	b085      	sub	sp, #20
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	6078      	str	r0, [r7, #4]
 8004a52:	f107 001c 	add.w	r0, r7, #28
 8004a56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004a5e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004a60:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004a62:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004a66:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004a6a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004a6e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004a72:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004a74:	68fa      	ldr	r2, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004a82:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3714      	adds	r7, #20
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	b004      	add	sp, #16
 8004a9c:	4770      	bx	lr

08004a9e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2203      	movs	r2, #3
 8004ae6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004af6:	b480      	push	{r7}
 8004af8:	b083      	sub	sp, #12
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0303 	and.w	r3, r3, #3
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b085      	sub	sp, #20
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004b30:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004b36:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004b3c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004b4c:	f023 030f 	bic.w	r3, r3, #15
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	b2db      	uxtb	r3, r3
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3314      	adds	r3, #20
 8004b8e:	461a      	mov	r2, r3
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	4413      	add	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
}  
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b085      	sub	sp, #20
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004bcc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004bd2:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004bd8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be4:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004bf0:	2300      	movs	r3, #0

}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b088      	sub	sp, #32
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
 8004c06:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004c0c:	2310      	movs	r3, #16
 8004c0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c10:	2340      	movs	r3, #64	; 0x40
 8004c12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c14:	2300      	movs	r3, #0
 8004c16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c1e:	f107 0308 	add.w	r3, r7, #8
 8004c22:	4619      	mov	r1, r3
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f7ff ff74 	bl	8004b12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c2e:	2110      	movs	r1, #16
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f9d7 	bl	8004fe4 <SDMMC_GetCmdResp1>
 8004c36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c38:	69fb      	ldr	r3, [r7, #28]
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3720      	adds	r7, #32
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b088      	sub	sp, #32
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
 8004c4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004c50:	2311      	movs	r3, #17
 8004c52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c54:	2340      	movs	r3, #64	; 0x40
 8004c56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c62:	f107 0308 	add.w	r3, r7, #8
 8004c66:	4619      	mov	r1, r3
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7ff ff52 	bl	8004b12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c72:	2111      	movs	r1, #17
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 f9b5 	bl	8004fe4 <SDMMC_GetCmdResp1>
 8004c7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c7c:	69fb      	ldr	r3, [r7, #28]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3720      	adds	r7, #32
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b088      	sub	sp, #32
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004c94:	2312      	movs	r3, #18
 8004c96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c98:	2340      	movs	r3, #64	; 0x40
 8004c9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ca4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ca6:	f107 0308 	add.w	r3, r7, #8
 8004caa:	4619      	mov	r1, r3
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7ff ff30 	bl	8004b12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb6:	2112      	movs	r1, #18
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f993 	bl	8004fe4 <SDMMC_GetCmdResp1>
 8004cbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cc0:	69fb      	ldr	r3, [r7, #28]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3720      	adds	r7, #32
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b088      	sub	sp, #32
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004cd8:	2318      	movs	r3, #24
 8004cda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004cdc:	2340      	movs	r3, #64	; 0x40
 8004cde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ce4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ce8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004cea:	f107 0308 	add.w	r3, r7, #8
 8004cee:	4619      	mov	r1, r3
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7ff ff0e 	bl	8004b12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfa:	2118      	movs	r1, #24
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 f971 	bl	8004fe4 <SDMMC_GetCmdResp1>
 8004d02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d04:	69fb      	ldr	r3, [r7, #28]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3720      	adds	r7, #32
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b088      	sub	sp, #32
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004d1c:	2319      	movs	r3, #25
 8004d1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d20:	2340      	movs	r3, #64	; 0x40
 8004d22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d24:	2300      	movs	r3, #0
 8004d26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d2e:	f107 0308 	add.w	r3, r7, #8
 8004d32:	4619      	mov	r1, r3
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7ff feec 	bl	8004b12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d3e:	2119      	movs	r1, #25
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f94f 	bl	8004fe4 <SDMMC_GetCmdResp1>
 8004d46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d48:	69fb      	ldr	r3, [r7, #28]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3720      	adds	r7, #32
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b088      	sub	sp, #32
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004d60:	230c      	movs	r3, #12
 8004d62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d64:	2340      	movs	r3, #64	; 0x40
 8004d66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d72:	f107 0308 	add.w	r3, r7, #8
 8004d76:	4619      	mov	r1, r3
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f7ff feca 	bl	8004b12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004d7e:	4a05      	ldr	r2, [pc, #20]	; (8004d94 <SDMMC_CmdStopTransfer+0x40>)
 8004d80:	210c      	movs	r1, #12
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f92e 	bl	8004fe4 <SDMMC_GetCmdResp1>
 8004d88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d8a:	69fb      	ldr	r3, [r7, #28]
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3720      	adds	r7, #32
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	05f5e100 	.word	0x05f5e100

08004d98 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08a      	sub	sp, #40	; 0x28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004da8:	2307      	movs	r3, #7
 8004daa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004dac:	2340      	movs	r3, #64	; 0x40
 8004dae:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004db0:	2300      	movs	r3, #0
 8004db2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004db8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004dba:	f107 0310 	add.w	r3, r7, #16
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	68f8      	ldr	r0, [r7, #12]
 8004dc2:	f7ff fea6 	bl	8004b12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dca:	2107      	movs	r1, #7
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 f909 	bl	8004fe4 <SDMMC_GetCmdResp1>
 8004dd2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3728      	adds	r7, #40	; 0x28
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b088      	sub	sp, #32
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004dea:	2300      	movs	r3, #0
 8004dec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004dee:	2300      	movs	r3, #0
 8004df0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004df2:	2300      	movs	r3, #0
 8004df4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004df6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004dfa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004dfc:	f107 0308 	add.w	r3, r7, #8
 8004e00:	4619      	mov	r1, r3
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7ff fe85 	bl	8004b12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fb23 	bl	8005454 <SDMMC_GetCmdError>
 8004e0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e10:	69fb      	ldr	r3, [r7, #28]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3720      	adds	r7, #32
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b088      	sub	sp, #32
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004e22:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004e26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004e28:	2308      	movs	r3, #8
 8004e2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e2c:	2340      	movs	r3, #64	; 0x40
 8004e2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e30:	2300      	movs	r3, #0
 8004e32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e3a:	f107 0308 	add.w	r3, r7, #8
 8004e3e:	4619      	mov	r1, r3
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7ff fe66 	bl	8004b12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 fab6 	bl	80053b8 <SDMMC_GetCmdResp7>
 8004e4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e4e:	69fb      	ldr	r3, [r7, #28]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3720      	adds	r7, #32
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b088      	sub	sp, #32
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004e66:	2337      	movs	r3, #55	; 0x37
 8004e68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004e6a:	2340      	movs	r3, #64	; 0x40
 8004e6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004e78:	f107 0308 	add.w	r3, r7, #8
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7ff fe47 	bl	8004b12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e88:	2137      	movs	r1, #55	; 0x37
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f8aa 	bl	8004fe4 <SDMMC_GetCmdResp1>
 8004e90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e92:	69fb      	ldr	r3, [r7, #28]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3720      	adds	r7, #32
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b088      	sub	sp, #32
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004eac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004eb2:	2329      	movs	r3, #41	; 0x29
 8004eb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004eb6:	2340      	movs	r3, #64	; 0x40
 8004eb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ebe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ec2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ec4:	f107 0308 	add.w	r3, r7, #8
 8004ec8:	4619      	mov	r1, r3
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7ff fe21 	bl	8004b12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 f9bd 	bl	8005250 <SDMMC_GetCmdResp3>
 8004ed6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ed8:	69fb      	ldr	r3, [r7, #28]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3720      	adds	r7, #32
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b088      	sub	sp, #32
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004eea:	2300      	movs	r3, #0
 8004eec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004eee:	2302      	movs	r3, #2
 8004ef0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004ef2:	23c0      	movs	r3, #192	; 0xc0
 8004ef4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004efe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f00:	f107 0308 	add.w	r3, r7, #8
 8004f04:	4619      	mov	r1, r3
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7ff fe03 	bl	8004b12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f957 	bl	80051c0 <SDMMC_GetCmdResp2>
 8004f12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f14:	69fb      	ldr	r3, [r7, #28]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3720      	adds	r7, #32
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b088      	sub	sp, #32
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
 8004f26:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004f2c:	2309      	movs	r3, #9
 8004f2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004f30:	23c0      	movs	r3, #192	; 0xc0
 8004f32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f3e:	f107 0308 	add.w	r3, r7, #8
 8004f42:	4619      	mov	r1, r3
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7ff fde4 	bl	8004b12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f938 	bl	80051c0 <SDMMC_GetCmdResp2>
 8004f50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f52:	69fb      	ldr	r3, [r7, #28]
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3720      	adds	r7, #32
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b088      	sub	sp, #32
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f6e:	2340      	movs	r3, #64	; 0x40
 8004f70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f72:	2300      	movs	r3, #0
 8004f74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f7c:	f107 0308 	add.w	r3, r7, #8
 8004f80:	4619      	mov	r1, r3
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7ff fdc5 	bl	8004b12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	2103      	movs	r1, #3
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f99d 	bl	80052cc <SDMMC_GetCmdResp6>
 8004f92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f94:	69fb      	ldr	r3, [r7, #28]
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3720      	adds	r7, #32
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b088      	sub	sp, #32
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
 8004fa6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004fac:	230d      	movs	r3, #13
 8004fae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fb0:	2340      	movs	r3, #64	; 0x40
 8004fb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fbc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fbe:	f107 0308 	add.w	r3, r7, #8
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f7ff fda4 	bl	8004b12 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fce:	210d      	movs	r1, #13
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 f807 	bl	8004fe4 <SDMMC_GetCmdResp1>
 8004fd6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fd8:	69fb      	ldr	r3, [r7, #28]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3720      	adds	r7, #32
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b088      	sub	sp, #32
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	460b      	mov	r3, r1
 8004fee:	607a      	str	r2, [r7, #4]
 8004ff0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004ff2:	4b70      	ldr	r3, [pc, #448]	; (80051b4 <SDMMC_GetCmdResp1+0x1d0>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a70      	ldr	r2, [pc, #448]	; (80051b8 <SDMMC_GetCmdResp1+0x1d4>)
 8004ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffc:	0a5a      	lsrs	r2, r3, #9
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	fb02 f303 	mul.w	r3, r2, r3
 8005004:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	1e5a      	subs	r2, r3, #1
 800500a:	61fa      	str	r2, [r7, #28]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d102      	bne.n	8005016 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005010:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005014:	e0c9      	b.n	80051aa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0ef      	beq.n	8005006 <SDMMC_GetCmdResp1+0x22>
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1ea      	bne.n	8005006 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005034:	f003 0304 	and.w	r3, r3, #4
 8005038:	2b00      	cmp	r3, #0
 800503a:	d004      	beq.n	8005046 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2204      	movs	r2, #4
 8005040:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005042:	2304      	movs	r3, #4
 8005044:	e0b1      	b.n	80051aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d004      	beq.n	800505c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2201      	movs	r2, #1
 8005056:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005058:	2301      	movs	r3, #1
 800505a:	e0a6      	b.n	80051aa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	22c5      	movs	r2, #197	; 0xc5
 8005060:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f7ff fd7f 	bl	8004b66 <SDIO_GetCommandResponse>
 8005068:	4603      	mov	r3, r0
 800506a:	461a      	mov	r2, r3
 800506c:	7afb      	ldrb	r3, [r7, #11]
 800506e:	4293      	cmp	r3, r2
 8005070:	d001      	beq.n	8005076 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005072:	2301      	movs	r3, #1
 8005074:	e099      	b.n	80051aa <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005076:	2100      	movs	r1, #0
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f7ff fd81 	bl	8004b80 <SDIO_GetResponse>
 800507e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	4b4e      	ldr	r3, [pc, #312]	; (80051bc <SDMMC_GetCmdResp1+0x1d8>)
 8005084:	4013      	ands	r3, r2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800508a:	2300      	movs	r3, #0
 800508c:	e08d      	b.n	80051aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2b00      	cmp	r3, #0
 8005092:	da02      	bge.n	800509a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005094:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005098:	e087      	b.n	80051aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80050a4:	2340      	movs	r3, #64	; 0x40
 80050a6:	e080      	b.n	80051aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80050b2:	2380      	movs	r3, #128	; 0x80
 80050b4:	e079      	b.n	80051aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d002      	beq.n	80050c6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80050c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050c4:	e071      	b.n	80051aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d002      	beq.n	80050d6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80050d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050d4:	e069      	b.n	80051aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d002      	beq.n	80050e6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80050e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050e4:	e061      	b.n	80051aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80050f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80050f4:	e059      	b.n	80051aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005100:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005104:	e051      	b.n	80051aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005110:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005114:	e049      	b.n	80051aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005120:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005124:	e041      	b.n	80051aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d002      	beq.n	8005136 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005130:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005134:	e039      	b.n	80051aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800513c:	2b00      	cmp	r3, #0
 800513e:	d002      	beq.n	8005146 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005140:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005144:	e031      	b.n	80051aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800514c:	2b00      	cmp	r3, #0
 800514e:	d002      	beq.n	8005156 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005150:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005154:	e029      	b.n	80051aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005160:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005164:	e021      	b.n	80051aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005170:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005174:	e019      	b.n	80051aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d002      	beq.n	8005186 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005180:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005184:	e011      	b.n	80051aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005190:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005194:	e009      	b.n	80051aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f003 0308 	and.w	r3, r3, #8
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80051a0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80051a4:	e001      	b.n	80051aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80051a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3720      	adds	r7, #32
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20000008 	.word	0x20000008
 80051b8:	10624dd3 	.word	0x10624dd3
 80051bc:	fdffe008 	.word	0xfdffe008

080051c0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80051c8:	4b1f      	ldr	r3, [pc, #124]	; (8005248 <SDMMC_GetCmdResp2+0x88>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a1f      	ldr	r2, [pc, #124]	; (800524c <SDMMC_GetCmdResp2+0x8c>)
 80051ce:	fba2 2303 	umull	r2, r3, r2, r3
 80051d2:	0a5b      	lsrs	r3, r3, #9
 80051d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d8:	fb02 f303 	mul.w	r3, r2, r3
 80051dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	1e5a      	subs	r2, r3, #1
 80051e2:	60fa      	str	r2, [r7, #12]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d102      	bne.n	80051ee <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80051e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80051ec:	e026      	b.n	800523c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0ef      	beq.n	80051de <SDMMC_GetCmdResp2+0x1e>
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1ea      	bne.n	80051de <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520c:	f003 0304 	and.w	r3, r3, #4
 8005210:	2b00      	cmp	r3, #0
 8005212:	d004      	beq.n	800521e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2204      	movs	r2, #4
 8005218:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800521a:	2304      	movs	r3, #4
 800521c:	e00e      	b.n	800523c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d004      	beq.n	8005234 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005230:	2301      	movs	r3, #1
 8005232:	e003      	b.n	800523c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	22c5      	movs	r2, #197	; 0xc5
 8005238:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	20000008 	.word	0x20000008
 800524c:	10624dd3 	.word	0x10624dd3

08005250 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005258:	4b1a      	ldr	r3, [pc, #104]	; (80052c4 <SDMMC_GetCmdResp3+0x74>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a1a      	ldr	r2, [pc, #104]	; (80052c8 <SDMMC_GetCmdResp3+0x78>)
 800525e:	fba2 2303 	umull	r2, r3, r2, r3
 8005262:	0a5b      	lsrs	r3, r3, #9
 8005264:	f241 3288 	movw	r2, #5000	; 0x1388
 8005268:	fb02 f303 	mul.w	r3, r2, r3
 800526c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	1e5a      	subs	r2, r3, #1
 8005272:	60fa      	str	r2, [r7, #12]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d102      	bne.n	800527e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005278:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800527c:	e01b      	b.n	80052b6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005282:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0ef      	beq.n	800526e <SDMMC_GetCmdResp3+0x1e>
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1ea      	bne.n	800526e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529c:	f003 0304 	and.w	r3, r3, #4
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d004      	beq.n	80052ae <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2204      	movs	r2, #4
 80052a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80052aa:	2304      	movs	r3, #4
 80052ac:	e003      	b.n	80052b6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	22c5      	movs	r2, #197	; 0xc5
 80052b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	20000008 	.word	0x20000008
 80052c8:	10624dd3 	.word	0x10624dd3

080052cc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b088      	sub	sp, #32
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	460b      	mov	r3, r1
 80052d6:	607a      	str	r2, [r7, #4]
 80052d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80052da:	4b35      	ldr	r3, [pc, #212]	; (80053b0 <SDMMC_GetCmdResp6+0xe4>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a35      	ldr	r2, [pc, #212]	; (80053b4 <SDMMC_GetCmdResp6+0xe8>)
 80052e0:	fba2 2303 	umull	r2, r3, r2, r3
 80052e4:	0a5b      	lsrs	r3, r3, #9
 80052e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ea:	fb02 f303 	mul.w	r3, r2, r3
 80052ee:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	1e5a      	subs	r2, r3, #1
 80052f4:	61fa      	str	r2, [r7, #28]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d102      	bne.n	8005300 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80052fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80052fe:	e052      	b.n	80053a6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005304:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0ef      	beq.n	80052f0 <SDMMC_GetCmdResp6+0x24>
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1ea      	bne.n	80052f0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b00      	cmp	r3, #0
 8005324:	d004      	beq.n	8005330 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2204      	movs	r2, #4
 800532a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800532c:	2304      	movs	r3, #4
 800532e:	e03a      	b.n	80053a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b00      	cmp	r3, #0
 800533a:	d004      	beq.n	8005346 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2201      	movs	r2, #1
 8005340:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005342:	2301      	movs	r3, #1
 8005344:	e02f      	b.n	80053a6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f7ff fc0d 	bl	8004b66 <SDIO_GetCommandResponse>
 800534c:	4603      	mov	r3, r0
 800534e:	461a      	mov	r2, r3
 8005350:	7afb      	ldrb	r3, [r7, #11]
 8005352:	4293      	cmp	r3, r2
 8005354:	d001      	beq.n	800535a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005356:	2301      	movs	r3, #1
 8005358:	e025      	b.n	80053a6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	22c5      	movs	r2, #197	; 0xc5
 800535e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005360:	2100      	movs	r1, #0
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f7ff fc0c 	bl	8004b80 <SDIO_GetResponse>
 8005368:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d106      	bne.n	8005382 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	0c1b      	lsrs	r3, r3, #16
 8005378:	b29a      	uxth	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800537e:	2300      	movs	r3, #0
 8005380:	e011      	b.n	80053a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800538c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005390:	e009      	b.n	80053a6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005398:	2b00      	cmp	r3, #0
 800539a:	d002      	beq.n	80053a2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800539c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053a0:	e001      	b.n	80053a6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80053a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3720      	adds	r7, #32
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	20000008 	.word	0x20000008
 80053b4:	10624dd3 	.word	0x10624dd3

080053b8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80053c0:	4b22      	ldr	r3, [pc, #136]	; (800544c <SDMMC_GetCmdResp7+0x94>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a22      	ldr	r2, [pc, #136]	; (8005450 <SDMMC_GetCmdResp7+0x98>)
 80053c6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ca:	0a5b      	lsrs	r3, r3, #9
 80053cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d0:	fb02 f303 	mul.w	r3, r2, r3
 80053d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	1e5a      	subs	r2, r3, #1
 80053da:	60fa      	str	r2, [r7, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d102      	bne.n	80053e6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80053e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053e4:	e02c      	b.n	8005440 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ea:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0ef      	beq.n	80053d6 <SDMMC_GetCmdResp7+0x1e>
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1ea      	bne.n	80053d6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005404:	f003 0304 	and.w	r3, r3, #4
 8005408:	2b00      	cmp	r3, #0
 800540a:	d004      	beq.n	8005416 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2204      	movs	r2, #4
 8005410:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005412:	2304      	movs	r3, #4
 8005414:	e014      	b.n	8005440 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d004      	beq.n	800542c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2201      	movs	r2, #1
 8005426:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005428:	2301      	movs	r3, #1
 800542a:	e009      	b.n	8005440 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005434:	2b00      	cmp	r3, #0
 8005436:	d002      	beq.n	800543e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2240      	movs	r2, #64	; 0x40
 800543c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800543e:	2300      	movs	r3, #0
  
}
 8005440:	4618      	mov	r0, r3
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	20000008 	.word	0x20000008
 8005450:	10624dd3 	.word	0x10624dd3

08005454 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800545c:	4b11      	ldr	r3, [pc, #68]	; (80054a4 <SDMMC_GetCmdError+0x50>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a11      	ldr	r2, [pc, #68]	; (80054a8 <SDMMC_GetCmdError+0x54>)
 8005462:	fba2 2303 	umull	r2, r3, r2, r3
 8005466:	0a5b      	lsrs	r3, r3, #9
 8005468:	f241 3288 	movw	r2, #5000	; 0x1388
 800546c:	fb02 f303 	mul.w	r3, r2, r3
 8005470:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	1e5a      	subs	r2, r3, #1
 8005476:	60fa      	str	r2, [r7, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d102      	bne.n	8005482 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800547c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005480:	e009      	b.n	8005496 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800548a:	2b00      	cmp	r3, #0
 800548c:	d0f1      	beq.n	8005472 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	22c5      	movs	r2, #197	; 0xc5
 8005492:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3714      	adds	r7, #20
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
 80054a2:	bf00      	nop
 80054a4:	20000008 	.word	0x20000008
 80054a8:	10624dd3 	.word	0x10624dd3

080054ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80054b0:	4904      	ldr	r1, [pc, #16]	; (80054c4 <MX_FATFS_Init+0x18>)
 80054b2:	4805      	ldr	r0, [pc, #20]	; (80054c8 <MX_FATFS_Init+0x1c>)
 80054b4:	f002 fc7c 	bl	8007db0 <FATFS_LinkDriver>
 80054b8:	4603      	mov	r3, r0
 80054ba:	461a      	mov	r2, r3
 80054bc:	4b03      	ldr	r3, [pc, #12]	; (80054cc <MX_FATFS_Init+0x20>)
 80054be:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80054c0:	bf00      	nop
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	2000015c 	.word	0x2000015c
 80054c8:	08007f3c 	.word	0x08007f3c
 80054cc:	20000158 	.word	0x20000158

080054d0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80054d0:	b480      	push	{r7}
 80054d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80054d4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80054e6:	2300      	movs	r3, #0
 80054e8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80054ea:	f000 f86b 	bl	80055c4 <BSP_SD_IsDetected>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d001      	beq.n	80054f8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e005      	b.n	8005504 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80054f8:	4804      	ldr	r0, [pc, #16]	; (800550c <BSP_SD_Init+0x2c>)
 80054fa:	f7fc fe1d 	bl	8002138 <HAL_SD_Init>
 80054fe:	4603      	mov	r3, r0
 8005500:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8005502:	79fb      	ldrb	r3, [r7, #7]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	20000030 	.word	0x20000030

08005510 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b088      	sub	sp, #32
 8005514:	af02      	add	r7, sp, #8
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	9300      	str	r3, [sp, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	68f9      	ldr	r1, [r7, #12]
 800552c:	4806      	ldr	r0, [pc, #24]	; (8005548 <BSP_SD_ReadBlocks+0x38>)
 800552e:	f7fc feb3 	bl	8002298 <HAL_SD_ReadBlocks>
 8005532:	4603      	mov	r3, r0
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800553c:	7dfb      	ldrb	r3, [r7, #23]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3718      	adds	r7, #24
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	20000030 	.word	0x20000030

0800554c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b088      	sub	sp, #32
 8005550:	af02      	add	r7, sp, #8
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
 8005558:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	68f9      	ldr	r1, [r7, #12]
 8005568:	4806      	ldr	r0, [pc, #24]	; (8005584 <BSP_SD_WriteBlocks+0x38>)
 800556a:	f7fd f873 	bl	8002654 <HAL_SD_WriteBlocks>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005578:	7dfb      	ldrb	r3, [r7, #23]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3718      	adds	r7, #24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	20000030 	.word	0x20000030

08005588 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800558c:	4805      	ldr	r0, [pc, #20]	; (80055a4 <BSP_SD_GetCardState+0x1c>)
 800558e:	f7fd fbb7 	bl	8002d00 <HAL_SD_GetCardState>
 8005592:	4603      	mov	r3, r0
 8005594:	2b04      	cmp	r3, #4
 8005596:	bf14      	ite	ne
 8005598:	2301      	movne	r3, #1
 800559a:	2300      	moveq	r3, #0
 800559c:	b2db      	uxtb	r3, r3
}
 800559e:	4618      	mov	r0, r3
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	20000030 	.word	0x20000030

080055a8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80055b0:	6879      	ldr	r1, [r7, #4]
 80055b2:	4803      	ldr	r0, [pc, #12]	; (80055c0 <BSP_SD_GetCardInfo+0x18>)
 80055b4:	f7fd fb78 	bl	8002ca8 <HAL_SD_GetCardInfo>
}
 80055b8:	bf00      	nop
 80055ba:	3708      	adds	r7, #8
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}
 80055c0:	20000030 	.word	0x20000030

080055c4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80055ca:	2301      	movs	r3, #1
 80055cc:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80055ce:	f000 f80b 	bl	80055e8 <BSP_PlatformIsDetected>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80055d8:	2300      	movs	r3, #0
 80055da:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80055dc:	79fb      	ldrb	r3, [r7, #7]
 80055de:	b2db      	uxtb	r3, r3
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80055ee:	2301      	movs	r3, #1
 80055f0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80055f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055f6:	4806      	ldr	r0, [pc, #24]	; (8005610 <BSP_PlatformIsDetected+0x28>)
 80055f8:	f7fc f914 	bl	8001824 <HAL_GPIO_ReadPin>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8005602:	2300      	movs	r3, #0
 8005604:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005606:	79fb      	ldrb	r3, [r7, #7]
}
 8005608:	4618      	mov	r0, r3
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40020c00 	.word	0x40020c00

08005614 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	4603      	mov	r3, r0
 800561c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800561e:	4b0b      	ldr	r3, [pc, #44]	; (800564c <SD_CheckStatus+0x38>)
 8005620:	2201      	movs	r2, #1
 8005622:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005624:	f7ff ffb0 	bl	8005588 <BSP_SD_GetCardState>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d107      	bne.n	800563e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800562e:	4b07      	ldr	r3, [pc, #28]	; (800564c <SD_CheckStatus+0x38>)
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	b2db      	uxtb	r3, r3
 8005634:	f023 0301 	bic.w	r3, r3, #1
 8005638:	b2da      	uxtb	r2, r3
 800563a:	4b04      	ldr	r3, [pc, #16]	; (800564c <SD_CheckStatus+0x38>)
 800563c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800563e:	4b03      	ldr	r3, [pc, #12]	; (800564c <SD_CheckStatus+0x38>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	b2db      	uxtb	r3, r3
}
 8005644:	4618      	mov	r0, r3
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	20000011 	.word	0x20000011

08005650 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	4603      	mov	r3, r0
 8005658:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800565a:	4b0b      	ldr	r3, [pc, #44]	; (8005688 <SD_initialize+0x38>)
 800565c:	2201      	movs	r2, #1
 800565e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005660:	f7ff ff3e 	bl	80054e0 <BSP_SD_Init>
 8005664:	4603      	mov	r3, r0
 8005666:	2b00      	cmp	r3, #0
 8005668:	d107      	bne.n	800567a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800566a:	79fb      	ldrb	r3, [r7, #7]
 800566c:	4618      	mov	r0, r3
 800566e:	f7ff ffd1 	bl	8005614 <SD_CheckStatus>
 8005672:	4603      	mov	r3, r0
 8005674:	461a      	mov	r2, r3
 8005676:	4b04      	ldr	r3, [pc, #16]	; (8005688 <SD_initialize+0x38>)
 8005678:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800567a:	4b03      	ldr	r3, [pc, #12]	; (8005688 <SD_initialize+0x38>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	b2db      	uxtb	r3, r3
}
 8005680:	4618      	mov	r0, r3
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	20000011 	.word	0x20000011

0800568c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	4603      	mov	r3, r0
 8005694:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005696:	79fb      	ldrb	r3, [r7, #7]
 8005698:	4618      	mov	r0, r3
 800569a:	f7ff ffbb 	bl	8005614 <SD_CheckStatus>
 800569e:	4603      	mov	r3, r0
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3708      	adds	r7, #8
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b086      	sub	sp, #24
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	607a      	str	r2, [r7, #4]
 80056b2:	603b      	str	r3, [r7, #0]
 80056b4:	4603      	mov	r3, r0
 80056b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80056bc:	f04f 33ff 	mov.w	r3, #4294967295
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	68b8      	ldr	r0, [r7, #8]
 80056c6:	f7ff ff23 	bl	8005510 <BSP_SD_ReadBlocks>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d107      	bne.n	80056e0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80056d0:	bf00      	nop
 80056d2:	f7ff ff59 	bl	8005588 <BSP_SD_GetCardState>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d1fa      	bne.n	80056d2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80056dc:	2300      	movs	r3, #0
 80056de:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80056e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b086      	sub	sp, #24
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
 80056f4:	603b      	str	r3, [r7, #0]
 80056f6:	4603      	mov	r3, r0
 80056f8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80056fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005702:	683a      	ldr	r2, [r7, #0]
 8005704:	6879      	ldr	r1, [r7, #4]
 8005706:	68b8      	ldr	r0, [r7, #8]
 8005708:	f7ff ff20 	bl	800554c <BSP_SD_WriteBlocks>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d107      	bne.n	8005722 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005712:	bf00      	nop
 8005714:	f7ff ff38 	bl	8005588 <BSP_SD_GetCardState>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d1fa      	bne.n	8005714 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800571e:	2300      	movs	r3, #0
 8005720:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005722:	7dfb      	ldrb	r3, [r7, #23]
}
 8005724:	4618      	mov	r0, r3
 8005726:	3718      	adds	r7, #24
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b08c      	sub	sp, #48	; 0x30
 8005730:	af00      	add	r7, sp, #0
 8005732:	4603      	mov	r3, r0
 8005734:	603a      	str	r2, [r7, #0]
 8005736:	71fb      	strb	r3, [r7, #7]
 8005738:	460b      	mov	r3, r1
 800573a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005742:	4b25      	ldr	r3, [pc, #148]	; (80057d8 <SD_ioctl+0xac>)
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	b2db      	uxtb	r3, r3
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <SD_ioctl+0x28>
 8005750:	2303      	movs	r3, #3
 8005752:	e03c      	b.n	80057ce <SD_ioctl+0xa2>

  switch (cmd)
 8005754:	79bb      	ldrb	r3, [r7, #6]
 8005756:	2b03      	cmp	r3, #3
 8005758:	d834      	bhi.n	80057c4 <SD_ioctl+0x98>
 800575a:	a201      	add	r2, pc, #4	; (adr r2, 8005760 <SD_ioctl+0x34>)
 800575c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005760:	08005771 	.word	0x08005771
 8005764:	08005779 	.word	0x08005779
 8005768:	08005791 	.word	0x08005791
 800576c:	080057ab 	.word	0x080057ab
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005776:	e028      	b.n	80057ca <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005778:	f107 030c 	add.w	r3, r7, #12
 800577c:	4618      	mov	r0, r3
 800577e:	f7ff ff13 	bl	80055a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005788:	2300      	movs	r3, #0
 800578a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800578e:	e01c      	b.n	80057ca <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005790:	f107 030c 	add.w	r3, r7, #12
 8005794:	4618      	mov	r0, r3
 8005796:	f7ff ff07 	bl	80055a8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800579a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579c:	b29a      	uxth	r2, r3
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80057a8:	e00f      	b.n	80057ca <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80057aa:	f107 030c 	add.w	r3, r7, #12
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7ff fefa 	bl	80055a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	0a5a      	lsrs	r2, r3, #9
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80057bc:	2300      	movs	r3, #0
 80057be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80057c2:	e002      	b.n	80057ca <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80057c4:	2304      	movs	r3, #4
 80057c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80057ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3730      	adds	r7, #48	; 0x30
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	20000011 	.word	0x20000011

080057dc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	4603      	mov	r3, r0
 80057e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80057e6:	79fb      	ldrb	r3, [r7, #7]
 80057e8:	4a08      	ldr	r2, [pc, #32]	; (800580c <disk_status+0x30>)
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	79fa      	ldrb	r2, [r7, #7]
 80057f4:	4905      	ldr	r1, [pc, #20]	; (800580c <disk_status+0x30>)
 80057f6:	440a      	add	r2, r1
 80057f8:	7a12      	ldrb	r2, [r2, #8]
 80057fa:	4610      	mov	r0, r2
 80057fc:	4798      	blx	r3
 80057fe:	4603      	mov	r3, r0
 8005800:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005802:	7bfb      	ldrb	r3, [r7, #15]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	20000188 	.word	0x20000188

08005810 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	4603      	mov	r3, r0
 8005818:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800581a:	2300      	movs	r3, #0
 800581c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800581e:	79fb      	ldrb	r3, [r7, #7]
 8005820:	4a0d      	ldr	r2, [pc, #52]	; (8005858 <disk_initialize+0x48>)
 8005822:	5cd3      	ldrb	r3, [r2, r3]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d111      	bne.n	800584c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005828:	79fb      	ldrb	r3, [r7, #7]
 800582a:	4a0b      	ldr	r2, [pc, #44]	; (8005858 <disk_initialize+0x48>)
 800582c:	2101      	movs	r1, #1
 800582e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005830:	79fb      	ldrb	r3, [r7, #7]
 8005832:	4a09      	ldr	r2, [pc, #36]	; (8005858 <disk_initialize+0x48>)
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	79fa      	ldrb	r2, [r7, #7]
 800583e:	4906      	ldr	r1, [pc, #24]	; (8005858 <disk_initialize+0x48>)
 8005840:	440a      	add	r2, r1
 8005842:	7a12      	ldrb	r2, [r2, #8]
 8005844:	4610      	mov	r0, r2
 8005846:	4798      	blx	r3
 8005848:	4603      	mov	r3, r0
 800584a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800584c:	7bfb      	ldrb	r3, [r7, #15]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20000188 	.word	0x20000188

0800585c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800585c:	b590      	push	{r4, r7, lr}
 800585e:	b087      	sub	sp, #28
 8005860:	af00      	add	r7, sp, #0
 8005862:	60b9      	str	r1, [r7, #8]
 8005864:	607a      	str	r2, [r7, #4]
 8005866:	603b      	str	r3, [r7, #0]
 8005868:	4603      	mov	r3, r0
 800586a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800586c:	7bfb      	ldrb	r3, [r7, #15]
 800586e:	4a0a      	ldr	r2, [pc, #40]	; (8005898 <disk_read+0x3c>)
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	689c      	ldr	r4, [r3, #8]
 8005878:	7bfb      	ldrb	r3, [r7, #15]
 800587a:	4a07      	ldr	r2, [pc, #28]	; (8005898 <disk_read+0x3c>)
 800587c:	4413      	add	r3, r2
 800587e:	7a18      	ldrb	r0, [r3, #8]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	68b9      	ldr	r1, [r7, #8]
 8005886:	47a0      	blx	r4
 8005888:	4603      	mov	r3, r0
 800588a:	75fb      	strb	r3, [r7, #23]
  return res;
 800588c:	7dfb      	ldrb	r3, [r7, #23]
}
 800588e:	4618      	mov	r0, r3
 8005890:	371c      	adds	r7, #28
 8005892:	46bd      	mov	sp, r7
 8005894:	bd90      	pop	{r4, r7, pc}
 8005896:	bf00      	nop
 8005898:	20000188 	.word	0x20000188

0800589c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800589c:	b590      	push	{r4, r7, lr}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	607a      	str	r2, [r7, #4]
 80058a6:	603b      	str	r3, [r7, #0]
 80058a8:	4603      	mov	r3, r0
 80058aa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80058ac:	7bfb      	ldrb	r3, [r7, #15]
 80058ae:	4a0a      	ldr	r2, [pc, #40]	; (80058d8 <disk_write+0x3c>)
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	68dc      	ldr	r4, [r3, #12]
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
 80058ba:	4a07      	ldr	r2, [pc, #28]	; (80058d8 <disk_write+0x3c>)
 80058bc:	4413      	add	r3, r2
 80058be:	7a18      	ldrb	r0, [r3, #8]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	68b9      	ldr	r1, [r7, #8]
 80058c6:	47a0      	blx	r4
 80058c8:	4603      	mov	r3, r0
 80058ca:	75fb      	strb	r3, [r7, #23]
  return res;
 80058cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	371c      	adds	r7, #28
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd90      	pop	{r4, r7, pc}
 80058d6:	bf00      	nop
 80058d8:	20000188 	.word	0x20000188

080058dc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	4603      	mov	r3, r0
 80058e4:	603a      	str	r2, [r7, #0]
 80058e6:	71fb      	strb	r3, [r7, #7]
 80058e8:	460b      	mov	r3, r1
 80058ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80058ec:	79fb      	ldrb	r3, [r7, #7]
 80058ee:	4a09      	ldr	r2, [pc, #36]	; (8005914 <disk_ioctl+0x38>)
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	79fa      	ldrb	r2, [r7, #7]
 80058fa:	4906      	ldr	r1, [pc, #24]	; (8005914 <disk_ioctl+0x38>)
 80058fc:	440a      	add	r2, r1
 80058fe:	7a10      	ldrb	r0, [r2, #8]
 8005900:	79b9      	ldrb	r1, [r7, #6]
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	4798      	blx	r3
 8005906:	4603      	mov	r3, r0
 8005908:	73fb      	strb	r3, [r7, #15]
  return res;
 800590a:	7bfb      	ldrb	r3, [r7, #15]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	20000188 	.word	0x20000188

08005918 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	3301      	adds	r3, #1
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005928:	89fb      	ldrh	r3, [r7, #14]
 800592a:	021b      	lsls	r3, r3, #8
 800592c:	b21a      	sxth	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	b21b      	sxth	r3, r3
 8005934:	4313      	orrs	r3, r2
 8005936:	b21b      	sxth	r3, r3
 8005938:	81fb      	strh	r3, [r7, #14]
	return rv;
 800593a:	89fb      	ldrh	r3, [r7, #14]
}
 800593c:	4618      	mov	r0, r3
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3303      	adds	r3, #3
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	021b      	lsls	r3, r3, #8
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	3202      	adds	r2, #2
 8005960:	7812      	ldrb	r2, [r2, #0]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	021b      	lsls	r3, r3, #8
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	3201      	adds	r2, #1
 800596e:	7812      	ldrb	r2, [r2, #0]
 8005970:	4313      	orrs	r3, r2
 8005972:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	021b      	lsls	r3, r3, #8
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	7812      	ldrb	r2, [r2, #0]
 800597c:	4313      	orrs	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005980:	68fb      	ldr	r3, [r7, #12]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800598e:	b480      	push	{r7}
 8005990:	b083      	sub	sp, #12
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	460b      	mov	r3, r1
 8005998:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	1c5a      	adds	r2, r3, #1
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	887a      	ldrh	r2, [r7, #2]
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]
 80059a6:	887b      	ldrh	r3, [r7, #2]
 80059a8:	0a1b      	lsrs	r3, r3, #8
 80059aa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	1c5a      	adds	r2, r3, #1
 80059b0:	607a      	str	r2, [r7, #4]
 80059b2:	887a      	ldrh	r2, [r7, #2]
 80059b4:	b2d2      	uxtb	r2, r2
 80059b6:	701a      	strb	r2, [r3, #0]
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	1c5a      	adds	r2, r3, #1
 80059d2:	607a      	str	r2, [r7, #4]
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	b2d2      	uxtb	r2, r2
 80059d8:	701a      	strb	r2, [r3, #0]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	0a1b      	lsrs	r3, r3, #8
 80059de:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	607a      	str	r2, [r7, #4]
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	701a      	strb	r2, [r3, #0]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	0a1b      	lsrs	r3, r3, #8
 80059f0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	1c5a      	adds	r2, r3, #1
 80059f6:	607a      	str	r2, [r7, #4]
 80059f8:	683a      	ldr	r2, [r7, #0]
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	701a      	strb	r2, [r3, #0]
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	0a1b      	lsrs	r3, r3, #8
 8005a02:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	607a      	str	r2, [r7, #4]
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	b2d2      	uxtb	r2, r2
 8005a0e:	701a      	strb	r2, [r3, #0]
}
 8005a10:	bf00      	nop
 8005a12:	370c      	adds	r7, #12
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr

08005a1c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005a1c:	b480      	push	{r7}
 8005a1e:	b087      	sub	sp, #28
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00d      	beq.n	8005a52 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	1c53      	adds	r3, r2, #1
 8005a3a:	613b      	str	r3, [r7, #16]
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	1c59      	adds	r1, r3, #1
 8005a40:	6179      	str	r1, [r7, #20]
 8005a42:	7812      	ldrb	r2, [r2, #0]
 8005a44:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	3b01      	subs	r3, #1
 8005a4a:	607b      	str	r3, [r7, #4]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1f1      	bne.n	8005a36 <mem_cpy+0x1a>
	}
}
 8005a52:	bf00      	nop
 8005a54:	371c      	adds	r7, #28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005a5e:	b480      	push	{r7}
 8005a60:	b087      	sub	sp, #28
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	60f8      	str	r0, [r7, #12]
 8005a66:	60b9      	str	r1, [r7, #8]
 8005a68:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	617a      	str	r2, [r7, #20]
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	b2d2      	uxtb	r2, r2
 8005a78:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	607b      	str	r3, [r7, #4]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1f3      	bne.n	8005a6e <mem_set+0x10>
}
 8005a86:	bf00      	nop
 8005a88:	bf00      	nop
 8005a8a:	371c      	adds	r7, #28
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005a94:	b480      	push	{r7}
 8005a96:	b089      	sub	sp, #36	; 0x24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	61fb      	str	r3, [r7, #28]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	1c5a      	adds	r2, r3, #1
 8005ab0:	61fa      	str	r2, [r7, #28]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	61ba      	str	r2, [r7, #24]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	1acb      	subs	r3, r1, r3
 8005ac0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	3b01      	subs	r3, #1
 8005ac6:	607b      	str	r3, [r7, #4]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d002      	beq.n	8005ad4 <mem_cmp+0x40>
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d0eb      	beq.n	8005aac <mem_cmp+0x18>

	return r;
 8005ad4:	697b      	ldr	r3, [r7, #20]
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3724      	adds	r7, #36	; 0x24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
 8005aea:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005aec:	e002      	b.n	8005af4 <chk_chr+0x12>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	3301      	adds	r3, #1
 8005af2:	607b      	str	r3, [r7, #4]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d005      	beq.n	8005b08 <chk_chr+0x26>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	461a      	mov	r2, r3
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d1f2      	bne.n	8005aee <chk_chr+0xc>
	return *str;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005b22:	2300      	movs	r3, #0
 8005b24:	60bb      	str	r3, [r7, #8]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	60fb      	str	r3, [r7, #12]
 8005b2a:	e029      	b.n	8005b80 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005b2c:	4a27      	ldr	r2, [pc, #156]	; (8005bcc <chk_lock+0xb4>)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	011b      	lsls	r3, r3, #4
 8005b32:	4413      	add	r3, r2
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d01d      	beq.n	8005b76 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005b3a:	4a24      	ldr	r2, [pc, #144]	; (8005bcc <chk_lock+0xb4>)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	011b      	lsls	r3, r3, #4
 8005b40:	4413      	add	r3, r2
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d116      	bne.n	8005b7a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005b4c:	4a1f      	ldr	r2, [pc, #124]	; (8005bcc <chk_lock+0xb4>)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	011b      	lsls	r3, r3, #4
 8005b52:	4413      	add	r3, r2
 8005b54:	3304      	adds	r3, #4
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d10c      	bne.n	8005b7a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005b60:	4a1a      	ldr	r2, [pc, #104]	; (8005bcc <chk_lock+0xb4>)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	011b      	lsls	r3, r3, #4
 8005b66:	4413      	add	r3, r2
 8005b68:	3308      	adds	r3, #8
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d102      	bne.n	8005b7a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005b74:	e007      	b.n	8005b86 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005b76:	2301      	movs	r3, #1
 8005b78:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	60fb      	str	r3, [r7, #12]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d9d2      	bls.n	8005b2c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d109      	bne.n	8005ba0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d102      	bne.n	8005b98 <chk_lock+0x80>
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d101      	bne.n	8005b9c <chk_lock+0x84>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	e010      	b.n	8005bbe <chk_lock+0xa6>
 8005b9c:	2312      	movs	r3, #18
 8005b9e:	e00e      	b.n	8005bbe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d108      	bne.n	8005bb8 <chk_lock+0xa0>
 8005ba6:	4a09      	ldr	r2, [pc, #36]	; (8005bcc <chk_lock+0xb4>)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	011b      	lsls	r3, r3, #4
 8005bac:	4413      	add	r3, r2
 8005bae:	330c      	adds	r3, #12
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bb6:	d101      	bne.n	8005bbc <chk_lock+0xa4>
 8005bb8:	2310      	movs	r3, #16
 8005bba:	e000      	b.n	8005bbe <chk_lock+0xa6>
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3714      	adds	r7, #20
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	20000168 	.word	0x20000168

08005bd0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	607b      	str	r3, [r7, #4]
 8005bda:	e002      	b.n	8005be2 <enq_lock+0x12>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3301      	adds	r3, #1
 8005be0:	607b      	str	r3, [r7, #4]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d806      	bhi.n	8005bf6 <enq_lock+0x26>
 8005be8:	4a09      	ldr	r2, [pc, #36]	; (8005c10 <enq_lock+0x40>)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	4413      	add	r3, r2
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1f2      	bne.n	8005bdc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	bf14      	ite	ne
 8005bfc:	2301      	movne	r3, #1
 8005bfe:	2300      	moveq	r3, #0
 8005c00:	b2db      	uxtb	r3, r3
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	20000168 	.word	0x20000168

08005c14 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	e01f      	b.n	8005c64 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005c24:	4a41      	ldr	r2, [pc, #260]	; (8005d2c <inc_lock+0x118>)
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	011b      	lsls	r3, r3, #4
 8005c2a:	4413      	add	r3, r2
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d113      	bne.n	8005c5e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005c36:	4a3d      	ldr	r2, [pc, #244]	; (8005d2c <inc_lock+0x118>)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	011b      	lsls	r3, r3, #4
 8005c3c:	4413      	add	r3, r2
 8005c3e:	3304      	adds	r3, #4
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d109      	bne.n	8005c5e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005c4a:	4a38      	ldr	r2, [pc, #224]	; (8005d2c <inc_lock+0x118>)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	011b      	lsls	r3, r3, #4
 8005c50:	4413      	add	r3, r2
 8005c52:	3308      	adds	r3, #8
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d006      	beq.n	8005c6c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	3301      	adds	r3, #1
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d9dc      	bls.n	8005c24 <inc_lock+0x10>
 8005c6a:	e000      	b.n	8005c6e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005c6c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d132      	bne.n	8005cda <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005c74:	2300      	movs	r3, #0
 8005c76:	60fb      	str	r3, [r7, #12]
 8005c78:	e002      	b.n	8005c80 <inc_lock+0x6c>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	60fb      	str	r3, [r7, #12]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d806      	bhi.n	8005c94 <inc_lock+0x80>
 8005c86:	4a29      	ldr	r2, [pc, #164]	; (8005d2c <inc_lock+0x118>)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	011b      	lsls	r3, r3, #4
 8005c8c:	4413      	add	r3, r2
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1f2      	bne.n	8005c7a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d101      	bne.n	8005c9e <inc_lock+0x8a>
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	e040      	b.n	8005d20 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	4922      	ldr	r1, [pc, #136]	; (8005d2c <inc_lock+0x118>)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	011b      	lsls	r3, r3, #4
 8005ca8:	440b      	add	r3, r1
 8005caa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689a      	ldr	r2, [r3, #8]
 8005cb0:	491e      	ldr	r1, [pc, #120]	; (8005d2c <inc_lock+0x118>)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	011b      	lsls	r3, r3, #4
 8005cb6:	440b      	add	r3, r1
 8005cb8:	3304      	adds	r3, #4
 8005cba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	695a      	ldr	r2, [r3, #20]
 8005cc0:	491a      	ldr	r1, [pc, #104]	; (8005d2c <inc_lock+0x118>)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	011b      	lsls	r3, r3, #4
 8005cc6:	440b      	add	r3, r1
 8005cc8:	3308      	adds	r3, #8
 8005cca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005ccc:	4a17      	ldr	r2, [pc, #92]	; (8005d2c <inc_lock+0x118>)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	011b      	lsls	r3, r3, #4
 8005cd2:	4413      	add	r3, r2
 8005cd4:	330c      	adds	r3, #12
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d009      	beq.n	8005cf4 <inc_lock+0xe0>
 8005ce0:	4a12      	ldr	r2, [pc, #72]	; (8005d2c <inc_lock+0x118>)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	011b      	lsls	r3, r3, #4
 8005ce6:	4413      	add	r3, r2
 8005ce8:	330c      	adds	r3, #12
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d001      	beq.n	8005cf4 <inc_lock+0xe0>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	e015      	b.n	8005d20 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d108      	bne.n	8005d0c <inc_lock+0xf8>
 8005cfa:	4a0c      	ldr	r2, [pc, #48]	; (8005d2c <inc_lock+0x118>)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	011b      	lsls	r3, r3, #4
 8005d00:	4413      	add	r3, r2
 8005d02:	330c      	adds	r3, #12
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	3301      	adds	r3, #1
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	e001      	b.n	8005d10 <inc_lock+0xfc>
 8005d0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005d10:	4906      	ldr	r1, [pc, #24]	; (8005d2c <inc_lock+0x118>)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	011b      	lsls	r3, r3, #4
 8005d16:	440b      	add	r3, r1
 8005d18:	330c      	adds	r3, #12
 8005d1a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	3301      	adds	r3, #1
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3714      	adds	r7, #20
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	20000168 	.word	0x20000168

08005d30 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	607b      	str	r3, [r7, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d825      	bhi.n	8005d90 <dec_lock+0x60>
		n = Files[i].ctr;
 8005d44:	4a17      	ldr	r2, [pc, #92]	; (8005da4 <dec_lock+0x74>)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	011b      	lsls	r3, r3, #4
 8005d4a:	4413      	add	r3, r2
 8005d4c:	330c      	adds	r3, #12
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005d52:	89fb      	ldrh	r3, [r7, #14]
 8005d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d58:	d101      	bne.n	8005d5e <dec_lock+0x2e>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005d5e:	89fb      	ldrh	r3, [r7, #14]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <dec_lock+0x3a>
 8005d64:	89fb      	ldrh	r3, [r7, #14]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005d6a:	4a0e      	ldr	r2, [pc, #56]	; (8005da4 <dec_lock+0x74>)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	011b      	lsls	r3, r3, #4
 8005d70:	4413      	add	r3, r2
 8005d72:	330c      	adds	r3, #12
 8005d74:	89fa      	ldrh	r2, [r7, #14]
 8005d76:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005d78:	89fb      	ldrh	r3, [r7, #14]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d105      	bne.n	8005d8a <dec_lock+0x5a>
 8005d7e:	4a09      	ldr	r2, [pc, #36]	; (8005da4 <dec_lock+0x74>)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	4413      	add	r3, r2
 8005d86:	2200      	movs	r2, #0
 8005d88:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	737b      	strb	r3, [r7, #13]
 8005d8e:	e001      	b.n	8005d94 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005d90:	2302      	movs	r3, #2
 8005d92:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005d94:	7b7b      	ldrb	r3, [r7, #13]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	20000168 	.word	0x20000168

08005da8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b085      	sub	sp, #20
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005db0:	2300      	movs	r3, #0
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	e010      	b.n	8005dd8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005db6:	4a0d      	ldr	r2, [pc, #52]	; (8005dec <clear_lock+0x44>)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	011b      	lsls	r3, r3, #4
 8005dbc:	4413      	add	r3, r2
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d105      	bne.n	8005dd2 <clear_lock+0x2a>
 8005dc6:	4a09      	ldr	r2, [pc, #36]	; (8005dec <clear_lock+0x44>)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	011b      	lsls	r3, r3, #4
 8005dcc:	4413      	add	r3, r2
 8005dce:	2200      	movs	r2, #0
 8005dd0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d9eb      	bls.n	8005db6 <clear_lock+0xe>
	}
}
 8005dde:	bf00      	nop
 8005de0:	bf00      	nop
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	20000168 	.word	0x20000168

08005df0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	78db      	ldrb	r3, [r3, #3]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d034      	beq.n	8005e6e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e08:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	7858      	ldrb	r0, [r3, #1]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005e14:	2301      	movs	r3, #1
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	f7ff fd40 	bl	800589c <disk_write>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d002      	beq.n	8005e28 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005e22:	2301      	movs	r3, #1
 8005e24:	73fb      	strb	r3, [r7, #15]
 8005e26:	e022      	b.n	8005e6e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	1ad2      	subs	r2, r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d217      	bcs.n	8005e6e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	789b      	ldrb	r3, [r3, #2]
 8005e42:	613b      	str	r3, [r7, #16]
 8005e44:	e010      	b.n	8005e68 <sync_window+0x78>
					wsect += fs->fsize;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	7858      	ldrb	r0, [r3, #1]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	f7ff fd1d 	bl	800589c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	3b01      	subs	r3, #1
 8005e66:	613b      	str	r3, [r7, #16]
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d8eb      	bhi.n	8005e46 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3718      	adds	r7, #24
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005e82:	2300      	movs	r3, #0
 8005e84:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8a:	683a      	ldr	r2, [r7, #0]
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d01b      	beq.n	8005ec8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7ff ffad 	bl	8005df0 <sync_window>
 8005e96:	4603      	mov	r3, r0
 8005e98:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005e9a:	7bfb      	ldrb	r3, [r7, #15]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d113      	bne.n	8005ec8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	7858      	ldrb	r0, [r3, #1]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005eaa:	2301      	movs	r3, #1
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	f7ff fcd5 	bl	800585c <disk_read>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d004      	beq.n	8005ec2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8005ebc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	683a      	ldr	r2, [r7, #0]
 8005ec6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
	...

08005ed4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f7ff ff87 	bl	8005df0 <sync_window>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d158      	bne.n	8005f9e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	2b03      	cmp	r3, #3
 8005ef2:	d148      	bne.n	8005f86 <sync_fs+0xb2>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	791b      	ldrb	r3, [r3, #4]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d144      	bne.n	8005f86 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3330      	adds	r3, #48	; 0x30
 8005f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f04:	2100      	movs	r1, #0
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7ff fda9 	bl	8005a5e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	3330      	adds	r3, #48	; 0x30
 8005f10:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005f14:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7ff fd38 	bl	800598e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	3330      	adds	r3, #48	; 0x30
 8005f22:	4921      	ldr	r1, [pc, #132]	; (8005fa8 <sync_fs+0xd4>)
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7ff fd4d 	bl	80059c4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	3330      	adds	r3, #48	; 0x30
 8005f2e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005f32:	491e      	ldr	r1, [pc, #120]	; (8005fac <sync_fs+0xd8>)
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7ff fd45 	bl	80059c4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	3330      	adds	r3, #48	; 0x30
 8005f3e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	4619      	mov	r1, r3
 8005f48:	4610      	mov	r0, r2
 8005f4a:	f7ff fd3b 	bl	80059c4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	3330      	adds	r3, #48	; 0x30
 8005f52:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	4619      	mov	r1, r3
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	f7ff fd31 	bl	80059c4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	69db      	ldr	r3, [r3, #28]
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	7858      	ldrb	r0, [r3, #1]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	f7ff fc8e 	bl	800589c <disk_write>
			fs->fsi_flag = 0;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	785b      	ldrb	r3, [r3, #1]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7ff fca4 	bl	80058dc <disk_ioctl>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <sync_fs+0xca>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005f9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	41615252 	.word	0x41615252
 8005fac:	61417272 	.word	0x61417272

08005fb0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	3b02      	subs	r3, #2
 8005fbe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	3b02      	subs	r3, #2
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d301      	bcc.n	8005fd0 <clust2sect+0x20>
 8005fcc:	2300      	movs	r3, #0
 8005fce:	e008      	b.n	8005fe2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	895b      	ldrh	r3, [r3, #10]
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	fb03 f202 	mul.w	r2, r3, r2
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe0:	4413      	add	r3, r2
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b086      	sub	sp, #24
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
 8005ff6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2b01      	cmp	r3, #1
 8006002:	d904      	bls.n	800600e <get_fat+0x20>
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	695b      	ldr	r3, [r3, #20]
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	429a      	cmp	r2, r3
 800600c:	d302      	bcc.n	8006014 <get_fat+0x26>
		val = 1;	/* Internal error */
 800600e:	2301      	movs	r3, #1
 8006010:	617b      	str	r3, [r7, #20]
 8006012:	e08f      	b.n	8006134 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006014:	f04f 33ff 	mov.w	r3, #4294967295
 8006018:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	2b03      	cmp	r3, #3
 8006020:	d062      	beq.n	80060e8 <get_fat+0xfa>
 8006022:	2b03      	cmp	r3, #3
 8006024:	dc7c      	bgt.n	8006120 <get_fat+0x132>
 8006026:	2b01      	cmp	r3, #1
 8006028:	d002      	beq.n	8006030 <get_fat+0x42>
 800602a:	2b02      	cmp	r3, #2
 800602c:	d042      	beq.n	80060b4 <get_fat+0xc6>
 800602e:	e077      	b.n	8006120 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	085b      	lsrs	r3, r3, #1
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	4413      	add	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	6a1a      	ldr	r2, [r3, #32]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	0a5b      	lsrs	r3, r3, #9
 8006046:	4413      	add	r3, r2
 8006048:	4619      	mov	r1, r3
 800604a:	6938      	ldr	r0, [r7, #16]
 800604c:	f7ff ff14 	bl	8005e78 <move_window>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d167      	bne.n	8006126 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	60fa      	str	r2, [r7, #12]
 800605c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	4413      	add	r3, r2
 8006064:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006068:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	6a1a      	ldr	r2, [r3, #32]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	0a5b      	lsrs	r3, r3, #9
 8006072:	4413      	add	r3, r2
 8006074:	4619      	mov	r1, r3
 8006076:	6938      	ldr	r0, [r7, #16]
 8006078:	f7ff fefe 	bl	8005e78 <move_window>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d153      	bne.n	800612a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	4413      	add	r3, r2
 800608c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006090:	021b      	lsls	r3, r3, #8
 8006092:	461a      	mov	r2, r3
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	4313      	orrs	r3, r2
 8006098:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d002      	beq.n	80060aa <get_fat+0xbc>
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	091b      	lsrs	r3, r3, #4
 80060a8:	e002      	b.n	80060b0 <get_fat+0xc2>
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060b0:	617b      	str	r3, [r7, #20]
			break;
 80060b2:	e03f      	b.n	8006134 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	6a1a      	ldr	r2, [r3, #32]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	0a1b      	lsrs	r3, r3, #8
 80060bc:	4413      	add	r3, r2
 80060be:	4619      	mov	r1, r3
 80060c0:	6938      	ldr	r0, [r7, #16]
 80060c2:	f7ff fed9 	bl	8005e78 <move_window>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d130      	bne.n	800612e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80060da:	4413      	add	r3, r2
 80060dc:	4618      	mov	r0, r3
 80060de:	f7ff fc1b 	bl	8005918 <ld_word>
 80060e2:	4603      	mov	r3, r0
 80060e4:	617b      	str	r3, [r7, #20]
			break;
 80060e6:	e025      	b.n	8006134 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	6a1a      	ldr	r2, [r3, #32]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	09db      	lsrs	r3, r3, #7
 80060f0:	4413      	add	r3, r2
 80060f2:	4619      	mov	r1, r3
 80060f4:	6938      	ldr	r0, [r7, #16]
 80060f6:	f7ff febf 	bl	8005e78 <move_window>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d118      	bne.n	8006132 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800610e:	4413      	add	r3, r2
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff fc19 	bl	8005948 <ld_dword>
 8006116:	4603      	mov	r3, r0
 8006118:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800611c:	617b      	str	r3, [r7, #20]
			break;
 800611e:	e009      	b.n	8006134 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006120:	2301      	movs	r3, #1
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	e006      	b.n	8006134 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006126:	bf00      	nop
 8006128:	e004      	b.n	8006134 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800612a:	bf00      	nop
 800612c:	e002      	b.n	8006134 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800612e:	bf00      	nop
 8006130:	e000      	b.n	8006134 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006132:	bf00      	nop
		}
	}

	return val;
 8006134:	697b      	ldr	r3, [r7, #20]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3718      	adds	r7, #24
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800613e:	b590      	push	{r4, r7, lr}
 8006140:	b089      	sub	sp, #36	; 0x24
 8006142:	af00      	add	r7, sp, #0
 8006144:	60f8      	str	r0, [r7, #12]
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800614a:	2302      	movs	r3, #2
 800614c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	2b01      	cmp	r3, #1
 8006152:	f240 80d2 	bls.w	80062fa <put_fat+0x1bc>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	429a      	cmp	r2, r3
 800615e:	f080 80cc 	bcs.w	80062fa <put_fat+0x1bc>
		switch (fs->fs_type) {
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	2b03      	cmp	r3, #3
 8006168:	f000 8096 	beq.w	8006298 <put_fat+0x15a>
 800616c:	2b03      	cmp	r3, #3
 800616e:	f300 80cd 	bgt.w	800630c <put_fat+0x1ce>
 8006172:	2b01      	cmp	r3, #1
 8006174:	d002      	beq.n	800617c <put_fat+0x3e>
 8006176:	2b02      	cmp	r3, #2
 8006178:	d06e      	beq.n	8006258 <put_fat+0x11a>
 800617a:	e0c7      	b.n	800630c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	61bb      	str	r3, [r7, #24]
 8006180:	69bb      	ldr	r3, [r7, #24]
 8006182:	085b      	lsrs	r3, r3, #1
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	4413      	add	r3, r2
 8006188:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	6a1a      	ldr	r2, [r3, #32]
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	0a5b      	lsrs	r3, r3, #9
 8006192:	4413      	add	r3, r2
 8006194:	4619      	mov	r1, r3
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f7ff fe6e 	bl	8005e78 <move_window>
 800619c:	4603      	mov	r3, r0
 800619e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061a0:	7ffb      	ldrb	r3, [r7, #31]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f040 80ab 	bne.w	80062fe <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	1c59      	adds	r1, r3, #1
 80061b2:	61b9      	str	r1, [r7, #24]
 80061b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061b8:	4413      	add	r3, r2
 80061ba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00d      	beq.n	80061e2 <put_fat+0xa4>
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	b25b      	sxtb	r3, r3
 80061cc:	f003 030f 	and.w	r3, r3, #15
 80061d0:	b25a      	sxtb	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	011b      	lsls	r3, r3, #4
 80061d8:	b25b      	sxtb	r3, r3
 80061da:	4313      	orrs	r3, r2
 80061dc:	b25b      	sxtb	r3, r3
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	e001      	b.n	80061e6 <put_fat+0xa8>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2201      	movs	r2, #1
 80061ee:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6a1a      	ldr	r2, [r3, #32]
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	0a5b      	lsrs	r3, r3, #9
 80061f8:	4413      	add	r3, r2
 80061fa:	4619      	mov	r1, r3
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	f7ff fe3b 	bl	8005e78 <move_window>
 8006202:	4603      	mov	r3, r0
 8006204:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006206:	7ffb      	ldrb	r3, [r7, #31]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d17a      	bne.n	8006302 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006218:	4413      	add	r3, r2
 800621a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	2b00      	cmp	r3, #0
 8006224:	d003      	beq.n	800622e <put_fat+0xf0>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	091b      	lsrs	r3, r3, #4
 800622a:	b2db      	uxtb	r3, r3
 800622c:	e00e      	b.n	800624c <put_fat+0x10e>
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	b25b      	sxtb	r3, r3
 8006234:	f023 030f 	bic.w	r3, r3, #15
 8006238:	b25a      	sxtb	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	0a1b      	lsrs	r3, r3, #8
 800623e:	b25b      	sxtb	r3, r3
 8006240:	f003 030f 	and.w	r3, r3, #15
 8006244:	b25b      	sxtb	r3, r3
 8006246:	4313      	orrs	r3, r2
 8006248:	b25b      	sxtb	r3, r3
 800624a:	b2db      	uxtb	r3, r3
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2201      	movs	r2, #1
 8006254:	70da      	strb	r2, [r3, #3]
			break;
 8006256:	e059      	b.n	800630c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a1a      	ldr	r2, [r3, #32]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	0a1b      	lsrs	r3, r3, #8
 8006260:	4413      	add	r3, r2
 8006262:	4619      	mov	r1, r3
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f7ff fe07 	bl	8005e78 <move_window>
 800626a:	4603      	mov	r3, r0
 800626c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800626e:	7ffb      	ldrb	r3, [r7, #31]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d148      	bne.n	8006306 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	005b      	lsls	r3, r3, #1
 800627e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006282:	4413      	add	r3, r2
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	b292      	uxth	r2, r2
 8006288:	4611      	mov	r1, r2
 800628a:	4618      	mov	r0, r3
 800628c:	f7ff fb7f 	bl	800598e <st_word>
			fs->wflag = 1;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2201      	movs	r2, #1
 8006294:	70da      	strb	r2, [r3, #3]
			break;
 8006296:	e039      	b.n	800630c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6a1a      	ldr	r2, [r3, #32]
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	09db      	lsrs	r3, r3, #7
 80062a0:	4413      	add	r3, r2
 80062a2:	4619      	mov	r1, r3
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f7ff fde7 	bl	8005e78 <move_window>
 80062aa:	4603      	mov	r3, r0
 80062ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80062ae:	7ffb      	ldrb	r3, [r7, #31]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d12a      	bne.n	800630a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80062c8:	4413      	add	r3, r2
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff fb3c 	bl	8005948 <ld_dword>
 80062d0:	4603      	mov	r3, r0
 80062d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80062d6:	4323      	orrs	r3, r4
 80062d8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80062e8:	4413      	add	r3, r2
 80062ea:	6879      	ldr	r1, [r7, #4]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7ff fb69 	bl	80059c4 <st_dword>
			fs->wflag = 1;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	2201      	movs	r2, #1
 80062f6:	70da      	strb	r2, [r3, #3]
			break;
 80062f8:	e008      	b.n	800630c <put_fat+0x1ce>
		}
	}
 80062fa:	bf00      	nop
 80062fc:	e006      	b.n	800630c <put_fat+0x1ce>
			if (res != FR_OK) break;
 80062fe:	bf00      	nop
 8006300:	e004      	b.n	800630c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006302:	bf00      	nop
 8006304:	e002      	b.n	800630c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006306:	bf00      	nop
 8006308:	e000      	b.n	800630c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800630a:	bf00      	nop
	return res;
 800630c:	7ffb      	ldrb	r3, [r7, #31]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3724      	adds	r7, #36	; 0x24
 8006312:	46bd      	mov	sp, r7
 8006314:	bd90      	pop	{r4, r7, pc}

08006316 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006316:	b580      	push	{r7, lr}
 8006318:	b088      	sub	sp, #32
 800631a:	af00      	add	r7, sp, #0
 800631c:	60f8      	str	r0, [r7, #12]
 800631e:	60b9      	str	r1, [r7, #8]
 8006320:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d904      	bls.n	800633c <remove_chain+0x26>
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	429a      	cmp	r2, r3
 800633a:	d301      	bcc.n	8006340 <remove_chain+0x2a>
 800633c:	2302      	movs	r3, #2
 800633e:	e04b      	b.n	80063d8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00c      	beq.n	8006360 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006346:	f04f 32ff 	mov.w	r2, #4294967295
 800634a:	6879      	ldr	r1, [r7, #4]
 800634c:	69b8      	ldr	r0, [r7, #24]
 800634e:	f7ff fef6 	bl	800613e <put_fat>
 8006352:	4603      	mov	r3, r0
 8006354:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006356:	7ffb      	ldrb	r3, [r7, #31]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <remove_chain+0x4a>
 800635c:	7ffb      	ldrb	r3, [r7, #31]
 800635e:	e03b      	b.n	80063d8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006360:	68b9      	ldr	r1, [r7, #8]
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f7ff fe43 	bl	8005fee <get_fat>
 8006368:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d031      	beq.n	80063d4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d101      	bne.n	800637a <remove_chain+0x64>
 8006376:	2302      	movs	r3, #2
 8006378:	e02e      	b.n	80063d8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006380:	d101      	bne.n	8006386 <remove_chain+0x70>
 8006382:	2301      	movs	r3, #1
 8006384:	e028      	b.n	80063d8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006386:	2200      	movs	r2, #0
 8006388:	68b9      	ldr	r1, [r7, #8]
 800638a:	69b8      	ldr	r0, [r7, #24]
 800638c:	f7ff fed7 	bl	800613e <put_fat>
 8006390:	4603      	mov	r3, r0
 8006392:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006394:	7ffb      	ldrb	r3, [r7, #31]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <remove_chain+0x88>
 800639a:	7ffb      	ldrb	r3, [r7, #31]
 800639c:	e01c      	b.n	80063d8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	691a      	ldr	r2, [r3, #16]
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	3b02      	subs	r3, #2
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d20b      	bcs.n	80063c4 <remove_chain+0xae>
			fs->free_clst++;
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	1c5a      	adds	r2, r3, #1
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	791b      	ldrb	r3, [r3, #4]
 80063ba:	f043 0301 	orr.w	r3, r3, #1
 80063be:	b2da      	uxtb	r2, r3
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d3c6      	bcc.n	8006360 <remove_chain+0x4a>
 80063d2:	e000      	b.n	80063d6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80063d4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80063d6:	2300      	movs	r3, #0
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3720      	adds	r7, #32
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b088      	sub	sp, #32
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10d      	bne.n	8006412 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d004      	beq.n	800640c <create_chain+0x2c>
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	695b      	ldr	r3, [r3, #20]
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	429a      	cmp	r2, r3
 800640a:	d31b      	bcc.n	8006444 <create_chain+0x64>
 800640c:	2301      	movs	r3, #1
 800640e:	61bb      	str	r3, [r7, #24]
 8006410:	e018      	b.n	8006444 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006412:	6839      	ldr	r1, [r7, #0]
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f7ff fdea 	bl	8005fee <get_fat>
 800641a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d801      	bhi.n	8006426 <create_chain+0x46>
 8006422:	2301      	movs	r3, #1
 8006424:	e070      	b.n	8006508 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642c:	d101      	bne.n	8006432 <create_chain+0x52>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	e06a      	b.n	8006508 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	429a      	cmp	r2, r3
 800643a:	d201      	bcs.n	8006440 <create_chain+0x60>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	e063      	b.n	8006508 <create_chain+0x128>
		scl = clst;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	3301      	adds	r3, #1
 800644c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	69fa      	ldr	r2, [r7, #28]
 8006454:	429a      	cmp	r2, r3
 8006456:	d307      	bcc.n	8006468 <create_chain+0x88>
				ncl = 2;
 8006458:	2302      	movs	r3, #2
 800645a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800645c:	69fa      	ldr	r2, [r7, #28]
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	429a      	cmp	r2, r3
 8006462:	d901      	bls.n	8006468 <create_chain+0x88>
 8006464:	2300      	movs	r3, #0
 8006466:	e04f      	b.n	8006508 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006468:	69f9      	ldr	r1, [r7, #28]
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7ff fdbf 	bl	8005fee <get_fat>
 8006470:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00e      	beq.n	8006496 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d003      	beq.n	8006486 <create_chain+0xa6>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006484:	d101      	bne.n	800648a <create_chain+0xaa>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	e03e      	b.n	8006508 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800648a:	69fa      	ldr	r2, [r7, #28]
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	429a      	cmp	r2, r3
 8006490:	d1da      	bne.n	8006448 <create_chain+0x68>
 8006492:	2300      	movs	r3, #0
 8006494:	e038      	b.n	8006508 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006496:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006498:	f04f 32ff 	mov.w	r2, #4294967295
 800649c:	69f9      	ldr	r1, [r7, #28]
 800649e:	6938      	ldr	r0, [r7, #16]
 80064a0:	f7ff fe4d 	bl	800613e <put_fat>
 80064a4:	4603      	mov	r3, r0
 80064a6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80064a8:	7dfb      	ldrb	r3, [r7, #23]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d109      	bne.n	80064c2 <create_chain+0xe2>
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d006      	beq.n	80064c2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80064b4:	69fa      	ldr	r2, [r7, #28]
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6938      	ldr	r0, [r7, #16]
 80064ba:	f7ff fe40 	bl	800613e <put_fat>
 80064be:	4603      	mov	r3, r0
 80064c0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80064c2:	7dfb      	ldrb	r3, [r7, #23]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d116      	bne.n	80064f6 <create_chain+0x116>
		fs->last_clst = ncl;
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	69fa      	ldr	r2, [r7, #28]
 80064cc:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	691a      	ldr	r2, [r3, #16]
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	3b02      	subs	r3, #2
 80064d8:	429a      	cmp	r2, r3
 80064da:	d804      	bhi.n	80064e6 <create_chain+0x106>
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	1e5a      	subs	r2, r3, #1
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	791b      	ldrb	r3, [r3, #4]
 80064ea:	f043 0301 	orr.w	r3, r3, #1
 80064ee:	b2da      	uxtb	r2, r3
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	711a      	strb	r2, [r3, #4]
 80064f4:	e007      	b.n	8006506 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80064f6:	7dfb      	ldrb	r3, [r7, #23]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d102      	bne.n	8006502 <create_chain+0x122>
 80064fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006500:	e000      	b.n	8006504 <create_chain+0x124>
 8006502:	2301      	movs	r3, #1
 8006504:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006506:	69fb      	ldr	r3, [r7, #28]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3720      	adds	r7, #32
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006510:	b480      	push	{r7}
 8006512:	b087      	sub	sp, #28
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006524:	3304      	adds	r3, #4
 8006526:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	0a5b      	lsrs	r3, r3, #9
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	8952      	ldrh	r2, [r2, #10]
 8006530:	fbb3 f3f2 	udiv	r3, r3, r2
 8006534:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	1d1a      	adds	r2, r3, #4
 800653a:	613a      	str	r2, [r7, #16]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <clmt_clust+0x3a>
 8006546:	2300      	movs	r3, #0
 8006548:	e010      	b.n	800656c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	429a      	cmp	r2, r3
 8006550:	d307      	bcc.n	8006562 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	617b      	str	r3, [r7, #20]
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	3304      	adds	r3, #4
 800655e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006560:	e7e9      	b.n	8006536 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006562:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	4413      	add	r3, r2
}
 800656c:	4618      	mov	r0, r3
 800656e:	371c      	adds	r7, #28
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800658e:	d204      	bcs.n	800659a <dir_sdi+0x22>
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	f003 031f 	and.w	r3, r3, #31
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <dir_sdi+0x26>
		return FR_INT_ERR;
 800659a:	2302      	movs	r3, #2
 800659c:	e063      	b.n	8006666 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d106      	bne.n	80065be <dir_sdi+0x46>
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d902      	bls.n	80065be <dir_sdi+0x46>
		clst = fs->dirbase;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065bc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d10c      	bne.n	80065de <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	095b      	lsrs	r3, r3, #5
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	8912      	ldrh	r2, [r2, #8]
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d301      	bcc.n	80065d4 <dir_sdi+0x5c>
 80065d0:	2302      	movs	r3, #2
 80065d2:	e048      	b.n	8006666 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	61da      	str	r2, [r3, #28]
 80065dc:	e029      	b.n	8006632 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	895b      	ldrh	r3, [r3, #10]
 80065e2:	025b      	lsls	r3, r3, #9
 80065e4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80065e6:	e019      	b.n	800661c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6979      	ldr	r1, [r7, #20]
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7ff fcfe 	bl	8005fee <get_fat>
 80065f2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fa:	d101      	bne.n	8006600 <dir_sdi+0x88>
 80065fc:	2301      	movs	r3, #1
 80065fe:	e032      	b.n	8006666 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d904      	bls.n	8006610 <dir_sdi+0x98>
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	429a      	cmp	r2, r3
 800660e:	d301      	bcc.n	8006614 <dir_sdi+0x9c>
 8006610:	2302      	movs	r3, #2
 8006612:	e028      	b.n	8006666 <dir_sdi+0xee>
			ofs -= csz;
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	1ad3      	subs	r3, r2, r3
 800661a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800661c:	683a      	ldr	r2, [r7, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	429a      	cmp	r2, r3
 8006622:	d2e1      	bcs.n	80065e8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006624:	6979      	ldr	r1, [r7, #20]
 8006626:	6938      	ldr	r0, [r7, #16]
 8006628:	f7ff fcc2 	bl	8005fb0 <clust2sect>
 800662c:	4602      	mov	r2, r0
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	697a      	ldr	r2, [r7, #20]
 8006636:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	69db      	ldr	r3, [r3, #28]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d101      	bne.n	8006644 <dir_sdi+0xcc>
 8006640:	2302      	movs	r3, #2
 8006642:	e010      	b.n	8006666 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	69da      	ldr	r2, [r3, #28]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	0a5b      	lsrs	r3, r3, #9
 800664c:	441a      	add	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800665e:	441a      	add	r2, r3
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b086      	sub	sp, #24
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
 8006676:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	3320      	adds	r3, #32
 8006684:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <dir_next+0x28>
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006694:	d301      	bcc.n	800669a <dir_next+0x2c>
 8006696:	2304      	movs	r3, #4
 8006698:	e0aa      	b.n	80067f0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f040 8098 	bne.w	80067d6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	1c5a      	adds	r2, r3, #1
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10b      	bne.n	80066d0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	095b      	lsrs	r3, r3, #5
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	8912      	ldrh	r2, [r2, #8]
 80066c0:	4293      	cmp	r3, r2
 80066c2:	f0c0 8088 	bcc.w	80067d6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	61da      	str	r2, [r3, #28]
 80066cc:	2304      	movs	r3, #4
 80066ce:	e08f      	b.n	80067f0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	0a5b      	lsrs	r3, r3, #9
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	8952      	ldrh	r2, [r2, #10]
 80066d8:	3a01      	subs	r2, #1
 80066da:	4013      	ands	r3, r2
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d17a      	bne.n	80067d6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	4619      	mov	r1, r3
 80066e8:	4610      	mov	r0, r2
 80066ea:	f7ff fc80 	bl	8005fee <get_fat>
 80066ee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d801      	bhi.n	80066fa <dir_next+0x8c>
 80066f6:	2302      	movs	r3, #2
 80066f8:	e07a      	b.n	80067f0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006700:	d101      	bne.n	8006706 <dir_next+0x98>
 8006702:	2301      	movs	r3, #1
 8006704:	e074      	b.n	80067f0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	695b      	ldr	r3, [r3, #20]
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	429a      	cmp	r2, r3
 800670e:	d358      	bcc.n	80067c2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d104      	bne.n	8006720 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	61da      	str	r2, [r3, #28]
 800671c:	2304      	movs	r3, #4
 800671e:	e067      	b.n	80067f0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	4619      	mov	r1, r3
 8006728:	4610      	mov	r0, r2
 800672a:	f7ff fe59 	bl	80063e0 <create_chain>
 800672e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <dir_next+0xcc>
 8006736:	2307      	movs	r3, #7
 8006738:	e05a      	b.n	80067f0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d101      	bne.n	8006744 <dir_next+0xd6>
 8006740:	2302      	movs	r3, #2
 8006742:	e055      	b.n	80067f0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674a:	d101      	bne.n	8006750 <dir_next+0xe2>
 800674c:	2301      	movs	r3, #1
 800674e:	e04f      	b.n	80067f0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f7ff fb4d 	bl	8005df0 <sync_window>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d001      	beq.n	8006760 <dir_next+0xf2>
 800675c:	2301      	movs	r3, #1
 800675e:	e047      	b.n	80067f0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	3330      	adds	r3, #48	; 0x30
 8006764:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006768:	2100      	movs	r1, #0
 800676a:	4618      	mov	r0, r3
 800676c:	f7ff f977 	bl	8005a5e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006770:	2300      	movs	r3, #0
 8006772:	613b      	str	r3, [r7, #16]
 8006774:	6979      	ldr	r1, [r7, #20]
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f7ff fc1a 	bl	8005fb0 <clust2sect>
 800677c:	4602      	mov	r2, r0
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	62da      	str	r2, [r3, #44]	; 0x2c
 8006782:	e012      	b.n	80067aa <dir_next+0x13c>
						fs->wflag = 1;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2201      	movs	r2, #1
 8006788:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f7ff fb30 	bl	8005df0 <sync_window>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <dir_next+0x12c>
 8006796:	2301      	movs	r3, #1
 8006798:	e02a      	b.n	80067f0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	3301      	adds	r3, #1
 800679e:	613b      	str	r3, [r7, #16]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a4:	1c5a      	adds	r2, r3, #1
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	895b      	ldrh	r3, [r3, #10]
 80067ae:	461a      	mov	r2, r3
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d3e6      	bcc.n	8006784 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	1ad2      	subs	r2, r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	697a      	ldr	r2, [r7, #20]
 80067c6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80067c8:	6979      	ldr	r1, [r7, #20]
 80067ca:	68f8      	ldr	r0, [r7, #12]
 80067cc:	f7ff fbf0 	bl	8005fb0 <clust2sect>
 80067d0:	4602      	mov	r2, r0
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067e8:	441a      	add	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3718      	adds	r7, #24
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b086      	sub	sp, #24
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006808:	2100      	movs	r1, #0
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7ff feb4 	bl	8006578 <dir_sdi>
 8006810:	4603      	mov	r3, r0
 8006812:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006814:	7dfb      	ldrb	r3, [r7, #23]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d12b      	bne.n	8006872 <dir_alloc+0x7a>
		n = 0;
 800681a:	2300      	movs	r3, #0
 800681c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	69db      	ldr	r3, [r3, #28]
 8006822:	4619      	mov	r1, r3
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f7ff fb27 	bl	8005e78 <move_window>
 800682a:	4603      	mov	r3, r0
 800682c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800682e:	7dfb      	ldrb	r3, [r7, #23]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d11d      	bne.n	8006870 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	2be5      	cmp	r3, #229	; 0xe5
 800683c:	d004      	beq.n	8006848 <dir_alloc+0x50>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d107      	bne.n	8006858 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	3301      	adds	r3, #1
 800684c:	613b      	str	r3, [r7, #16]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	429a      	cmp	r2, r3
 8006854:	d102      	bne.n	800685c <dir_alloc+0x64>
 8006856:	e00c      	b.n	8006872 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006858:	2300      	movs	r3, #0
 800685a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800685c:	2101      	movs	r1, #1
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7ff ff05 	bl	800666e <dir_next>
 8006864:	4603      	mov	r3, r0
 8006866:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006868:	7dfb      	ldrb	r3, [r7, #23]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d0d7      	beq.n	800681e <dir_alloc+0x26>
 800686e:	e000      	b.n	8006872 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006870:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006872:	7dfb      	ldrb	r3, [r7, #23]
 8006874:	2b04      	cmp	r3, #4
 8006876:	d101      	bne.n	800687c <dir_alloc+0x84>
 8006878:	2307      	movs	r3, #7
 800687a:	75fb      	strb	r3, [r7, #23]
	return res;
 800687c:	7dfb      	ldrb	r3, [r7, #23]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3718      	adds	r7, #24
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b084      	sub	sp, #16
 800688a:	af00      	add	r7, sp, #0
 800688c:	6078      	str	r0, [r7, #4]
 800688e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	331a      	adds	r3, #26
 8006894:	4618      	mov	r0, r3
 8006896:	f7ff f83f 	bl	8005918 <ld_word>
 800689a:	4603      	mov	r3, r0
 800689c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	2b03      	cmp	r3, #3
 80068a4:	d109      	bne.n	80068ba <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	3314      	adds	r3, #20
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7ff f834 	bl	8005918 <ld_word>
 80068b0:	4603      	mov	r3, r0
 80068b2:	041b      	lsls	r3, r3, #16
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80068ba:	68fb      	ldr	r3, [r7, #12]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	331a      	adds	r3, #26
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	b292      	uxth	r2, r2
 80068d8:	4611      	mov	r1, r2
 80068da:	4618      	mov	r0, r3
 80068dc:	f7ff f857 	bl	800598e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	2b03      	cmp	r3, #3
 80068e6:	d109      	bne.n	80068fc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	f103 0214 	add.w	r2, r3, #20
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	0c1b      	lsrs	r3, r3, #16
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	4619      	mov	r1, r3
 80068f6:	4610      	mov	r0, r2
 80068f8:	f7ff f849 	bl	800598e <st_word>
	}
}
 80068fc:	bf00      	nop
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b086      	sub	sp, #24
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006912:	2100      	movs	r1, #0
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f7ff fe2f 	bl	8006578 <dir_sdi>
 800691a:	4603      	mov	r3, r0
 800691c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800691e:	7dfb      	ldrb	r3, [r7, #23]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d001      	beq.n	8006928 <dir_find+0x24>
 8006924:	7dfb      	ldrb	r3, [r7, #23]
 8006926:	e03e      	b.n	80069a6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	4619      	mov	r1, r3
 800692e:	6938      	ldr	r0, [r7, #16]
 8006930:	f7ff faa2 	bl	8005e78 <move_window>
 8006934:	4603      	mov	r3, r0
 8006936:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006938:	7dfb      	ldrb	r3, [r7, #23]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d12f      	bne.n	800699e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6a1b      	ldr	r3, [r3, #32]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006946:	7bfb      	ldrb	r3, [r7, #15]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d102      	bne.n	8006952 <dir_find+0x4e>
 800694c:	2304      	movs	r3, #4
 800694e:	75fb      	strb	r3, [r7, #23]
 8006950:	e028      	b.n	80069a4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	330b      	adds	r3, #11
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800695e:	b2da      	uxtb	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6a1b      	ldr	r3, [r3, #32]
 8006968:	330b      	adds	r3, #11
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	f003 0308 	and.w	r3, r3, #8
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10a      	bne.n	800698a <dir_find+0x86>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a18      	ldr	r0, [r3, #32]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	3324      	adds	r3, #36	; 0x24
 800697c:	220b      	movs	r2, #11
 800697e:	4619      	mov	r1, r3
 8006980:	f7ff f888 	bl	8005a94 <mem_cmp>
 8006984:	4603      	mov	r3, r0
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00b      	beq.n	80069a2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800698a:	2100      	movs	r1, #0
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7ff fe6e 	bl	800666e <dir_next>
 8006992:	4603      	mov	r3, r0
 8006994:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006996:	7dfb      	ldrb	r3, [r7, #23]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d0c5      	beq.n	8006928 <dir_find+0x24>
 800699c:	e002      	b.n	80069a4 <dir_find+0xa0>
		if (res != FR_OK) break;
 800699e:	bf00      	nop
 80069a0:	e000      	b.n	80069a4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80069a2:	bf00      	nop

	return res;
 80069a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3718      	adds	r7, #24
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b084      	sub	sp, #16
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80069bc:	2101      	movs	r1, #1
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f7ff ff1a 	bl	80067f8 <dir_alloc>
 80069c4:	4603      	mov	r3, r0
 80069c6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d11c      	bne.n	8006a08 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	4619      	mov	r1, r3
 80069d4:	68b8      	ldr	r0, [r7, #8]
 80069d6:	f7ff fa4f 	bl	8005e78 <move_window>
 80069da:	4603      	mov	r3, r0
 80069dc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80069de:	7bfb      	ldrb	r3, [r7, #15]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d111      	bne.n	8006a08 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a1b      	ldr	r3, [r3, #32]
 80069e8:	2220      	movs	r2, #32
 80069ea:	2100      	movs	r1, #0
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7ff f836 	bl	8005a5e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a18      	ldr	r0, [r3, #32]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	3324      	adds	r3, #36	; 0x24
 80069fa:	220b      	movs	r2, #11
 80069fc:	4619      	mov	r1, r3
 80069fe:	f7ff f80d 	bl	8005a1c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2201      	movs	r2, #1
 8006a06:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
	...

08006a14 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b088      	sub	sp, #32
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	60fb      	str	r3, [r7, #12]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	3324      	adds	r3, #36	; 0x24
 8006a28:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8006a2a:	220b      	movs	r2, #11
 8006a2c:	2120      	movs	r1, #32
 8006a2e:	68b8      	ldr	r0, [r7, #8]
 8006a30:	f7ff f815 	bl	8005a5e <mem_set>
	si = i = 0; ni = 8;
 8006a34:	2300      	movs	r3, #0
 8006a36:	613b      	str	r3, [r7, #16]
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	61fb      	str	r3, [r7, #28]
 8006a3c:	2308      	movs	r3, #8
 8006a3e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	1c5a      	adds	r2, r3, #1
 8006a44:	61fa      	str	r2, [r7, #28]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	4413      	add	r3, r2
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006a4e:	7efb      	ldrb	r3, [r7, #27]
 8006a50:	2b20      	cmp	r3, #32
 8006a52:	d94e      	bls.n	8006af2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006a54:	7efb      	ldrb	r3, [r7, #27]
 8006a56:	2b2f      	cmp	r3, #47	; 0x2f
 8006a58:	d006      	beq.n	8006a68 <create_name+0x54>
 8006a5a:	7efb      	ldrb	r3, [r7, #27]
 8006a5c:	2b5c      	cmp	r3, #92	; 0x5c
 8006a5e:	d110      	bne.n	8006a82 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006a60:	e002      	b.n	8006a68 <create_name+0x54>
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	3301      	adds	r3, #1
 8006a66:	61fb      	str	r3, [r7, #28]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	2b2f      	cmp	r3, #47	; 0x2f
 8006a72:	d0f6      	beq.n	8006a62 <create_name+0x4e>
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	4413      	add	r3, r2
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	2b5c      	cmp	r3, #92	; 0x5c
 8006a7e:	d0f0      	beq.n	8006a62 <create_name+0x4e>
			break;
 8006a80:	e038      	b.n	8006af4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006a82:	7efb      	ldrb	r3, [r7, #27]
 8006a84:	2b2e      	cmp	r3, #46	; 0x2e
 8006a86:	d003      	beq.n	8006a90 <create_name+0x7c>
 8006a88:	693a      	ldr	r2, [r7, #16]
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d30c      	bcc.n	8006aaa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	2b0b      	cmp	r3, #11
 8006a94:	d002      	beq.n	8006a9c <create_name+0x88>
 8006a96:	7efb      	ldrb	r3, [r7, #27]
 8006a98:	2b2e      	cmp	r3, #46	; 0x2e
 8006a9a:	d001      	beq.n	8006aa0 <create_name+0x8c>
 8006a9c:	2306      	movs	r3, #6
 8006a9e:	e044      	b.n	8006b2a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8006aa0:	2308      	movs	r3, #8
 8006aa2:	613b      	str	r3, [r7, #16]
 8006aa4:	230b      	movs	r3, #11
 8006aa6:	617b      	str	r3, [r7, #20]
			continue;
 8006aa8:	e022      	b.n	8006af0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006aaa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	da04      	bge.n	8006abc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006ab2:	7efb      	ldrb	r3, [r7, #27]
 8006ab4:	3b80      	subs	r3, #128	; 0x80
 8006ab6:	4a1f      	ldr	r2, [pc, #124]	; (8006b34 <create_name+0x120>)
 8006ab8:	5cd3      	ldrb	r3, [r2, r3]
 8006aba:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006abc:	7efb      	ldrb	r3, [r7, #27]
 8006abe:	4619      	mov	r1, r3
 8006ac0:	481d      	ldr	r0, [pc, #116]	; (8006b38 <create_name+0x124>)
 8006ac2:	f7ff f80e 	bl	8005ae2 <chk_chr>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d001      	beq.n	8006ad0 <create_name+0xbc>
 8006acc:	2306      	movs	r3, #6
 8006ace:	e02c      	b.n	8006b2a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006ad0:	7efb      	ldrb	r3, [r7, #27]
 8006ad2:	2b60      	cmp	r3, #96	; 0x60
 8006ad4:	d905      	bls.n	8006ae2 <create_name+0xce>
 8006ad6:	7efb      	ldrb	r3, [r7, #27]
 8006ad8:	2b7a      	cmp	r3, #122	; 0x7a
 8006ada:	d802      	bhi.n	8006ae2 <create_name+0xce>
 8006adc:	7efb      	ldrb	r3, [r7, #27]
 8006ade:	3b20      	subs	r3, #32
 8006ae0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	1c5a      	adds	r2, r3, #1
 8006ae6:	613a      	str	r2, [r7, #16]
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	4413      	add	r3, r2
 8006aec:	7efa      	ldrb	r2, [r7, #27]
 8006aee:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006af0:	e7a6      	b.n	8006a40 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006af2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	441a      	add	r2, r3
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d101      	bne.n	8006b08 <create_name+0xf4>
 8006b04:	2306      	movs	r3, #6
 8006b06:	e010      	b.n	8006b2a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	2be5      	cmp	r3, #229	; 0xe5
 8006b0e:	d102      	bne.n	8006b16 <create_name+0x102>
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2205      	movs	r2, #5
 8006b14:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006b16:	7efb      	ldrb	r3, [r7, #27]
 8006b18:	2b20      	cmp	r3, #32
 8006b1a:	d801      	bhi.n	8006b20 <create_name+0x10c>
 8006b1c:	2204      	movs	r2, #4
 8006b1e:	e000      	b.n	8006b22 <create_name+0x10e>
 8006b20:	2200      	movs	r2, #0
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	330b      	adds	r3, #11
 8006b26:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006b28:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3720      	adds	r7, #32
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	08007f50 	.word	0x08007f50
 8006b38:	08007ee0 	.word	0x08007ee0

08006b3c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006b50:	e002      	b.n	8006b58 <follow_path+0x1c>
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	3301      	adds	r3, #1
 8006b56:	603b      	str	r3, [r7, #0]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	2b2f      	cmp	r3, #47	; 0x2f
 8006b5e:	d0f8      	beq.n	8006b52 <follow_path+0x16>
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	2b5c      	cmp	r3, #92	; 0x5c
 8006b66:	d0f4      	beq.n	8006b52 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	2b1f      	cmp	r3, #31
 8006b74:	d80a      	bhi.n	8006b8c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2280      	movs	r2, #128	; 0x80
 8006b7a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006b7e:	2100      	movs	r1, #0
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f7ff fcf9 	bl	8006578 <dir_sdi>
 8006b86:	4603      	mov	r3, r0
 8006b88:	75fb      	strb	r3, [r7, #23]
 8006b8a:	e043      	b.n	8006c14 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006b8c:	463b      	mov	r3, r7
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7ff ff3f 	bl	8006a14 <create_name>
 8006b96:	4603      	mov	r3, r0
 8006b98:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006b9a:	7dfb      	ldrb	r3, [r7, #23]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d134      	bne.n	8006c0a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f7ff feaf 	bl	8006904 <dir_find>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006bb0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006bb2:	7dfb      	ldrb	r3, [r7, #23]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00a      	beq.n	8006bce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006bb8:	7dfb      	ldrb	r3, [r7, #23]
 8006bba:	2b04      	cmp	r3, #4
 8006bbc:	d127      	bne.n	8006c0e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006bbe:	7afb      	ldrb	r3, [r7, #11]
 8006bc0:	f003 0304 	and.w	r3, r3, #4
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d122      	bne.n	8006c0e <follow_path+0xd2>
 8006bc8:	2305      	movs	r3, #5
 8006bca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006bcc:	e01f      	b.n	8006c0e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006bce:	7afb      	ldrb	r3, [r7, #11]
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d11c      	bne.n	8006c12 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	799b      	ldrb	r3, [r3, #6]
 8006bdc:	f003 0310 	and.w	r3, r3, #16
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d102      	bne.n	8006bea <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006be4:	2305      	movs	r3, #5
 8006be6:	75fb      	strb	r3, [r7, #23]
 8006be8:	e014      	b.n	8006c14 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	695b      	ldr	r3, [r3, #20]
 8006bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf8:	4413      	add	r3, r2
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f7ff fe42 	bl	8006886 <ld_clust>
 8006c02:	4602      	mov	r2, r0
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006c08:	e7c0      	b.n	8006b8c <follow_path+0x50>
			if (res != FR_OK) break;
 8006c0a:	bf00      	nop
 8006c0c:	e002      	b.n	8006c14 <follow_path+0xd8>
				break;
 8006c0e:	bf00      	nop
 8006c10:	e000      	b.n	8006c14 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006c12:	bf00      	nop
			}
		}
	}

	return res;
 8006c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006c1e:	b480      	push	{r7}
 8006c20:	b087      	sub	sp, #28
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006c26:	f04f 33ff 	mov.w	r3, #4294967295
 8006c2a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d031      	beq.n	8006c98 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	617b      	str	r3, [r7, #20]
 8006c3a:	e002      	b.n	8006c42 <get_ldnumber+0x24>
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	617b      	str	r3, [r7, #20]
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	2b20      	cmp	r3, #32
 8006c48:	d903      	bls.n	8006c52 <get_ldnumber+0x34>
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	2b3a      	cmp	r3, #58	; 0x3a
 8006c50:	d1f4      	bne.n	8006c3c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	2b3a      	cmp	r3, #58	; 0x3a
 8006c58:	d11c      	bne.n	8006c94 <get_ldnumber+0x76>
			tp = *path;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	1c5a      	adds	r2, r3, #1
 8006c64:	60fa      	str	r2, [r7, #12]
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	3b30      	subs	r3, #48	; 0x30
 8006c6a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2b09      	cmp	r3, #9
 8006c70:	d80e      	bhi.n	8006c90 <get_ldnumber+0x72>
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d10a      	bne.n	8006c90 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d107      	bne.n	8006c90 <get_ldnumber+0x72>
					vol = (int)i;
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	3301      	adds	r3, #1
 8006c88:	617b      	str	r3, [r7, #20]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	697a      	ldr	r2, [r7, #20]
 8006c8e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	e002      	b.n	8006c9a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006c94:	2300      	movs	r3, #0
 8006c96:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006c98:	693b      	ldr	r3, [r7, #16]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	371c      	adds	r7, #28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
	...

08006ca8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	70da      	strb	r2, [r3, #3]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f04f 32ff 	mov.w	r2, #4294967295
 8006cbe:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006cc0:	6839      	ldr	r1, [r7, #0]
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7ff f8d8 	bl	8005e78 <move_window>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <check_fs+0x2a>
 8006cce:	2304      	movs	r3, #4
 8006cd0:	e038      	b.n	8006d44 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	3330      	adds	r3, #48	; 0x30
 8006cd6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7fe fe1c 	bl	8005918 <ld_word>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d001      	beq.n	8006cf0 <check_fs+0x48>
 8006cec:	2303      	movs	r3, #3
 8006cee:	e029      	b.n	8006d44 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006cf6:	2be9      	cmp	r3, #233	; 0xe9
 8006cf8:	d009      	beq.n	8006d0e <check_fs+0x66>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d00:	2beb      	cmp	r3, #235	; 0xeb
 8006d02:	d11e      	bne.n	8006d42 <check_fs+0x9a>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006d0a:	2b90      	cmp	r3, #144	; 0x90
 8006d0c:	d119      	bne.n	8006d42 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	3330      	adds	r3, #48	; 0x30
 8006d12:	3336      	adds	r3, #54	; 0x36
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7fe fe17 	bl	8005948 <ld_dword>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006d20:	4a0a      	ldr	r2, [pc, #40]	; (8006d4c <check_fs+0xa4>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d101      	bne.n	8006d2a <check_fs+0x82>
 8006d26:	2300      	movs	r3, #0
 8006d28:	e00c      	b.n	8006d44 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	3330      	adds	r3, #48	; 0x30
 8006d2e:	3352      	adds	r3, #82	; 0x52
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7fe fe09 	bl	8005948 <ld_dword>
 8006d36:	4603      	mov	r3, r0
 8006d38:	4a05      	ldr	r2, [pc, #20]	; (8006d50 <check_fs+0xa8>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d101      	bne.n	8006d42 <check_fs+0x9a>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	e000      	b.n	8006d44 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006d42:	2302      	movs	r3, #2
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	00544146 	.word	0x00544146
 8006d50:	33544146 	.word	0x33544146

08006d54 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b096      	sub	sp, #88	; 0x58
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2200      	movs	r2, #0
 8006d66:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f7ff ff58 	bl	8006c1e <get_ldnumber>
 8006d6e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	da01      	bge.n	8006d7a <find_volume+0x26>
 8006d76:	230b      	movs	r3, #11
 8006d78:	e22d      	b.n	80071d6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006d7a:	4aa1      	ldr	r2, [pc, #644]	; (8007000 <find_volume+0x2ac>)
 8006d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d82:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <find_volume+0x3a>
 8006d8a:	230c      	movs	r3, #12
 8006d8c:	e223      	b.n	80071d6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d92:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006d94:	79fb      	ldrb	r3, [r7, #7]
 8006d96:	f023 0301 	bic.w	r3, r3, #1
 8006d9a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d01a      	beq.n	8006dda <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006da6:	785b      	ldrb	r3, [r3, #1]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7fe fd17 	bl	80057dc <disk_status>
 8006dae:	4603      	mov	r3, r0
 8006db0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006db4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10c      	bne.n	8006dda <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006dc0:	79fb      	ldrb	r3, [r7, #7]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d007      	beq.n	8006dd6 <find_volume+0x82>
 8006dc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006dca:	f003 0304 	and.w	r3, r3, #4
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006dd2:	230a      	movs	r3, #10
 8006dd4:	e1ff      	b.n	80071d6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	e1fd      	b.n	80071d6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ddc:	2200      	movs	r2, #0
 8006dde:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dea:	785b      	ldrb	r3, [r3, #1]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7fe fd0f 	bl	8005810 <disk_initialize>
 8006df2:	4603      	mov	r3, r0
 8006df4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006df8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006dfc:	f003 0301 	and.w	r3, r3, #1
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006e04:	2303      	movs	r3, #3
 8006e06:	e1e6      	b.n	80071d6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006e08:	79fb      	ldrb	r3, [r7, #7]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d007      	beq.n	8006e1e <find_volume+0xca>
 8006e0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006e12:	f003 0304 	and.w	r3, r3, #4
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d001      	beq.n	8006e1e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006e1a:	230a      	movs	r3, #10
 8006e1c:	e1db      	b.n	80071d6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006e22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006e26:	f7ff ff3f 	bl	8006ca8 <check_fs>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006e30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d149      	bne.n	8006ecc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006e38:	2300      	movs	r3, #0
 8006e3a:	643b      	str	r3, [r7, #64]	; 0x40
 8006e3c:	e01e      	b.n	8006e7c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e40:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e46:	011b      	lsls	r3, r3, #4
 8006e48:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8006e4c:	4413      	add	r3, r2
 8006e4e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e52:	3304      	adds	r3, #4
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d006      	beq.n	8006e68 <find_volume+0x114>
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5c:	3308      	adds	r3, #8
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fe fd72 	bl	8005948 <ld_dword>
 8006e64:	4602      	mov	r2, r0
 8006e66:	e000      	b.n	8006e6a <find_volume+0x116>
 8006e68:	2200      	movs	r2, #0
 8006e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	3358      	adds	r3, #88	; 0x58
 8006e70:	443b      	add	r3, r7
 8006e72:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e78:	3301      	adds	r3, #1
 8006e7a:	643b      	str	r3, [r7, #64]	; 0x40
 8006e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e7e:	2b03      	cmp	r3, #3
 8006e80:	d9dd      	bls.n	8006e3e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006e82:	2300      	movs	r3, #0
 8006e84:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d002      	beq.n	8006e92 <find_volume+0x13e>
 8006e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e8e:	3b01      	subs	r3, #1
 8006e90:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	3358      	adds	r3, #88	; 0x58
 8006e98:	443b      	add	r3, r7
 8006e9a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006e9e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d005      	beq.n	8006eb2 <find_volume+0x15e>
 8006ea6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ea8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006eaa:	f7ff fefd 	bl	8006ca8 <check_fs>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	e000      	b.n	8006eb4 <find_volume+0x160>
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006eb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d905      	bls.n	8006ecc <find_volume+0x178>
 8006ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	643b      	str	r3, [r7, #64]	; 0x40
 8006ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ec8:	2b03      	cmp	r3, #3
 8006eca:	d9e2      	bls.n	8006e92 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006ecc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ed0:	2b04      	cmp	r3, #4
 8006ed2:	d101      	bne.n	8006ed8 <find_volume+0x184>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e17e      	b.n	80071d6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006ed8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d901      	bls.n	8006ee4 <find_volume+0x190>
 8006ee0:	230d      	movs	r3, #13
 8006ee2:	e178      	b.n	80071d6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee6:	3330      	adds	r3, #48	; 0x30
 8006ee8:	330b      	adds	r3, #11
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7fe fd14 	bl	8005918 <ld_word>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ef6:	d001      	beq.n	8006efc <find_volume+0x1a8>
 8006ef8:	230d      	movs	r3, #13
 8006efa:	e16c      	b.n	80071d6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efe:	3330      	adds	r3, #48	; 0x30
 8006f00:	3316      	adds	r3, #22
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7fe fd08 	bl	8005918 <ld_word>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d106      	bne.n	8006f20 <find_volume+0x1cc>
 8006f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f14:	3330      	adds	r3, #48	; 0x30
 8006f16:	3324      	adds	r3, #36	; 0x24
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7fe fd15 	bl	8005948 <ld_dword>
 8006f1e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f24:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f28:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f2e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f32:	789b      	ldrb	r3, [r3, #2]
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d005      	beq.n	8006f44 <find_volume+0x1f0>
 8006f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3a:	789b      	ldrb	r3, [r3, #2]
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d001      	beq.n	8006f44 <find_volume+0x1f0>
 8006f40:	230d      	movs	r3, #13
 8006f42:	e148      	b.n	80071d6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f46:	789b      	ldrb	r3, [r3, #2]
 8006f48:	461a      	mov	r2, r3
 8006f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f4c:	fb02 f303 	mul.w	r3, r2, r3
 8006f50:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f5c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f60:	895b      	ldrh	r3, [r3, #10]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d008      	beq.n	8006f78 <find_volume+0x224>
 8006f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f68:	895b      	ldrh	r3, [r3, #10]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f6e:	895b      	ldrh	r3, [r3, #10]
 8006f70:	3b01      	subs	r3, #1
 8006f72:	4013      	ands	r3, r2
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d001      	beq.n	8006f7c <find_volume+0x228>
 8006f78:	230d      	movs	r3, #13
 8006f7a:	e12c      	b.n	80071d6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7e:	3330      	adds	r3, #48	; 0x30
 8006f80:	3311      	adds	r3, #17
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fe fcc8 	bl	8005918 <ld_word>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f92:	891b      	ldrh	r3, [r3, #8]
 8006f94:	f003 030f 	and.w	r3, r3, #15
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <find_volume+0x24e>
 8006f9e:	230d      	movs	r3, #13
 8006fa0:	e119      	b.n	80071d6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa4:	3330      	adds	r3, #48	; 0x30
 8006fa6:	3313      	adds	r3, #19
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f7fe fcb5 	bl	8005918 <ld_word>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d106      	bne.n	8006fc6 <find_volume+0x272>
 8006fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fba:	3330      	adds	r3, #48	; 0x30
 8006fbc:	3320      	adds	r3, #32
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7fe fcc2 	bl	8005948 <ld_dword>
 8006fc4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc8:	3330      	adds	r3, #48	; 0x30
 8006fca:	330e      	adds	r3, #14
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7fe fca3 	bl	8005918 <ld_word>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006fd6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d101      	bne.n	8006fe0 <find_volume+0x28c>
 8006fdc:	230d      	movs	r3, #13
 8006fde:	e0fa      	b.n	80071d6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006fe0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fe4:	4413      	add	r3, r2
 8006fe6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fe8:	8912      	ldrh	r2, [r2, #8]
 8006fea:	0912      	lsrs	r2, r2, #4
 8006fec:	b292      	uxth	r2, r2
 8006fee:	4413      	add	r3, r2
 8006ff0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006ff2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d204      	bcs.n	8007004 <find_volume+0x2b0>
 8006ffa:	230d      	movs	r3, #13
 8006ffc:	e0eb      	b.n	80071d6 <find_volume+0x482>
 8006ffe:	bf00      	nop
 8007000:	20000160 	.word	0x20000160
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007004:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007008:	1ad3      	subs	r3, r2, r3
 800700a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800700c:	8952      	ldrh	r2, [r2, #10]
 800700e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007012:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	2b00      	cmp	r3, #0
 8007018:	d101      	bne.n	800701e <find_volume+0x2ca>
 800701a:	230d      	movs	r3, #13
 800701c:	e0db      	b.n	80071d6 <find_volume+0x482>
		fmt = FS_FAT32;
 800701e:	2303      	movs	r3, #3
 8007020:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007026:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800702a:	4293      	cmp	r3, r2
 800702c:	d802      	bhi.n	8007034 <find_volume+0x2e0>
 800702e:	2302      	movs	r3, #2
 8007030:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007036:	f640 72f5 	movw	r2, #4085	; 0xff5
 800703a:	4293      	cmp	r3, r2
 800703c:	d802      	bhi.n	8007044 <find_volume+0x2f0>
 800703e:	2301      	movs	r3, #1
 8007040:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007046:	1c9a      	adds	r2, r3, #2
 8007048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800704c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800704e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007050:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007052:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007054:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007056:	441a      	add	r2, r3
 8007058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800705c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800705e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007060:	441a      	add	r2, r3
 8007062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007064:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8007066:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800706a:	2b03      	cmp	r3, #3
 800706c:	d11e      	bne.n	80070ac <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800706e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007070:	3330      	adds	r3, #48	; 0x30
 8007072:	332a      	adds	r3, #42	; 0x2a
 8007074:	4618      	mov	r0, r3
 8007076:	f7fe fc4f 	bl	8005918 <ld_word>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d001      	beq.n	8007084 <find_volume+0x330>
 8007080:	230d      	movs	r3, #13
 8007082:	e0a8      	b.n	80071d6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007086:	891b      	ldrh	r3, [r3, #8]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d001      	beq.n	8007090 <find_volume+0x33c>
 800708c:	230d      	movs	r3, #13
 800708e:	e0a2      	b.n	80071d6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007092:	3330      	adds	r3, #48	; 0x30
 8007094:	332c      	adds	r3, #44	; 0x2c
 8007096:	4618      	mov	r0, r3
 8007098:	f7fe fc56 	bl	8005948 <ld_dword>
 800709c:	4602      	mov	r2, r0
 800709e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a0:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80070a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	647b      	str	r3, [r7, #68]	; 0x44
 80070aa:	e01f      	b.n	80070ec <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80070ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ae:	891b      	ldrh	r3, [r3, #8]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <find_volume+0x364>
 80070b4:	230d      	movs	r3, #13
 80070b6:	e08e      	b.n	80071d6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80070b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ba:	6a1a      	ldr	r2, [r3, #32]
 80070bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070be:	441a      	add	r2, r3
 80070c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80070c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d103      	bne.n	80070d4 <find_volume+0x380>
 80070cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ce:	695b      	ldr	r3, [r3, #20]
 80070d0:	005b      	lsls	r3, r3, #1
 80070d2:	e00a      	b.n	80070ea <find_volume+0x396>
 80070d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d6:	695a      	ldr	r2, [r3, #20]
 80070d8:	4613      	mov	r3, r2
 80070da:	005b      	lsls	r3, r3, #1
 80070dc:	4413      	add	r3, r2
 80070de:	085a      	lsrs	r2, r3, #1
 80070e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070e2:	695b      	ldr	r3, [r3, #20]
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80070ea:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80070ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ee:	699a      	ldr	r2, [r3, #24]
 80070f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80070f2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80070f6:	0a5b      	lsrs	r3, r3, #9
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d201      	bcs.n	8007100 <find_volume+0x3ac>
 80070fc:	230d      	movs	r3, #13
 80070fe:	e06a      	b.n	80071d6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007102:	f04f 32ff 	mov.w	r2, #4294967295
 8007106:	611a      	str	r2, [r3, #16]
 8007108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710a:	691a      	ldr	r2, [r3, #16]
 800710c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007112:	2280      	movs	r2, #128	; 0x80
 8007114:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007116:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800711a:	2b03      	cmp	r3, #3
 800711c:	d149      	bne.n	80071b2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800711e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007120:	3330      	adds	r3, #48	; 0x30
 8007122:	3330      	adds	r3, #48	; 0x30
 8007124:	4618      	mov	r0, r3
 8007126:	f7fe fbf7 	bl	8005918 <ld_word>
 800712a:	4603      	mov	r3, r0
 800712c:	2b01      	cmp	r3, #1
 800712e:	d140      	bne.n	80071b2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007132:	3301      	adds	r3, #1
 8007134:	4619      	mov	r1, r3
 8007136:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007138:	f7fe fe9e 	bl	8005e78 <move_window>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d137      	bne.n	80071b2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8007142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007144:	2200      	movs	r2, #0
 8007146:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714a:	3330      	adds	r3, #48	; 0x30
 800714c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007150:	4618      	mov	r0, r3
 8007152:	f7fe fbe1 	bl	8005918 <ld_word>
 8007156:	4603      	mov	r3, r0
 8007158:	461a      	mov	r2, r3
 800715a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800715e:	429a      	cmp	r2, r3
 8007160:	d127      	bne.n	80071b2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007164:	3330      	adds	r3, #48	; 0x30
 8007166:	4618      	mov	r0, r3
 8007168:	f7fe fbee 	bl	8005948 <ld_dword>
 800716c:	4603      	mov	r3, r0
 800716e:	4a1c      	ldr	r2, [pc, #112]	; (80071e0 <find_volume+0x48c>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d11e      	bne.n	80071b2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007176:	3330      	adds	r3, #48	; 0x30
 8007178:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800717c:	4618      	mov	r0, r3
 800717e:	f7fe fbe3 	bl	8005948 <ld_dword>
 8007182:	4603      	mov	r3, r0
 8007184:	4a17      	ldr	r2, [pc, #92]	; (80071e4 <find_volume+0x490>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d113      	bne.n	80071b2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800718a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800718c:	3330      	adds	r3, #48	; 0x30
 800718e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007192:	4618      	mov	r0, r3
 8007194:	f7fe fbd8 	bl	8005948 <ld_dword>
 8007198:	4602      	mov	r2, r0
 800719a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800719e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a0:	3330      	adds	r3, #48	; 0x30
 80071a2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7fe fbce 	bl	8005948 <ld_dword>
 80071ac:	4602      	mov	r2, r0
 80071ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80071b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80071b8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80071ba:	4b0b      	ldr	r3, [pc, #44]	; (80071e8 <find_volume+0x494>)
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	3301      	adds	r3, #1
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	4b09      	ldr	r3, [pc, #36]	; (80071e8 <find_volume+0x494>)
 80071c4:	801a      	strh	r2, [r3, #0]
 80071c6:	4b08      	ldr	r3, [pc, #32]	; (80071e8 <find_volume+0x494>)
 80071c8:	881a      	ldrh	r2, [r3, #0]
 80071ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071cc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80071ce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80071d0:	f7fe fdea 	bl	8005da8 <clear_lock>
#endif
	return FR_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3758      	adds	r7, #88	; 0x58
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	41615252 	.word	0x41615252
 80071e4:	61417272 	.word	0x61417272
 80071e8:	20000164 	.word	0x20000164

080071ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80071f6:	2309      	movs	r3, #9
 80071f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d01c      	beq.n	800723a <validate+0x4e>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d018      	beq.n	800723a <validate+0x4e>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d013      	beq.n	800723a <validate+0x4e>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	889a      	ldrh	r2, [r3, #4]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	88db      	ldrh	r3, [r3, #6]
 800721c:	429a      	cmp	r2, r3
 800721e:	d10c      	bne.n	800723a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	785b      	ldrb	r3, [r3, #1]
 8007226:	4618      	mov	r0, r3
 8007228:	f7fe fad8 	bl	80057dc <disk_status>
 800722c:	4603      	mov	r3, r0
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b00      	cmp	r3, #0
 8007234:	d101      	bne.n	800723a <validate+0x4e>
			res = FR_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800723a:	7bfb      	ldrb	r3, [r7, #15]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d102      	bne.n	8007246 <validate+0x5a>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	e000      	b.n	8007248 <validate+0x5c>
 8007246:	2300      	movs	r3, #0
 8007248:	683a      	ldr	r2, [r7, #0]
 800724a:	6013      	str	r3, [r2, #0]
	return res;
 800724c:	7bfb      	ldrb	r3, [r7, #15]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
	...

08007258 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b088      	sub	sp, #32
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	4613      	mov	r3, r2
 8007264:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800726a:	f107 0310 	add.w	r3, r7, #16
 800726e:	4618      	mov	r0, r3
 8007270:	f7ff fcd5 	bl	8006c1e <get_ldnumber>
 8007274:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	2b00      	cmp	r3, #0
 800727a:	da01      	bge.n	8007280 <f_mount+0x28>
 800727c:	230b      	movs	r3, #11
 800727e:	e02b      	b.n	80072d8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007280:	4a17      	ldr	r2, [pc, #92]	; (80072e0 <f_mount+0x88>)
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007288:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d005      	beq.n	800729c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007290:	69b8      	ldr	r0, [r7, #24]
 8007292:	f7fe fd89 	bl	8005da8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	2200      	movs	r2, #0
 800729a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d002      	beq.n	80072a8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2200      	movs	r2, #0
 80072a6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	490d      	ldr	r1, [pc, #52]	; (80072e0 <f_mount+0x88>)
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d002      	beq.n	80072be <f_mount+0x66>
 80072b8:	79fb      	ldrb	r3, [r7, #7]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d001      	beq.n	80072c2 <f_mount+0x6a>
 80072be:	2300      	movs	r3, #0
 80072c0:	e00a      	b.n	80072d8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80072c2:	f107 010c 	add.w	r1, r7, #12
 80072c6:	f107 0308 	add.w	r3, r7, #8
 80072ca:	2200      	movs	r2, #0
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7ff fd41 	bl	8006d54 <find_volume>
 80072d2:	4603      	mov	r3, r0
 80072d4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80072d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3720      	adds	r7, #32
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	20000160 	.word	0x20000160

080072e4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b098      	sub	sp, #96	; 0x60
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	4613      	mov	r3, r2
 80072f0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d101      	bne.n	80072fc <f_open+0x18>
 80072f8:	2309      	movs	r3, #9
 80072fa:	e1ad      	b.n	8007658 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80072fc:	79fb      	ldrb	r3, [r7, #7]
 80072fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007302:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007304:	79fa      	ldrb	r2, [r7, #7]
 8007306:	f107 0110 	add.w	r1, r7, #16
 800730a:	f107 0308 	add.w	r3, r7, #8
 800730e:	4618      	mov	r0, r3
 8007310:	f7ff fd20 	bl	8006d54 <find_volume>
 8007314:	4603      	mov	r3, r0
 8007316:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800731a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800731e:	2b00      	cmp	r3, #0
 8007320:	f040 8191 	bne.w	8007646 <f_open+0x362>
		dj.obj.fs = fs;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	f107 0314 	add.w	r3, r7, #20
 800732e:	4611      	mov	r1, r2
 8007330:	4618      	mov	r0, r3
 8007332:	f7ff fc03 	bl	8006b3c <follow_path>
 8007336:	4603      	mov	r3, r0
 8007338:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800733c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007340:	2b00      	cmp	r3, #0
 8007342:	d11a      	bne.n	800737a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007344:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007348:	b25b      	sxtb	r3, r3
 800734a:	2b00      	cmp	r3, #0
 800734c:	da03      	bge.n	8007356 <f_open+0x72>
				res = FR_INVALID_NAME;
 800734e:	2306      	movs	r3, #6
 8007350:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007354:	e011      	b.n	800737a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007356:	79fb      	ldrb	r3, [r7, #7]
 8007358:	f023 0301 	bic.w	r3, r3, #1
 800735c:	2b00      	cmp	r3, #0
 800735e:	bf14      	ite	ne
 8007360:	2301      	movne	r3, #1
 8007362:	2300      	moveq	r3, #0
 8007364:	b2db      	uxtb	r3, r3
 8007366:	461a      	mov	r2, r3
 8007368:	f107 0314 	add.w	r3, r7, #20
 800736c:	4611      	mov	r1, r2
 800736e:	4618      	mov	r0, r3
 8007370:	f7fe fbd2 	bl	8005b18 <chk_lock>
 8007374:	4603      	mov	r3, r0
 8007376:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800737a:	79fb      	ldrb	r3, [r7, #7]
 800737c:	f003 031c 	and.w	r3, r3, #28
 8007380:	2b00      	cmp	r3, #0
 8007382:	d07f      	beq.n	8007484 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007384:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007388:	2b00      	cmp	r3, #0
 800738a:	d017      	beq.n	80073bc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800738c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007390:	2b04      	cmp	r3, #4
 8007392:	d10e      	bne.n	80073b2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007394:	f7fe fc1c 	bl	8005bd0 <enq_lock>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d006      	beq.n	80073ac <f_open+0xc8>
 800739e:	f107 0314 	add.w	r3, r7, #20
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7ff fb03 	bl	80069ae <dir_register>
 80073a8:	4603      	mov	r3, r0
 80073aa:	e000      	b.n	80073ae <f_open+0xca>
 80073ac:	2312      	movs	r3, #18
 80073ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80073b2:	79fb      	ldrb	r3, [r7, #7]
 80073b4:	f043 0308 	orr.w	r3, r3, #8
 80073b8:	71fb      	strb	r3, [r7, #7]
 80073ba:	e010      	b.n	80073de <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80073bc:	7ebb      	ldrb	r3, [r7, #26]
 80073be:	f003 0311 	and.w	r3, r3, #17
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d003      	beq.n	80073ce <f_open+0xea>
					res = FR_DENIED;
 80073c6:	2307      	movs	r3, #7
 80073c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80073cc:	e007      	b.n	80073de <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80073ce:	79fb      	ldrb	r3, [r7, #7]
 80073d0:	f003 0304 	and.w	r3, r3, #4
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d002      	beq.n	80073de <f_open+0xfa>
 80073d8:	2308      	movs	r3, #8
 80073da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80073de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d168      	bne.n	80074b8 <f_open+0x1d4>
 80073e6:	79fb      	ldrb	r3, [r7, #7]
 80073e8:	f003 0308 	and.w	r3, r3, #8
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d063      	beq.n	80074b8 <f_open+0x1d4>
				dw = GET_FATTIME();
 80073f0:	f7fe f86e 	bl	80054d0 <get_fattime>
 80073f4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80073f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f8:	330e      	adds	r3, #14
 80073fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7fe fae1 	bl	80059c4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007404:	3316      	adds	r3, #22
 8007406:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007408:	4618      	mov	r0, r3
 800740a:	f7fe fadb 	bl	80059c4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800740e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007410:	330b      	adds	r3, #11
 8007412:	2220      	movs	r2, #32
 8007414:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800741a:	4611      	mov	r1, r2
 800741c:	4618      	mov	r0, r3
 800741e:	f7ff fa32 	bl	8006886 <ld_clust>
 8007422:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007428:	2200      	movs	r2, #0
 800742a:	4618      	mov	r0, r3
 800742c:	f7ff fa4a 	bl	80068c4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007432:	331c      	adds	r3, #28
 8007434:	2100      	movs	r1, #0
 8007436:	4618      	mov	r0, r3
 8007438:	f7fe fac4 	bl	80059c4 <st_dword>
					fs->wflag = 1;
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	2201      	movs	r2, #1
 8007440:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007444:	2b00      	cmp	r3, #0
 8007446:	d037      	beq.n	80074b8 <f_open+0x1d4>
						dw = fs->winsect;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800744e:	f107 0314 	add.w	r3, r7, #20
 8007452:	2200      	movs	r2, #0
 8007454:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007456:	4618      	mov	r0, r3
 8007458:	f7fe ff5d 	bl	8006316 <remove_chain>
 800745c:	4603      	mov	r3, r0
 800745e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8007462:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007466:	2b00      	cmp	r3, #0
 8007468:	d126      	bne.n	80074b8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800746e:	4618      	mov	r0, r3
 8007470:	f7fe fd02 	bl	8005e78 <move_window>
 8007474:	4603      	mov	r3, r0
 8007476:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800747e:	3a01      	subs	r2, #1
 8007480:	60da      	str	r2, [r3, #12]
 8007482:	e019      	b.n	80074b8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007484:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007488:	2b00      	cmp	r3, #0
 800748a:	d115      	bne.n	80074b8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800748c:	7ebb      	ldrb	r3, [r7, #26]
 800748e:	f003 0310 	and.w	r3, r3, #16
 8007492:	2b00      	cmp	r3, #0
 8007494:	d003      	beq.n	800749e <f_open+0x1ba>
					res = FR_NO_FILE;
 8007496:	2304      	movs	r3, #4
 8007498:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800749c:	e00c      	b.n	80074b8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800749e:	79fb      	ldrb	r3, [r7, #7]
 80074a0:	f003 0302 	and.w	r3, r3, #2
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d007      	beq.n	80074b8 <f_open+0x1d4>
 80074a8:	7ebb      	ldrb	r3, [r7, #26]
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d002      	beq.n	80074b8 <f_open+0x1d4>
						res = FR_DENIED;
 80074b2:	2307      	movs	r3, #7
 80074b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80074b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d128      	bne.n	8007512 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80074c0:	79fb      	ldrb	r3, [r7, #7]
 80074c2:	f003 0308 	and.w	r3, r3, #8
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d003      	beq.n	80074d2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80074ca:	79fb      	ldrb	r3, [r7, #7]
 80074cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074d0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80074da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80074e0:	79fb      	ldrb	r3, [r7, #7]
 80074e2:	f023 0301 	bic.w	r3, r3, #1
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	bf14      	ite	ne
 80074ea:	2301      	movne	r3, #1
 80074ec:	2300      	moveq	r3, #0
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	461a      	mov	r2, r3
 80074f2:	f107 0314 	add.w	r3, r7, #20
 80074f6:	4611      	mov	r1, r2
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7fe fb8b 	bl	8005c14 <inc_lock>
 80074fe:	4602      	mov	r2, r0
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d102      	bne.n	8007512 <f_open+0x22e>
 800750c:	2302      	movs	r3, #2
 800750e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007512:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007516:	2b00      	cmp	r3, #0
 8007518:	f040 8095 	bne.w	8007646 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007520:	4611      	mov	r1, r2
 8007522:	4618      	mov	r0, r3
 8007524:	f7ff f9af 	bl	8006886 <ld_clust>
 8007528:	4602      	mov	r2, r0
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800752e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007530:	331c      	adds	r3, #28
 8007532:	4618      	mov	r0, r3
 8007534:	f7fe fa08 	bl	8005948 <ld_dword>
 8007538:	4602      	mov	r2, r0
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	88da      	ldrh	r2, [r3, #6]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	79fa      	ldrb	r2, [r7, #7]
 8007556:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	3330      	adds	r3, #48	; 0x30
 800756e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007572:	2100      	movs	r1, #0
 8007574:	4618      	mov	r0, r3
 8007576:	f7fe fa72 	bl	8005a5e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800757a:	79fb      	ldrb	r3, [r7, #7]
 800757c:	f003 0320 	and.w	r3, r3, #32
 8007580:	2b00      	cmp	r3, #0
 8007582:	d060      	beq.n	8007646 <f_open+0x362>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d05c      	beq.n	8007646 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	68da      	ldr	r2, [r3, #12]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	895b      	ldrh	r3, [r3, #10]
 8007598:	025b      	lsls	r3, r3, #9
 800759a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	657b      	str	r3, [r7, #84]	; 0x54
 80075a8:	e016      	b.n	80075d8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fe fd1d 	bl	8005fee <get_fat>
 80075b4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80075b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d802      	bhi.n	80075c2 <f_open+0x2de>
 80075bc:	2302      	movs	r3, #2
 80075be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80075c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c8:	d102      	bne.n	80075d0 <f_open+0x2ec>
 80075ca:	2301      	movs	r3, #1
 80075cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80075d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80075d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075d4:	1ad3      	subs	r3, r2, r3
 80075d6:	657b      	str	r3, [r7, #84]	; 0x54
 80075d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d103      	bne.n	80075e8 <f_open+0x304>
 80075e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80075e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d8e0      	bhi.n	80075aa <f_open+0x2c6>
				}
				fp->clust = clst;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075ec:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80075ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d127      	bne.n	8007646 <f_open+0x362>
 80075f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d022      	beq.n	8007646 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007604:	4618      	mov	r0, r3
 8007606:	f7fe fcd3 	bl	8005fb0 <clust2sect>
 800760a:	6478      	str	r0, [r7, #68]	; 0x44
 800760c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800760e:	2b00      	cmp	r3, #0
 8007610:	d103      	bne.n	800761a <f_open+0x336>
						res = FR_INT_ERR;
 8007612:	2302      	movs	r3, #2
 8007614:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007618:	e015      	b.n	8007646 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800761a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800761c:	0a5a      	lsrs	r2, r3, #9
 800761e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007620:	441a      	add	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	7858      	ldrb	r0, [r3, #1]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6a1a      	ldr	r2, [r3, #32]
 8007634:	2301      	movs	r3, #1
 8007636:	f7fe f911 	bl	800585c <disk_read>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <f_open+0x362>
 8007640:	2301      	movs	r3, #1
 8007642:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007646:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800764a:	2b00      	cmp	r3, #0
 800764c:	d002      	beq.n	8007654 <f_open+0x370>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007654:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007658:	4618      	mov	r0, r3
 800765a:	3760      	adds	r7, #96	; 0x60
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b08e      	sub	sp, #56	; 0x38
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
 800766c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2200      	movs	r2, #0
 8007676:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f107 0214 	add.w	r2, r7, #20
 800767e:	4611      	mov	r1, r2
 8007680:	4618      	mov	r0, r3
 8007682:	f7ff fdb3 	bl	80071ec <validate>
 8007686:	4603      	mov	r3, r0
 8007688:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800768c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007690:	2b00      	cmp	r3, #0
 8007692:	d107      	bne.n	80076a4 <f_read+0x44>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	7d5b      	ldrb	r3, [r3, #21]
 8007698:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800769c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d002      	beq.n	80076aa <f_read+0x4a>
 80076a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80076a8:	e115      	b.n	80078d6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	7d1b      	ldrb	r3, [r3, #20]
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d101      	bne.n	80076ba <f_read+0x5a>
 80076b6:	2307      	movs	r3, #7
 80076b8:	e10d      	b.n	80078d6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	68da      	ldr	r2, [r3, #12]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	1ad3      	subs	r3, r2, r3
 80076c4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	6a3b      	ldr	r3, [r7, #32]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	f240 80fe 	bls.w	80078cc <f_read+0x26c>
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80076d4:	e0fa      	b.n	80078cc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076de:	2b00      	cmp	r3, #0
 80076e0:	f040 80c6 	bne.w	8007870 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	0a5b      	lsrs	r3, r3, #9
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	8952      	ldrh	r2, [r2, #10]
 80076ee:	3a01      	subs	r2, #1
 80076f0:	4013      	ands	r3, r2
 80076f2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d12f      	bne.n	800775a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d103      	bne.n	800770a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	633b      	str	r3, [r7, #48]	; 0x30
 8007708:	e013      	b.n	8007732 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770e:	2b00      	cmp	r3, #0
 8007710:	d007      	beq.n	8007722 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	4619      	mov	r1, r3
 8007718:	68f8      	ldr	r0, [r7, #12]
 800771a:	f7fe fef9 	bl	8006510 <clmt_clust>
 800771e:	6338      	str	r0, [r7, #48]	; 0x30
 8007720:	e007      	b.n	8007732 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	69db      	ldr	r3, [r3, #28]
 8007728:	4619      	mov	r1, r3
 800772a:	4610      	mov	r0, r2
 800772c:	f7fe fc5f 	bl	8005fee <get_fat>
 8007730:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007734:	2b01      	cmp	r3, #1
 8007736:	d804      	bhi.n	8007742 <f_read+0xe2>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2202      	movs	r2, #2
 800773c:	755a      	strb	r2, [r3, #21]
 800773e:	2302      	movs	r3, #2
 8007740:	e0c9      	b.n	80078d6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007748:	d104      	bne.n	8007754 <f_read+0xf4>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2201      	movs	r2, #1
 800774e:	755a      	strb	r2, [r3, #21]
 8007750:	2301      	movs	r3, #1
 8007752:	e0c0      	b.n	80078d6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007758:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	69db      	ldr	r3, [r3, #28]
 8007760:	4619      	mov	r1, r3
 8007762:	4610      	mov	r0, r2
 8007764:	f7fe fc24 	bl	8005fb0 <clust2sect>
 8007768:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d104      	bne.n	800777a <f_read+0x11a>
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2202      	movs	r2, #2
 8007774:	755a      	strb	r2, [r3, #21]
 8007776:	2302      	movs	r3, #2
 8007778:	e0ad      	b.n	80078d6 <f_read+0x276>
			sect += csect;
 800777a:	69ba      	ldr	r2, [r7, #24]
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	4413      	add	r3, r2
 8007780:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	0a5b      	lsrs	r3, r3, #9
 8007786:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8007788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778a:	2b00      	cmp	r3, #0
 800778c:	d039      	beq.n	8007802 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800778e:	69fa      	ldr	r2, [r7, #28]
 8007790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007792:	4413      	add	r3, r2
 8007794:	697a      	ldr	r2, [r7, #20]
 8007796:	8952      	ldrh	r2, [r2, #10]
 8007798:	4293      	cmp	r3, r2
 800779a:	d905      	bls.n	80077a8 <f_read+0x148>
					cc = fs->csize - csect;
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	895b      	ldrh	r3, [r3, #10]
 80077a0:	461a      	mov	r2, r3
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	7858      	ldrb	r0, [r3, #1]
 80077ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ae:	69ba      	ldr	r2, [r7, #24]
 80077b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077b2:	f7fe f853 	bl	800585c <disk_read>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d004      	beq.n	80077c6 <f_read+0x166>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2201      	movs	r2, #1
 80077c0:	755a      	strb	r2, [r3, #21]
 80077c2:	2301      	movs	r3, #1
 80077c4:	e087      	b.n	80078d6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	7d1b      	ldrb	r3, [r3, #20]
 80077ca:	b25b      	sxtb	r3, r3
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	da14      	bge.n	80077fa <f_read+0x19a>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6a1a      	ldr	r2, [r3, #32]
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077da:	429a      	cmp	r2, r3
 80077dc:	d90d      	bls.n	80077fa <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6a1a      	ldr	r2, [r3, #32]
 80077e2:	69bb      	ldr	r3, [r7, #24]
 80077e4:	1ad3      	subs	r3, r2, r3
 80077e6:	025b      	lsls	r3, r3, #9
 80077e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ea:	18d0      	adds	r0, r2, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	3330      	adds	r3, #48	; 0x30
 80077f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077f4:	4619      	mov	r1, r3
 80077f6:	f7fe f911 	bl	8005a1c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80077fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fc:	025b      	lsls	r3, r3, #9
 80077fe:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007800:	e050      	b.n	80078a4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	69ba      	ldr	r2, [r7, #24]
 8007808:	429a      	cmp	r2, r3
 800780a:	d02e      	beq.n	800786a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	7d1b      	ldrb	r3, [r3, #20]
 8007810:	b25b      	sxtb	r3, r3
 8007812:	2b00      	cmp	r3, #0
 8007814:	da18      	bge.n	8007848 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	7858      	ldrb	r0, [r3, #1]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6a1a      	ldr	r2, [r3, #32]
 8007824:	2301      	movs	r3, #1
 8007826:	f7fe f839 	bl	800589c <disk_write>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d004      	beq.n	800783a <f_read+0x1da>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2201      	movs	r2, #1
 8007834:	755a      	strb	r2, [r3, #21]
 8007836:	2301      	movs	r3, #1
 8007838:	e04d      	b.n	80078d6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	7d1b      	ldrb	r3, [r3, #20]
 800783e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007842:	b2da      	uxtb	r2, r3
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	7858      	ldrb	r0, [r3, #1]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007852:	2301      	movs	r3, #1
 8007854:	69ba      	ldr	r2, [r7, #24]
 8007856:	f7fe f801 	bl	800585c <disk_read>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d004      	beq.n	800786a <f_read+0x20a>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2201      	movs	r2, #1
 8007864:	755a      	strb	r2, [r3, #21]
 8007866:	2301      	movs	r3, #1
 8007868:	e035      	b.n	80078d6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	69ba      	ldr	r2, [r7, #24]
 800786e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007878:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800787c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800787e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	429a      	cmp	r2, r3
 8007884:	d901      	bls.n	800788a <f_read+0x22a>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	699b      	ldr	r3, [r3, #24]
 8007894:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007898:	4413      	add	r3, r2
 800789a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800789c:	4619      	mov	r1, r3
 800789e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078a0:	f7fe f8bc 	bl	8005a1c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80078a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a8:	4413      	add	r3, r2
 80078aa:	627b      	str	r3, [r7, #36]	; 0x24
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	699a      	ldr	r2, [r3, #24]
 80078b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b2:	441a      	add	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	619a      	str	r2, [r3, #24]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078be:	441a      	add	r2, r3
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	601a      	str	r2, [r3, #0]
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f47f af01 	bne.w	80076d6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3738      	adds	r7, #56	; 0x38
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b08c      	sub	sp, #48	; 0x30
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	60f8      	str	r0, [r7, #12]
 80078e6:	60b9      	str	r1, [r7, #8]
 80078e8:	607a      	str	r2, [r7, #4]
 80078ea:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	2200      	movs	r2, #0
 80078f4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f107 0210 	add.w	r2, r7, #16
 80078fc:	4611      	mov	r1, r2
 80078fe:	4618      	mov	r0, r3
 8007900:	f7ff fc74 	bl	80071ec <validate>
 8007904:	4603      	mov	r3, r0
 8007906:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800790a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800790e:	2b00      	cmp	r3, #0
 8007910:	d107      	bne.n	8007922 <f_write+0x44>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	7d5b      	ldrb	r3, [r3, #21]
 8007916:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800791a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800791e:	2b00      	cmp	r3, #0
 8007920:	d002      	beq.n	8007928 <f_write+0x4a>
 8007922:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007926:	e14b      	b.n	8007bc0 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	7d1b      	ldrb	r3, [r3, #20]
 800792c:	f003 0302 	and.w	r3, r3, #2
 8007930:	2b00      	cmp	r3, #0
 8007932:	d101      	bne.n	8007938 <f_write+0x5a>
 8007934:	2307      	movs	r3, #7
 8007936:	e143      	b.n	8007bc0 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	699a      	ldr	r2, [r3, #24]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	441a      	add	r2, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	429a      	cmp	r2, r3
 8007946:	f080 812d 	bcs.w	8007ba4 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	43db      	mvns	r3, r3
 8007950:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007952:	e127      	b.n	8007ba4 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	699b      	ldr	r3, [r3, #24]
 8007958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800795c:	2b00      	cmp	r3, #0
 800795e:	f040 80e3 	bne.w	8007b28 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	699b      	ldr	r3, [r3, #24]
 8007966:	0a5b      	lsrs	r3, r3, #9
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	8952      	ldrh	r2, [r2, #10]
 800796c:	3a01      	subs	r2, #1
 800796e:	4013      	ands	r3, r2
 8007970:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d143      	bne.n	8007a00 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10c      	bne.n	800799a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007988:	2b00      	cmp	r3, #0
 800798a:	d11a      	bne.n	80079c2 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2100      	movs	r1, #0
 8007990:	4618      	mov	r0, r3
 8007992:	f7fe fd25 	bl	80063e0 <create_chain>
 8007996:	62b8      	str	r0, [r7, #40]	; 0x28
 8007998:	e013      	b.n	80079c2 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d007      	beq.n	80079b2 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	4619      	mov	r1, r3
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f7fe fdb1 	bl	8006510 <clmt_clust>
 80079ae:	62b8      	str	r0, [r7, #40]	; 0x28
 80079b0:	e007      	b.n	80079c2 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	69db      	ldr	r3, [r3, #28]
 80079b8:	4619      	mov	r1, r3
 80079ba:	4610      	mov	r0, r2
 80079bc:	f7fe fd10 	bl	80063e0 <create_chain>
 80079c0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80079c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 80f2 	beq.w	8007bae <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80079ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d104      	bne.n	80079da <f_write+0xfc>
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2202      	movs	r2, #2
 80079d4:	755a      	strb	r2, [r3, #21]
 80079d6:	2302      	movs	r3, #2
 80079d8:	e0f2      	b.n	8007bc0 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80079da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079e0:	d104      	bne.n	80079ec <f_write+0x10e>
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2201      	movs	r2, #1
 80079e6:	755a      	strb	r2, [r3, #21]
 80079e8:	2301      	movs	r3, #1
 80079ea:	e0e9      	b.n	8007bc0 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079f0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d102      	bne.n	8007a00 <f_write+0x122>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079fe:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	7d1b      	ldrb	r3, [r3, #20]
 8007a04:	b25b      	sxtb	r3, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	da18      	bge.n	8007a3c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	7858      	ldrb	r0, [r3, #1]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6a1a      	ldr	r2, [r3, #32]
 8007a18:	2301      	movs	r3, #1
 8007a1a:	f7fd ff3f 	bl	800589c <disk_write>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d004      	beq.n	8007a2e <f_write+0x150>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2201      	movs	r2, #1
 8007a28:	755a      	strb	r2, [r3, #21]
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e0c8      	b.n	8007bc0 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	7d1b      	ldrb	r3, [r3, #20]
 8007a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a36:	b2da      	uxtb	r2, r3
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	69db      	ldr	r3, [r3, #28]
 8007a42:	4619      	mov	r1, r3
 8007a44:	4610      	mov	r0, r2
 8007a46:	f7fe fab3 	bl	8005fb0 <clust2sect>
 8007a4a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d104      	bne.n	8007a5c <f_write+0x17e>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2202      	movs	r2, #2
 8007a56:	755a      	strb	r2, [r3, #21]
 8007a58:	2302      	movs	r3, #2
 8007a5a:	e0b1      	b.n	8007bc0 <f_write+0x2e2>
			sect += csect;
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	69bb      	ldr	r3, [r7, #24]
 8007a60:	4413      	add	r3, r2
 8007a62:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	0a5b      	lsrs	r3, r3, #9
 8007a68:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007a6a:	6a3b      	ldr	r3, [r7, #32]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d03c      	beq.n	8007aea <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007a70:	69ba      	ldr	r2, [r7, #24]
 8007a72:	6a3b      	ldr	r3, [r7, #32]
 8007a74:	4413      	add	r3, r2
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	8952      	ldrh	r2, [r2, #10]
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d905      	bls.n	8007a8a <f_write+0x1ac>
					cc = fs->csize - csect;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	895b      	ldrh	r3, [r3, #10]
 8007a82:	461a      	mov	r2, r3
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	7858      	ldrb	r0, [r3, #1]
 8007a8e:	6a3b      	ldr	r3, [r7, #32]
 8007a90:	697a      	ldr	r2, [r7, #20]
 8007a92:	69f9      	ldr	r1, [r7, #28]
 8007a94:	f7fd ff02 	bl	800589c <disk_write>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d004      	beq.n	8007aa8 <f_write+0x1ca>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	755a      	strb	r2, [r3, #21]
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e08b      	b.n	8007bc0 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6a1a      	ldr	r2, [r3, #32]
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	6a3a      	ldr	r2, [r7, #32]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d915      	bls.n	8007ae2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6a1a      	ldr	r2, [r3, #32]
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	025b      	lsls	r3, r3, #9
 8007ac6:	69fa      	ldr	r2, [r7, #28]
 8007ac8:	4413      	add	r3, r2
 8007aca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ace:	4619      	mov	r1, r3
 8007ad0:	f7fd ffa4 	bl	8005a1c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	7d1b      	ldrb	r3, [r3, #20]
 8007ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007adc:	b2da      	uxtb	r2, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	025b      	lsls	r3, r3, #9
 8007ae6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007ae8:	e03f      	b.n	8007b6a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	697a      	ldr	r2, [r7, #20]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d016      	beq.n	8007b22 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	699a      	ldr	r2, [r3, #24]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d210      	bcs.n	8007b22 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	7858      	ldrb	r0, [r3, #1]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	f7fd fea5 	bl	800585c <disk_read>
 8007b12:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d004      	beq.n	8007b22 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2201      	movs	r2, #1
 8007b1c:	755a      	strb	r2, [r3, #21]
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e04e      	b.n	8007bc0 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	697a      	ldr	r2, [r7, #20]
 8007b26:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	699b      	ldr	r3, [r3, #24]
 8007b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b30:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8007b34:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d901      	bls.n	8007b42 <f_write+0x264>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b50:	4413      	add	r3, r2
 8007b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b54:	69f9      	ldr	r1, [r7, #28]
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fd ff60 	bl	8005a1c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	7d1b      	ldrb	r3, [r3, #20]
 8007b60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b64:	b2da      	uxtb	r2, r3
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007b6a:	69fa      	ldr	r2, [r7, #28]
 8007b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6e:	4413      	add	r3, r2
 8007b70:	61fb      	str	r3, [r7, #28]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	699a      	ldr	r2, [r3, #24]
 8007b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b78:	441a      	add	r2, r3
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	619a      	str	r2, [r3, #24]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	68da      	ldr	r2, [r3, #12]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	bf38      	it	cc
 8007b8a:	461a      	movcc	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	60da      	str	r2, [r3, #12]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b96:	441a      	add	r2, r3
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	601a      	str	r2, [r3, #0]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba0:	1ad3      	subs	r3, r2, r3
 8007ba2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f47f aed4 	bne.w	8007954 <f_write+0x76>
 8007bac:	e000      	b.n	8007bb0 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007bae:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	7d1b      	ldrb	r3, [r3, #20]
 8007bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bb8:	b2da      	uxtb	r2, r3
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3730      	adds	r7, #48	; 0x30
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b086      	sub	sp, #24
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f107 0208 	add.w	r2, r7, #8
 8007bd6:	4611      	mov	r1, r2
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f7ff fb07 	bl	80071ec <validate>
 8007bde:	4603      	mov	r3, r0
 8007be0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007be2:	7dfb      	ldrb	r3, [r7, #23]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d168      	bne.n	8007cba <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	7d1b      	ldrb	r3, [r3, #20]
 8007bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d062      	beq.n	8007cba <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	7d1b      	ldrb	r3, [r3, #20]
 8007bf8:	b25b      	sxtb	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	da15      	bge.n	8007c2a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	7858      	ldrb	r0, [r3, #1]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6a1a      	ldr	r2, [r3, #32]
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	f7fd fe45 	bl	800589c <disk_write>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d001      	beq.n	8007c1c <f_sync+0x54>
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e04f      	b.n	8007cbc <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	7d1b      	ldrb	r3, [r3, #20]
 8007c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c24:	b2da      	uxtb	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007c2a:	f7fd fc51 	bl	80054d0 <get_fattime>
 8007c2e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c36:	4619      	mov	r1, r3
 8007c38:	4610      	mov	r0, r2
 8007c3a:	f7fe f91d 	bl	8005e78 <move_window>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007c42:	7dfb      	ldrb	r3, [r7, #23]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d138      	bne.n	8007cba <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	330b      	adds	r3, #11
 8007c52:	781a      	ldrb	r2, [r3, #0]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	330b      	adds	r3, #11
 8007c58:	f042 0220 	orr.w	r2, r2, #32
 8007c5c:	b2d2      	uxtb	r2, r2
 8007c5e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6818      	ldr	r0, [r3, #0]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	68f9      	ldr	r1, [r7, #12]
 8007c6c:	f7fe fe2a 	bl	80068c4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f103 021c 	add.w	r2, r3, #28
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	f7fd fea1 	bl	80059c4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	3316      	adds	r3, #22
 8007c86:	6939      	ldr	r1, [r7, #16]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7fd fe9b 	bl	80059c4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	3312      	adds	r3, #18
 8007c92:	2100      	movs	r1, #0
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7fd fe7a 	bl	800598e <st_word>
					fs->wflag = 1;
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fe f916 	bl	8005ed4 <sync_fs>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	7d1b      	ldrb	r3, [r3, #20]
 8007cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cb4:	b2da      	uxtb	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3718      	adds	r7, #24
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f7ff ff7b 	bl	8007bc8 <f_sync>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007cd6:	7bfb      	ldrb	r3, [r7, #15]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d118      	bne.n	8007d0e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f107 0208 	add.w	r2, r7, #8
 8007ce2:	4611      	mov	r1, r2
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7ff fa81 	bl	80071ec <validate>
 8007cea:	4603      	mov	r3, r0
 8007cec:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10c      	bne.n	8007d0e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7fe f819 	bl	8005d30 <dec_lock>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d102      	bne.n	8007d0e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b087      	sub	sp, #28
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	4613      	mov	r3, r2
 8007d24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007d26:	2301      	movs	r3, #1
 8007d28:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007d2e:	4b1f      	ldr	r3, [pc, #124]	; (8007dac <FATFS_LinkDriverEx+0x94>)
 8007d30:	7a5b      	ldrb	r3, [r3, #9]
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d131      	bne.n	8007d9c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007d38:	4b1c      	ldr	r3, [pc, #112]	; (8007dac <FATFS_LinkDriverEx+0x94>)
 8007d3a:	7a5b      	ldrb	r3, [r3, #9]
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	461a      	mov	r2, r3
 8007d40:	4b1a      	ldr	r3, [pc, #104]	; (8007dac <FATFS_LinkDriverEx+0x94>)
 8007d42:	2100      	movs	r1, #0
 8007d44:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007d46:	4b19      	ldr	r3, [pc, #100]	; (8007dac <FATFS_LinkDriverEx+0x94>)
 8007d48:	7a5b      	ldrb	r3, [r3, #9]
 8007d4a:	b2db      	uxtb	r3, r3
 8007d4c:	4a17      	ldr	r2, [pc, #92]	; (8007dac <FATFS_LinkDriverEx+0x94>)
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	4413      	add	r3, r2
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007d56:	4b15      	ldr	r3, [pc, #84]	; (8007dac <FATFS_LinkDriverEx+0x94>)
 8007d58:	7a5b      	ldrb	r3, [r3, #9]
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	4b13      	ldr	r3, [pc, #76]	; (8007dac <FATFS_LinkDriverEx+0x94>)
 8007d60:	4413      	add	r3, r2
 8007d62:	79fa      	ldrb	r2, [r7, #7]
 8007d64:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007d66:	4b11      	ldr	r3, [pc, #68]	; (8007dac <FATFS_LinkDriverEx+0x94>)
 8007d68:	7a5b      	ldrb	r3, [r3, #9]
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	1c5a      	adds	r2, r3, #1
 8007d6e:	b2d1      	uxtb	r1, r2
 8007d70:	4a0e      	ldr	r2, [pc, #56]	; (8007dac <FATFS_LinkDriverEx+0x94>)
 8007d72:	7251      	strb	r1, [r2, #9]
 8007d74:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007d76:	7dbb      	ldrb	r3, [r7, #22]
 8007d78:	3330      	adds	r3, #48	; 0x30
 8007d7a:	b2da      	uxtb	r2, r3
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	3301      	adds	r3, #1
 8007d84:	223a      	movs	r2, #58	; 0x3a
 8007d86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	3302      	adds	r3, #2
 8007d8c:	222f      	movs	r2, #47	; 0x2f
 8007d8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	3303      	adds	r3, #3
 8007d94:	2200      	movs	r2, #0
 8007d96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	371c      	adds	r7, #28
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	20000188 	.word	0x20000188

08007db0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007dba:	2200      	movs	r2, #0
 8007dbc:	6839      	ldr	r1, [r7, #0]
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f7ff ffaa 	bl	8007d18 <FATFS_LinkDriverEx>
 8007dc4:	4603      	mov	r3, r0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
	...

08007dd0 <__libc_init_array>:
 8007dd0:	b570      	push	{r4, r5, r6, lr}
 8007dd2:	4d0d      	ldr	r5, [pc, #52]	; (8007e08 <__libc_init_array+0x38>)
 8007dd4:	4c0d      	ldr	r4, [pc, #52]	; (8007e0c <__libc_init_array+0x3c>)
 8007dd6:	1b64      	subs	r4, r4, r5
 8007dd8:	10a4      	asrs	r4, r4, #2
 8007dda:	2600      	movs	r6, #0
 8007ddc:	42a6      	cmp	r6, r4
 8007dde:	d109      	bne.n	8007df4 <__libc_init_array+0x24>
 8007de0:	4d0b      	ldr	r5, [pc, #44]	; (8007e10 <__libc_init_array+0x40>)
 8007de2:	4c0c      	ldr	r4, [pc, #48]	; (8007e14 <__libc_init_array+0x44>)
 8007de4:	f000 f820 	bl	8007e28 <_init>
 8007de8:	1b64      	subs	r4, r4, r5
 8007dea:	10a4      	asrs	r4, r4, #2
 8007dec:	2600      	movs	r6, #0
 8007dee:	42a6      	cmp	r6, r4
 8007df0:	d105      	bne.n	8007dfe <__libc_init_array+0x2e>
 8007df2:	bd70      	pop	{r4, r5, r6, pc}
 8007df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007df8:	4798      	blx	r3
 8007dfa:	3601      	adds	r6, #1
 8007dfc:	e7ee      	b.n	8007ddc <__libc_init_array+0xc>
 8007dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e02:	4798      	blx	r3
 8007e04:	3601      	adds	r6, #1
 8007e06:	e7f2      	b.n	8007dee <__libc_init_array+0x1e>
 8007e08:	08007fd8 	.word	0x08007fd8
 8007e0c:	08007fd8 	.word	0x08007fd8
 8007e10:	08007fd8 	.word	0x08007fd8
 8007e14:	08007fdc 	.word	0x08007fdc

08007e18 <memset>:
 8007e18:	4402      	add	r2, r0
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d100      	bne.n	8007e22 <memset+0xa>
 8007e20:	4770      	bx	lr
 8007e22:	f803 1b01 	strb.w	r1, [r3], #1
 8007e26:	e7f9      	b.n	8007e1c <memset+0x4>

08007e28 <_init>:
 8007e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e2a:	bf00      	nop
 8007e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e2e:	bc08      	pop	{r3}
 8007e30:	469e      	mov	lr, r3
 8007e32:	4770      	bx	lr

08007e34 <_fini>:
 8007e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e36:	bf00      	nop
 8007e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e3a:	bc08      	pop	{r3}
 8007e3c:	469e      	mov	lr, r3
 8007e3e:	4770      	bx	lr
